

ℝ U_condlimi(ℝ x,ℝ t)
{
  return epsilon; 
  //(1-x)*x*exp(-t/epsilon);
}

  
// Test 2 for linear  advection (discontinuous data)
ℝ P_condlimi(ℝ x,ℝ t)
{

  ℝ S ;
  S=0;
  double  w[4], y[4];
  w[0] = 0.347854845137454;   y[0] = -0.861136311594053;
  w[1] = 0.652145154862546;   y[1] = -0.339981043584856;
  w[2] = 0.652145154862546;   y[2] =  0.339981043584856;
  w[3] = 0.347854845137454;   y[3] =  0.861136311594053;



  for (int i=1; i<=N; i++)
    {
      for (int k=0; k < 4;k++)
        {
        
          S+=0.5*w[k]*exp(-0.5*((x/(sqrt(t))*(2*i-1+ y[k]))/(2*N))²);
        }
      
     
    }
  S*=x/(sqrt(t)*N);
  
  if (t!=0) return  S +  0.5*(-sqrt(pi/2)+3);
  else return 0.5*(sqrt(pi/2)+3);
}

ℝ T_condini(ℝ x)
{
  return pow(3.0,0.25);   
}
  


  
ℝ P_condini(ℝ x,ℝ t)
{
 

return sqrt(pi/2);
  
  //if (x<=0.5) return 1;
  //else return 0.0;
  
}

ℝ U_condini(ℝ x,ℝ t)
{
  return epsilon; //(x+1)*exp(-sigma*t);
}
    
  
 
  
ℝ f_sigma(ℝ x)
{
   return 1;
   //if (x<=0.5-δx) return 1;
   //else return 2;
  //assert(false);// Jamais on doit passer par ici
  // return 0.0;
}




// ****************************************************************************
// * primitive f_sigma : Méthode de Gauss-legendre
// ****************************************************************************



ℝ F_sigma(ℝ x)
{
  return x;
  /*ℝ S ;
  S=0;
  double  w[4], y[4];
  w[0] = 0.347854845137454;   y[0] = -0.861136311594053;
  w[1] = 0.652145154862546;   y[1] = -0.339981043584856;
  w[2] = 0.652145154862546;   y[2] =  0.339981043584856;
  w[3] = 0.347854845137454;   y[3] =  0.861136311594053;



  for (int i=1; i<=N; i++)
    {
      for (int k=0; k < 4;k++)
        {
        
          S+=0.5*w[k]*f_sigma((x*(2*i-1+ y[k]))/(2*N));
        }
      
     
    }
  S*=x/N;
  return S ;*/
  }


/*ℝ F_sigma(ℝ x)
{
  // return sin(x);
  if (x<=0.5-δx) return x;
  else return 2*x;
  //assert(false);// Jamais on doit passer par ici
  // return 0.0;
  }*/



