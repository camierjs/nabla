///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): TRAN Guillaume - Guillaume.Tran@polytechnique.edu         //
//                 LOISEAU Pascal - Pascal.Loiseau@cea.fr                    //
//                 CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

void ResolutionSystemeTridiag(const ℝ* A, // sousdiag
                              const ℝ* B, // diag
                              const ℝ* C, // surdiag
                              ℝ* X,       // solution
                              ℝ* Y, // temp
                              const int N){
  ℝ bet=B[0];
  ℝ gam[N];
  ℝ zero=0.0;
    
  if ( bet == zero ){
    cout<<"ERREUR 1 : bet=0"<<endl;
    //exit;
  }
  X[0] = Y[0] / bet;
  for(int j=1; j<N; j++){
    gam[j] = C[j-1]/bet;
    //cout<<endl<<"gam["<<j<<"]="<<gam[j];
    bet = B[j]-A[j]*gam[j];
    if (bet == zero){
      cout<<"ERREUR 2 : bet=0 ; j="<<j<<endl;
      //exit;
    }
    X[j] = (Y[j]-A[j]*X[j-1])/bet;
  }
  for (int j=N-2; j>=0; j--)
    X[j] -= gam[j+1] * X[j+1];

  // shift du temp
  for (int j=0; j<N-1; j++) Y[j] = X[j];
  Y[N-1]=Y[N-2];

  // shift de la solution
  for (int j=N-1; j>0; j--) X[j] = X[j-1];
}
