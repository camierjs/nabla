with ℝ;

// αβγδδδεεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ
// ∀
// ℝℕℤ  
// ²³√½⅓¼⅛

ofstream output("schema1.plot");


// ****************************************************************************
// * Options  
// ****************************************************************************
options{
  ℝ option_a = 1.0;
  ℝ xmin = 0.0;
  ℝ xmax = 1.0; // A mettre à jour en mleme temps dans le Makefile.nabla.okina
  ℝ pi =atan(1)*4;
  ℝ N=1000;
  ℕ time_steps = 0.0005;
  ℝ final_time = 5.0;
  ℝ sigma=1.0;  
  // Yet required options for Okina 
  ℝ option_δt_initial = 0.000010;
  ℝ option_stoptime= 0.1;  
  ℝ tau =1.0;     
  ℝ epsilon = 0.001;
  ℝ CFL =1.0;
  Bool option_dump_output = true;          
};


// **************************************************************************
// * Node Variables
// ****************************************************************************
cells{  
  ℝ cU;
  ℝ cP;
  ℝ cp1P;
  ℝ cp1U;    
  ℝ cT; 
  ℝ cp1T;
  ℝ center;
  ℝ cM;

  
};


// ****************************************************************************
// * Cell Variables
// ****************************************************************************
nodes{
  /* ℝ coord */
  ℝ nU;  
  ℝ nP;
  ℝ nM;
  ℝ nM_plus;
  ℝ nM_moins;
  ℝ nT_g;
  ℝ nT_d;
 
};


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ℝ δx;
  ℝ Integrale;
  ℝ n_time;
  ℝ iδx;
  ℝ L2;
  ℝ N1;  
  ℝ Intu;  
  ℝ Intt;  
  ℝ Intp;  
};

// ****************************************************************************
// * Initialization Part @ ]-∞,-0.0[
// ****************************************************************************


void iniGlobals(void) @ -5.0
{
  δx=(xmax-xmin)/X_EDGE_ELEMS;
  δt=epsilon*CFL*δx;
  iδx=1./δx;
  printf("\n\t\t\33[7m[iniGlobals] δx=%f\33[m", (double)δx);
  printf("\n\t\t\33[7m[iniGlobals] δt=%f\33[m", (double)δt);
  assert(δt>=0.0);
}






// ****************************************************************************
// * Compute loop @ ]+0,+∞[
// ****************************************************************************
void dbgLoop(void) @ 1.0
{
   printf("\n\33[7m[Loop] #%d, time=%f\33[m", GlobalIteration,time);
}



// ********************************************************
// cT  partout
// ********************************************************

∀ cells void loop3(void) in (cell cT) @ 2.5
{
   const ℝ e1 = 1-exp(-(tau*δt)/epsilon²);
  cp1T = cT - e1*(cT -cP);
  
}
  
              


// ********************************************************
// cU partout
// ********************************************************
∀ cells void loop1(void)
  in (cell cU, cell cp1U,  cell cM /*, node nP, node nU*/)  @ 2.6
{
  const ℝ δtSx = δt/(epsilon*δx);
  const ℝ e1 = 1-exp(-(tau*δt)/epsilon²);
  const ℝ e2 = exp(-(tau*δt)/epsilon²);
  cp1U = cU-e1*cU;
  ∀ node  
      {    
    
        if (coord<center)
          {
            cp1U += e2*(-(1/epsilon)*δtSx*cM*nU +δtSx*(nP+ (1/epsilon)*nM*nU))+e1*nT_g;        
      

          } else
          {
            cp1U +=  e2*((1/epsilon)*δtSx*cM*nU-δtSx*(nP + (1/epsilon)*nM*nU))-e1*nT_d ;
          }
    
      }

  


}  


// ********************************************************
// cP  partout
// ********************************************************

∀ cells void loop2(void)
  in (cell cU, cell cP, cell cM) @ 2.61
{
  const ℝ δtSx = δt/(epsilon*δx);
  //const ℝ e1 = (tau*δt)/(epsilon² + 2*tau*δt);
  const ℝ e1 = 1-exp(-(tau*δt)/epsilon²);
  const ℝ e2 = exp(-(tau*δt)/epsilon²);
  
  cp1P=e2*cP ;
  
  ∀ node
      {
        if (center<coord){
          cp1P += -e2*nU*δtSx+e1*nT_d*0.5 ;
      
        } else{
          cp1P += e2*nU*δtSx+ e1*nT_g*0.5;
      
        }
   
      }  
 
  
} 



   

  
// Copy results
∀ cells  void copyResults(void) in (cell cU, cell cP,cell cT ) @ 2.7
{
  cU = cp1U;
  cP = cp1P;
  cT= cp1T;

  
}




// ****************************************************************************
// * Test for Quit & Dump Solution Found
// ****************************************************************************
∀ cells void dumpSolution(File results) in (cell cU, cell cP, cell cT, cell cM)
{
  results << "\t" << center
          << "\t" << cP
          << "\t"<< P_condlimi(center,option_stoptime)
          << "\n";
}

∀ cells void dumpOutput(void) in (cell cU, cell cP, cell cT, cell cM)
  
{
  if  (center!=0.725) continue;
  output << n_time
    //<< "\t" << cU
         << "\t" << cP
         << "\t" << P_condlimi(center,n_time)
         << "\n";
  
}  


void tstForQuit(void) @ 4.0 {
  //printf("\n\t[testForQuit] GlobalIteration =%d, time=%f, delta_t=%f",
  //    GlobalIteration, time,(double)δt);

  if (option_dump_output){
    dumpOutput();
    output << "\n";
    }
  
  // file(resultsvstime ,plot);
  // dumpVsTimeSolution(resultsvstime);
 if ((time<(option_stoptime-δt))) return;
  
  if (option_dump_output){
    file(results,plot);
    //printf("\n\t[testForQuit] GlobalIteration>time_steps, \33[7mdumping\33[m\n");
    //results << "#33 "<<"globalNbCells"<<" "<<"globalNbNodes"<<"\n";
    dumpSolution(results);
  }else printf("\n");
   
  exit;
}


