///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ℵ;

// ****************************************************************************
// * Déclaration des options
// ****************************************************************************
options{
  Bool option_quads             = false;
  Bool option_triangles         = false;  
  Real option_deltat            = 0.001;
  Real option_deltat_factor     = 10.0;
  Real option_theta_ini         = 300.0;
  Real option_theta_hot         = 700.0;
  Integer option_max_iterations = 8;
  // Options d'Aleph
  Real alephEpsilon             = 1.e-10;
  // Auto, Sloop, 
  Integer alephUnderlyingSolver = 0;
  Integer alephMaxIterations    = 1024;
  // DIAGONAL, AINV, AMG, IC, POLY, ILU, ILUp,
  // SPAIstat, SPAIdyn, DDMCriteriaAdaptedSelector, NONE
  Integer alephPreconditionerMethod = 2;
  // PCG, BiCGStab , BiCGStab2, GMRES, SAMG, QMR, SuperLU
  Integer alephSolverMethod     = 0;
  Integer alephNumberOfCores    = 0;
  Bool option_aleph_dump_matrix = false;
};

// ****************************************************************************
// * Déclaration des variables aux mailles
// ****************************************************************************
cells{
  Real3 cell_mass_center;
  Real cell_θ;
  Real cell_area;
  Integer cell_nb_nodes;
};

// ****************************************************************************
// * Déclaration des variables aux noeuds
// ****************************************************************************
nodes{
  Real node_θ;
  Real node_area;
  Bool node_is_an_edge;
};

// ****************************************************************************
// * Déclaration des variables aux faces
// ****************************************************************************
faces{
  Real sdivs;
  Real α;
  Real β;
  Real δ;
  Real γ;
  Real σ;
  Real Cosθ;
  Real Sinθ;
  Real face_θ;
  Uid cellLowId;
  Uid nodeLowId;
};

// ****************************************************************************
// * Déclaration des variables globales
// ****************************************************************************
global{
  Bool full_quads;
  Bool full_triangles;
};

// ****************************************************************************
// * Partie d'initialisation ]-∞,-0[
// ****************************************************************************

∀ cells void iniCells(void) @ -10.0{
  cell_nb_nodes=nbNode; 
  cell_θ=option_theta_ini;
}

∀ nodes void iniNodes(void) @ -10.0{
  node_θ=option_theta_ini;
}

∀ cells Integer computeMinNbNode(Integer minNbNode){
  minNbNode = min(minNbNode,nbNode);
  return minNbNode;
}
∀ cells Integer computeMaxNbNode(Integer maxNbNode){
  maxNbNode = max(maxNbNode,nbNode);
  return maxNbNode;
}
void testForQuadsorTriangles(void) @ -10.0{
  Real minNbNode=computeMinNbNode(1024);
  Real maxNbNode=computeMaxNbNode(0);
  Integer rMinNbNode = mpi_reduce(ReduceMin,minNbNode);
  Integer rMaxNbNode = mpi_reduce(ReduceMax,maxNbNode);
  full_quads=false;full_triangles=false;
  if ((rMinNbNode==4) && (rMaxNbNode==4)) full_quads=true;
  if ((rMinNbNode==3) && (rMaxNbNode==3)) full_triangles=true;
  if (!(full_quads^full_triangles)) fatal("testForQuadsorTriangles", "Not an exclusive mesh!");
  if (full_quads!=option_quads) fatal("testForQuadsorTriangles", "Not a told quad mesh!");
  if (full_triangles!=option_triangles) fatal("testForQuadsorTriangles", "Not a told triangular mesh!"); 
}

// ****************************************************************************
// * Calcul des Aires
// ****************************************************************************
#define computeTriangleArea2D(a, b, c) (½*((b-a)⤫(c-a)))

∀ cells void geomComputeTriangleSurface(void)  @ -10.0 if (option_triangles){
  cell_area = computeTriangleArea2D(coord[0],coord[1],coord[2]);
}

∀ cells void geomComputeQuadSurface(void) @ -10.0 if (option_quads){
  const Real3 fst_edge = coord[2]-coord[0];
  const Real3 snd_edge = coord[3]-coord[1];
  cell_area=½*(fst_edge⤫snd_edge);
}

∀ nodes void nodeArea(void) @ -9.0{
  node_area=0.0;
  foreach cell node_area+=cell_area/cell_nb_nodes;
}

// ****************************************************************************
// * Calcul des Centres de Gravité
// ****************************************************************************
∀ cells void geomComputeCellTriangleMassCenter(void) @ -10.0 if (option_triangles){
  cell_mass_center=0.0;
  foreach node cell_mass_center+=coord;
  cell_mass_center/=nbNode;
}

∀ cells void geomComputeCellQuadMassCenter(void) @ -10.0 if (option_quads){
  const register Real3 s0 = coord[0];
  const register Real3 s1 = coord[1];
  const register Real3 s2 = coord[2];
  const register Real3 s3 = coord[3];
  const register Real3 c = ¼*(s0+s1+s2+s3);
  const register Real surface[4]= {
    computeTriangleArea2D(s0,s1,c), computeTriangleArea2D(s1,s2,c),
    computeTriangleArea2D(s2,s3,c), computeTriangleArea2D(s3,s0,c)};
  const register Real3 barycentre_triangle[4] =
    {⅓*(s0+s1+c), ⅓*(s1+s2+c), ⅓*(s2+s3+c), ⅓*(s3+s0+c)};
  register Real total_surface = 0.0;
  register Real3 center = Real3(0.0,0.0,0.0);
  foreach node{
    center += barycentre_triangle[#]*surface[#];
    total_surface += surface[#]; 
  }
  cell_mass_center = center / total_surface;
}

// ****************************************************************************
// * Calculs géométriques des σ et sdivs
// ****************************************************************************
∀ faces void faceSbySigma(void) @ -9.0{
  Real3 fn0 = coord[0];
  Real3 fn1 = coord[1];
  Real s=norm(fn0-fn1);
  Real3 ccc0;
  Real3 ccc1;
  if (nbCell==2){
    ccc0=cell_mass_center[frontCell];
    ccc1=cell_mass_center[backCell];
  }
  if (nbCell==1){
    ccc0=cell_mass_center[0];
    ccc1=(fn0+fn1)/2.;
  }
  σ=norm(ccc0-ccc1);
  if (σ==0.0) fatal("faceSbySigma", "σ==0.0");
  sdivs=s/σ;
}

// ****************************************************************************
// * Initialisation du δt en fonction des options
// ****************************************************************************
∀ faces Real computeMin_σ(Real min_σ) in (face σ){
  min_σ = min(min_σ,σ);
  return min_σ;
}
void ini_δt(void) @ -8.5{
  if (option_deltat==0.0){
    Real min_σ=computeMin_σ(+∞);
    Real reduced_min_σ = mpi_reduce(ReduceMin,min_σ);
    δt=reduced_min_σ/option_deltat_factor;
  }else δt=option_deltat;
  info()<< "\33[7m[ini_δt] δt="<<δt<<"\33[m";
}

// ****************************************************************************
// * Calculs géométriques des Cosθ,Sinθ
// ****************************************************************************
∀ faces void faceTheta(void) @ -8.0{
  Real3 n0=coord[0];
  Real3 n1=coord[1];  
  Real3 c1,c0,τ,tan,nrm;
  Real sinTauTan,nrm_xτ,nΤ,nTan;
  if (nbCell==1){
    c0=cell_mass_center[0];
    c1=(n0+n1)/2.;
    cellLowId=cell(0).uniqueId();
  }else{
    if (backCellUid>frontCellUid){
      c0=cell_mass_center[frontCell];
      c1=cell_mass_center[backCell];
      cellLowId=frontCell.uniqueId();
   }else{
      c0=cell_mass_center[backCell];
      c1=cell_mass_center[frontCell];
      cellLowId=backCell.uniqueId();
    }
  }
  // Vecteur tangentiel des mailles
  τ=(c1-c0);
  nΤ=norm(τ);
  // Vecteur tangentiel des noeuds
  tan=(n1-n0);
  nTan=norm(tan);
  // Le sinus de ces deux vecteurs afin d'orienter la normale
  sinTauTan= (τ⤫tan)/(nΤ*nTan);
  nodeLowId=((sinTauTan>0.)?node(0).uniqueId():node(1).uniqueId());
  // Le vecteur normal du tangentiel des noeuds
  nrm.x=-tan.y;
  nrm.y=+tan.x;
  nrm.z=0.;
  // Que l'on réoriente en fonction de la normale
  nrm*=(sinTauTan>0)?-1.:+1.;
  nrm_xτ=norm(nrm)*nΤ;
  // Le θ entre le vecteur normal et le tangentiel des mailles
  Cosθ=dot(nrm,τ)/nrm_xτ;
  Sinθ=(nrm⤫τ)/nrm_xτ;
}

// ****************************************************************************
// * updateAlphaBetaGammaDelta
// ****************************************************************************
∀ faces void updateAlphaBetaGammaDelta(void) @ -7.0{
  α = δt*sdivs/Cosθ;
  β = γ = δt*(-Sinθ/Cosθ);
  δ = δt*(1./(sdivs*Cosθ));
}

// ****************************************************************************
// * iniNodeIsAnEdge, iniOuterNodeIsAnEdge
// ****************************************************************************
∀ nodes void iniNodeIsAnEdge(void) @ -6.0{
  node_is_an_edge=false;
}
∀ own outer nodes void iniOuterNodeIsAnEdge(void) @ -5.0{
  node_is_an_edge=true;
}

// ****************************************************************************
// * Partie de calcul ]+0,+∞[ 
// ****************************************************************************

void rhsInit(void) @ 1.0{
  alephInitialize();
  ℵ rhs reset;
  ℵ lhs reset;
}

∀ own cells void setRhsCellValues(void) @ 1.1{
  const Real θ=cell_θ;
  ℵ rhs setValue(cell_θ,this, θ);
}

∀ own nodes void setRhsAllNodeValues(void)  @ 1.2{
  const Real θ=node_θ;
  ℵ rhs setValue(node_θ,this, θ);
}

∀ own outer nodes void setRhsOuterNodeValues(void)  @ 1.3{
  ℵ rhs setValue(node_θ,this, option_theta_hot);
}

∀ own outer faces void setRhsFaceValues(void) @ 1.3{
  ℵ rhs setValue(face_θ,this, option_theta_hot);
}

// ****************************************************************************
// * alphaCells
// ****************************************************************************
∀ own cells void alphaCells(void) @ 3.1{
  register Real αc, Σα=0.0;
  foreach face {
    Σα+=sdivs/Cosθ;
    αc=α/cell_area;
    if (nbCell==1){
      ℵ matrix addValue(cell_θ,this, face_θ,f, -αc);     
      continue;
    }
    if (frontCell==*this)
      ℵ matrix addValue(cell_θ,this, cell_θ,backCell, -αc);
    else
      ℵ matrix addValue(cell_θ,this, cell_θ,frontCell,-αc);
  }
  Σα*=(δt/cell_area);
  ℵ matrix addValue(cell_θ,this, cell_θ,this, 1.0+Σα);
}

// ****************************************************************************
// * betaCells
// ****************************************************************************
∀ own cells void betaCells(void) @ 3.2{
  Cell cP;
  Node nD,nE;
  foreach face{
    Real βc=β/cell_area;
    nD=(node(0).uniqueId()==nodeLowId)?node(0):node(1);
    nE=(node(0).uniqueId()==nodeLowId)?node(1):node(0);
    cP=(cell(0).uniqueId()==cellLowId)?cell(0):(nbCell==2)?cell(1):cell(0);
    if (*this!=cP) βc*=-1.0;
    ℵ matrix addValue(cell_θ,this, node_θ,nD, βc);
    ℵ matrix addValue(cell_θ,this, node_θ,nE, -βc);
  }
}

// ****************************************************************************
// * Couplage Node-Cell: γ
// ****************************************************************************
∀ own nodes void gammaNodes(void) @ 3.3{
  Node nD;
  Cell cP,cQ;
  if (node_is_an_edge) continue;
  foreach face {
    Real γn=γ/node_area;
    nD=(node(0).uniqueId()==nodeLowId)?node(0):node(1);
    cP=(cell(0).uniqueId()==cellLowId)?cell(0):(nbCell==2)?cell(1):cell(0);
    cQ=(cell(0).uniqueId()==cellLowId)?(nbCell==2)?cell(1):cell(0):cell(0);
    if (cP==cQ) fatal("Gamma", "Should have been filtered");
    if (*this!=nD) γn*=-1.0;
    ℵ matrix addValue(node_θ,this, cell_θ,cP, γn);
    ℵ matrix addValue(node_θ,this, cell_θ,cQ, -γn);
  }
}


// ****************************************************************************
// * Node-Node: δ
// ****************************************************************************
∀ own nodes void deltaNodes(void) @ 3.4{
  register Real δn,Σδ=0.0;
  if (node_is_an_edge) continue;
  foreach face {
    Node other_node = (node(0)==*this)?node(1):node(0);
    δn=δ/node_area;
    Σδ+=1.0/(Cosθ*sdivs);
    ℵ matrix addValue(node_θ,this, node_θ,other_node, -δn);
  }
  Σδ*=δt/node_area;
  ℵ matrix addValue(node_θ,this, node_θ,this, 1.0+Σδ);
}


// ****************************************************************************
// * Conditions de Dirichlet
// ****************************************************************************
∀ own outer faces void dirichletFaces(void) @ 3.5{
  ℵ matrix addValue(face_θ,this, face_θ,this, +1.0);
}
∀ own outer nodes void dirichletNodes(void) @ 3.6{
  ℵ matrix addValue(node_θ,this, node_θ,this, +1.0);
}

// ****************************************************************************
// * Aleph Solve
// ****************************************************************************
void assembleAndSolve(void) @ 4.0 { ℵ solve; }

// ****************************************************************************
// * Récupération des résultats
// ****************************************************************************
∀ own cells void getCellResults(void) @ 4.1{
  cell_θ=ℵ lhs getValue(cell_θ,this);
}
∀ own nodes void getNodeResults(void) @ 4.2{
  node_θ=ℵ lhs getValue(node_θ,this);
}

// ****************************************************************************
// * Sync & test for Quit
// ****************************************************************************
void testForQuit(void) @ 5.0{
  synchronize(cell_θ);
  synchronize(node_θ);
  if (GlobalIteration >= option_max_iterations) exit;
}
