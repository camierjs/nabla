///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// ****************************************************************************
// * Fonctions locales de g√©om√©trie
// ****************************************************************************
inline Real geomCross2D(Real3 _u,Real3 _v){
  return Real(_u.x*_v.y - _u.y*_v.x);
}
inline Real3 geomNormal(Real3 a, Real3 b){
  return Real3(b.y-a.y,-b.x+a.x,0.0);
}

‚àÄ nodes @ -41.0{
  if (DEBUG)
    info()<<"[37m[geo,ini] coord["<<uid<<"]="<<coord<<"[0m";
}

// Calcul de Œîl: Length of the sides, before touching mesh
void computeŒîl(void) @ -30 {
  const Real3 e0 = coord[2]-coord[0];
  const Real3 e1 = coord[0]-coord[1];
  Œîl=min(fabs(e0.x-e1.x),fabs(e0.y-e1.y));
  info()<<"\33[33m[computeŒîl] Œîl="<<Œîl<<"\33[m";
}

‚àÄ nodes void randomDistortedQuads(void) @ -29 {
  
  const Real Œ±=option_rdq_Œ±;
  const Real œÅ1=drand48()+drand48()-1.0;
  const Real œÅ2=drand48()+drand48()-1.0;
  if (coord.x == 0.0 || coord.x == LENGTH) continue;
  if (coord.y == 0.0 || coord.y == LENGTH) continue;
  //info()<<"\33[33m[rdq] node #"<<this->uniqueId().asInteger()<<"@"<<coord<<"\33[m";
  coord.x+=Œ±*œÅ1*Œîl;
  coord.y+=Œ±*œÅ2*Œîl;
  //debug()<<"\t\33[33m[rdq] => "<<coord<<"\33[m";
}

// ****************************************************************************
// * geomComputeSurfaceAndVolume @ -20.0 & 23.0
// ****************************************************************************
‚àÄ cells @ -20.0,23.0 {
  const Real3 fst_edge = coord[2]-coord[0];
  const Real3 snd_edge = coord[0]-coord[1];
  center=0.25*(coord[0]+coord[1]+coord[2]+coord[3]);
  V=geomCross2D(fst_edge,snd_edge);
  if (DEBUG)
    printf("\n[37m[geo,std] V=%.15e[0m",V);
}

// ****************************************************************************
// * debug des positions des noeuds
// ****************************************************************************

// ****************************************************************************
// * Calcul des r√©sultantes aux sommets des mailles
// * geomComputeCQsQuad @ -20.0,24.0
// ****************************************************************************
‚àÄ cells @ -20.0,24.0 {
  const Real3 X[4] = {coord[0],coord[1],coord[2],coord[3]};
  ‚àÄ node{
    const int i=(#+nbNode-1)%nbNode;
    const int j=(#+nbNode+1)%nbNode;
    CQs = 0.5*geomNormal(X[i],X[j]);
    absCQs=norm(CQs);
    if (DEBUG) cout << "\n[37m[geo,std] CQs["<<#<<"]: "<<CQs<<"[0m";
  }
}
