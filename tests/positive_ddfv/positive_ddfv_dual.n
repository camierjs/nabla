// * @ -9 *********************************************************************
// * Initialisations diverses
// ****************************************************************************
nodes void iniNodes(void) @ -9.5{
  node_θ=option_ini_temperature;
  //info()<<"Node #"<<uid<<" has faces";
  //foreach face info()<<"\tface #"<<uid;
  //foreach cell info()<<"\tcell #"<<uid;
}

nodes void iniDoubleDualSwap(void) @ -9.4{
  foreach face{
    if (nbCell==1) continue;
    const Real3 α=cell_mass_center[backCell]-coord;
    const Real3 β=cell_mass_center[frontCell]-coord;
    //dual_swap = (α⨯β)<0.0;
    dual_swap = cross2D(α,β)<0.0;
    if (dual_swap) info()<<"Swapping Node #"<<this->uniqueId()<<" and face #"<<uid;
  }
}
nodes void iniSingleDualSwap(void) @ -9.3{
  foreach face{
    if (nbCell==2) continue;
    const Real3 α=cell_mass_center[cell(0)]-coord;
    const Real3 β=½*(coord[node(1)]+coord[node(0)])-coord;
    //dual_swap = (α⨯β)<0.0;
    dual_swap = cross2D(α,β)<0.0;
    if (dual_swap) info()<<"Swapping Node #"<<this->uniqueId()<<" and face #"<<uid;
  }
}


outer nodes void iniOuterNodes(void) @ -9.0{
  node_θ=option_hot_temperature;
}

nodes void iniNodeIsAnEdge(void) @ -9.5{
  node_is_an_edge=false;
}
own outer nodes void iniOuterNodeIsAnEdge(void) @ -9.0{
  node_is_an_edge=true;
}


// * @ -6.0 *******************************************************************
// * 'Positive' part: ‖e‖, 1/‖e‖, middle
// ****************************************************************************
// On chercher à orienter dans le DUAL les arrêtes selon l'ordre croissant d'UID
// Fait par nature dans Arcane
// Calcule de ‖dual_e‖ pour chaque face, de son dual_inverse et du dual_milieu
inner faces void dualInnerFaceE(void) @ -6.0 {
  const register Real3 s0=cell_mass_center[backCell];
  const register Real3 s1=cell_mass_center[frontCell];
  const Real3 vector=s1-s0;
  dual_e = norm(vector);
  assert(dual_e!=0.0);
  dual_inv_e = 1.0/dual_e;
  dual_middle=½*(s0+s1);
}
outer faces void dualOuterFaceE(void)  @ -6.0 {
  const register Real3 s0=½*(coord[0]+coord[1]);
  const register Real3 s1=cell_mass_center[cell(0)];
  const Real3 vector=s1-s0;
  dual_e = vector.abs();
  assert(dual_e!=0.0);
  dual_inv_e = 1.0/dual_e;
  dual_middle=½*(s0+s1);
}


// * @ -5.0 *******************************************************************
// * 'Positive' part: ‖KMi‖, 1/‖KMi‖
// ****************************************************************************
nodes void dualKMi(void) @ -5.5 {
  foreach cell{
    dual_KMi=cell_mass_center-coord;
    //info()<<"dualKMi (n"<<this->uniqueId()<<",c"<<uid<<")="<<dual_KMi;
  }
}
nodes void dualNormKMi(void) @ -5.0{
  foreach cell{
    dual_InverseNormKMi=1.0/norm(dual_KMi);
    //info()<<"dual_NormKMi (n"<<this->uniqueId()<<",c"<<uid<<")="<<dual_KMi.abs();
  }
}


// * @ -4.0 *******************************************************************
// * 'Positive' part: repères dans les mailles (offset)
// ****************************************************************************
/*nodes void dualCellsUid(void) @ -4.1{
  // On va utiliser le # pour référencer le numéro de backCell
  foreach face{
    node_face_uid=uid;
    //info()<<"node_face_uid (n"<<this->uniqueId()<<",f"<<uid<<")="<<node_face_uid;
    }
    }*/

nodes void dualNodeDoubleCellTailOffset(void) @ -4.0{
  foreach face{
    if (nbCell==1) continue;
    dual_face_tail_offset=#;
    dual_face_head_offset=(#+1)%backCell->nbNode();
    info()<<"node #"<<this->uniqueId()<<", face #"<<uid
          <<", dual_face_tail_offset="<<dual_face_tail_offset
          <<", dual_face_head_offset="<<dual_face_head_offset;
  }
}
nodes void dualNodeSingleCellTailOffset(void) @ -4.0{
  foreach face{
    if (nbCell==2) continue;
    dual_face_tail_offset=#;
    dual_face_head_offset=(#+1)%cell(0)->nbNode();
    info()<<"node #"<<this->uniqueId()<<", face #"<<uid
          <<", dual_face_tail_offset="<<dual_face_tail_offset
          <<", dual_face_head_offset="<<dual_face_head_offset;
  }
}


// * @ -3.0 *******************************************************************
// * 'Positive' part: Optical depth
// ****************************************************************************
faces void dualDoubleOpticalDepth(void) @ -3.1 {
  if (nbCell==1) continue;
  const register Real3 s0 = cell_mass_center[backCell];
  const register Real3 s1 = cell_mass_center[frontCell];
  const Real3 Af = computeOnLine(s1,s0);
  const Real3 Xf = ½*(s1+s0);
  const Real3 XQf = *this==node(0)?coord[1]:coord[0];
  const Real3 XQb = *this==node(0)?coord[0]:coord[1];
  //info()<<"face #"<<this->uniqueId()<<", Af="<<Af<<", Xf="<<Xf<<", XQf="<<XQf<<", XQb="<<XQb;
  //info()<<"dual_inv_e="<<dual_inv_e;
  dual_frontcell_optical_depth=absolute(((XQf-Xf)⋅Af)*dual_inv_e);
  dual_backcell_optical_depth=absolute(((Xf-XQb)⋅Af)*dual_inv_e);
  //info()<<"\tdual_frontcell_optical_depth="<<dual_frontcell_optical_depth;
  //info()<<"\tdual_backcell_optical_depth="<<dual_backcell_optical_depth;
}

faces void dualSingleOpticalDepth(void) @ -3.0 {
  if (nbCell==2) continue;
  const register Real3 s0 = ½*(coord[0]+coord[1]);
  const register Real3 s1 = cell_mass_center[cell(0)];
  const Real3 Af = computeOnLine(s1,s0);
  const Real3 Xf = ½*(s1+s0);
  const Real3 XQf = *this==node(0)?coord[1]:coord[0];
  dual_frontcell_optical_depth=absolute(((XQf-Xf)⋅Af)*dual_inv_e);
  //info()<<"\tdual_frontcell_optical_depth="<<dual_frontcell_optical_depth;
}

nodes void dualDoubleO12(void) @ -2.1 {
  foreach face{
    if (nbCell==1) continue;
    const Real orientation=dual_swap?-1.0:1.0;
    const Real3 vector=orientation*(cell_mass_center[frontCell]-cell_mass_center[backCell]);
    const Real3 nKe=Perp(vector)*dual_inv_e;
    dual_KO=dual_frontcell_optical_depth*nKe;
    if (*this==node(0))
      dual_KO=dual_backcell_optical_depth*nKe;
    //info()<<"node #"<<this->uniqueId()<<", face #"<<uid<<", nKe="<<nKe<<", dual_KO="<<dual_KO;
    dual_InverseNormKO=norm(dual_KO);
    assert(dual_InverseNormKO!=0.0);
    dual_InverseNormKO=1.0/dual_InverseNormKO;
  }
}

nodes void dualSingleO12(void) @ -2.0 {
  foreach face{
    if (nbCell==2) continue;
    const Real orientation=dual_swap?-1.0:1.0;
    Real3 vector=orientation*(middle-cell_mass_center[cell(0)]);
    const Real3 nKe=Perp(vector)*dual_inv_e;
    dual_KO=dual_frontcell_optical_depth*nKe;
    //info()<<"node #"<<this->uniqueId()<<", face #"<<uid<<", nKe="<<nKe<<", dual_KO="<<dual_KO;
    dual_InverseNormKO=norm(dual_KO);
    assert(dual_InverseNormKO!=0.0);
    dual_InverseNormKO=1.0/dual_InverseNormKO;
  }
}


// * @ -1.0 *******************************************************************
// * 'Positive' part: calcule des α,β
// * ⨯ to cross2D
// ****************************************************************************
nodes void dualDoubleAlphaBeta(void) @ -1.0 {
  int i;
  Real α=0.0;
  Real β=0.0;
  Integer nb_cell=nbCell;
  foreach face{
    if (nbCell==1) continue;
    i=0;
    α=β=-1.0;
    while ((α<=0.0) || (β<=0.0)){
      const Integer i1=(i+0)%nb_cell;
      const Integer i2=(i+1)%nb_cell;
      const Real3 KM1=dual_KMi[i1];
      const Real3 KM2=dual_KMi[i2];
      const Real invNrmKM1=dual_InverseNormKMi[i1];
      const Real invNrmKM2=dual_InverseNormKMi[i2];
      const Real sinθ=cross2D(KM1,KM2)*invNrmKM1*invNrmKM2;
      const Real invSinθ=1.0/sinθ;
      const Real sinθ1=cross2D(KM1,dual_KO)*invNrmKM1*dual_InverseNormKO;
      const Real sinθ2=cross2D(dual_KO,KM2)*invNrmKM2*dual_InverseNormKO;
      info()<<"node #"<<this->uniqueId()<<", face #"<<uid;
      info()<<"\ti1="<<i1<<", i2="<<i2;
      α=(sinθ2*invSinθ)*invNrmKM1;
      β=(sinθ1*invSinθ)*invNrmKM2;
      // On chercher le couple α & β >= 0
      if ((α<=0.0) || (β<=0.0)){
        info()<<"\tSkipping α="<<α<<", β="<<β;
        i+=1;
        continue;
      }
      info()<<"\tHit α="<<α<<", β="<<β;
      if (*this==node(0)) dual_α_back=α;
      if (*this==node(1)) dual_β_back=β;
      if (*this==node(0)) dual_α_front=α;
      if (*this==node(1)) dual_β_front=β;
      dual_base_tail_offset=i1;
      dual_base_head_offset=i2;
      break;
    }
  }
  assert((α>=0.0) && (β>=0.0));
}

nodes void dualSingleAlphaBeta(void) @ -1.0 {
  int i;
  Real α=0.0;
  Real β=0.0;
  Integer nb_cell=nbCell;
  foreach face{
    if (nbCell==2) continue;
    i=0;
    α=β=-1.0;
    while ((α<0.0) || (β<0.0)){
      //const Integer i1=(i+0)%nb_cell;
      const Integer i2=(i+1)%nb_cell;
      const Real3 KM1=middle-coord;
      const Real3 KM2=dual_KMi[i2];
      const Real invNrmKM1=1.0/norm(middle);
      const Real invNrmKM2=dual_InverseNormKMi[i2];
      const Real sinθ=cross2D(KM1,KM2)*invNrmKM1*invNrmKM2;
      const Real invSinθ=1.0/sinθ;
      const Real sinθ1=cross2D(KM1,dual_KO)*invNrmKM1*dual_InverseNormKO;
      const Real sinθ2=cross2D(dual_KO,KM2)*invNrmKM2*dual_InverseNormKO;
      info()<<"node #"<<this->uniqueId()<<", edge-face #"<<uid;
      info()<<"\ti2="<<i2;
      α=(sinθ2*invSinθ)*invNrmKM1;
      β=(sinθ1*invSinθ)*invNrmKM2;
      // On chercher le couple α & β >= 0
      if ((α<0.0) || (β<0.0)){
        info()<<"\tSkipping α="<<α<<", β="<<β;
        i+=1;
        continue;
      }
      info()<<"\tHit α="<<α<<", β="<<β;
      if (*this==node(0)) dual_α_back=α;
      if (*this==node(1)) dual_β_back=β;
      if (*this==node(0)) dual_α_front=α;
      if (*this==node(1)) dual_β_front=β;
      dual_base_tail_offset=0;
      dual_base_head_offset=i2;
      break;
    }
  }
  assert((α>=0.0) && (β>=0.0));
}


// ****************************************************************************
// * Partie de calcul ]+0,+∞[ 
// ****************************************************************************


// * @ +0.0 *******************************************************************
// * Calcul des constantes a1,a1,μ1,μ2
// ****************************************************************************
nodes void dualDoubleA1A2(void) @ 0.25 {
  foreach face{
    if (nbCell==1) continue;
    Real θM1=dual_swap?cell_θ[backCell]:cell_θ[frontCell];
    Real θM2=dual_swap?cell_θ[frontCell]:cell_θ[backCell];
    // On va chercher les températures aux noeuds de la face
    if (*this==node(0)) a1=dual_e*κ*(dual_β_back*θM2+dual_α_back*θM1);
    if (*this==node(1)) a2=dual_e*κ*(dual_β_front*θM2+dual_α_front*θM1);
  }
}
nodes void dualSingleA1A2(void) @ 0.25 {
  foreach face{
    if (nbCell==2) continue;
    Real θM1=dual_swap?face_θ:cell_θ[cell(0)];
    Real θM2=dual_swap?cell_θ[cell(0)]:face_θ;
    // On va chercher les températures aux noeuds de la face
    if (*this==node(0)) dual_a1=dual_e*κ*(dual_β_back*θM2+dual_α_back*θM1);
    if (*this==node(1)) dual_a2=dual_e*κ*(dual_β_front*θM2+dual_α_front*θM1);
  }
}
faces void dualMu1Mu2(void) @ 0.75 {
  if (dual_a1+dual_a2==0.0) dual_a1=dual_a2=¼;
  const register Real dual_sum_ai=dual_a1+dual_a2;
  const register Real inv_dual_sum_ai=1.0/dual_sum_ai;
  dual_μ1=dual_a2*inv_dual_sum_ai;
  dual_μ2=dual_a1*inv_dual_sum_ai;
}


// ****************************************************************************
// * Initialisation de la partie Algèbre Linéaire
// ****************************************************************************
nodes void setRhsAllNodeValues(void)  @ 1.2{
  const Real θ=node_θ;
  ℵ rhs setValue(node_θ,this, θ);
}


// ****************************************************************************
// * deltaCells
// ****************************************************************************
own inner faces void deltaInnerCells(void) @ 3.41{
  const Real extra_diag_coef_bck2frt = -dual_μ2*dual_e*κ*(dual_β_front+dual_α_front);
  const Real extra_diag_coef_frt2bck = -dual_μ1*dual_e*κ*(dual_β_back+dual_α_back);
  ℵ matrix addValue(node_θ,node(0), node_θ,node(1), extra_diag_coef_bck2frt);
  ℵ matrix addValue(node_θ,node(1), node_θ,node(0), extra_diag_coef_frt2bck);
}
own outer faces void deltaOuterCells(void) @ 3.42{
  const Real extra_diag_coef = -dual_μ2*dual_e*κ*(dual_β_front+dual_α_front);
  ℵ matrix addValue(face_θ,this, node_θ,node(0), extra_diag_coef);
  //ℵ matrix addValue(node_θ,node(0), face_θ,*this, extra_diag_coef);
}
own nodes void deltaDiagonale(void) @ 3.43{
  Real Σδ=0.0;
  if (node_is_an_edge==true) continue;
  foreach face{
    if (*this==node(0))
      Σδ += κ*dual_μ1*dual_e*(dual_α_back+dual_β_back);
    else 
      Σδ += κ*dual_μ2*dual_e*(dual_α_front+dual_β_front);
  }
  Σδ*=δt/node_area;
  ℵ matrix addValue(node_θ,this, node_θ,this, 1.0+Σδ);
}


// ****************************************************************************
// * Conditions de Dirichlet
// ****************************************************************************
own outer nodes void dirichletNodes(void) @ 3.6{
  ℵ matrix addValue(node_θ,this, node_θ,this, +1.0);
}


// ****************************************************************************
// * Récupération des résultats
// ****************************************************************************
own nodes void getNodeResults(void) @ 4.2{
  node_θ=ℵ lhs getValue(node_θ,this);
}

