//m all && ARCANE_PARALLEL_OUTPUT=1 m h2
with aleph;

// 0,xIC,ILU
// 3,IC
// 5,AMG

// ****************************************************************************
// * D√©claration des options accessibles depuis l'AXL
// ****************************************************************************
options{
  Real option_deltat = 0.0;            // 0 ‚âù automatic
  Real option_epsilon = 0.01;
  Real option_ini_borders = 1.0;
  Integer option_ini_iterations = 1;
  Integer option_max_iterations = 1024;
  // Options d'Aleph
  Real alephEpsilon = 1.e-8;
  Integer alephUnderlyingSolver = 0;
  Integer alephMaxIterations = 16384;
  Integer alephPreconditionerMethod = 5; // DIAGONAL=0, AINV=1, AMG=2, IC=3, POLY=4, ILU=5, ILUp=6,
                                         // SPAIstat=7, SPAIdyn=8, DDMCriteriaAdaptedSelector=9, NONE=10
  Integer alephSolverMethod = 3; //PCG=0, BiCGStab=1 , BiCGStab2=2, GMRES=3, SAMG=4, QMR=5, SuperLU=6
  Integer alephNumberOfCores = 0;
  Bool option_aleph_dump_matrix = false;
}; 
// ****************************************************************************
// * D√©claration des variables aux noeuds
// ****************************************************************************
nodes{
  Real node_area;
  Real node_is_an_edge;
  Real node_density;
  Real node_density_re;
  Real node_density_im;
  Integer node_matrix_idx_re;
  Integer node_matrix_idx_im;
};

// ****************************************************************************
// * D√©claration des variables aux mailles
// ****************************************************************************
cells{
  Integer cell_nb_nodes;
  Real3 ccc;
  Real cell_area;
  Real cell_density;
  Real cell_density_re;
  Real cell_density_im;
  Real cell_density_re_zero;
  Real cell_density_im_zero;
  Real cell_density_or_reim_zero;
  Real cell_density_eq_reim_zero;
  Integer cell_matrix_idx_re;
  Integer cell_matrix_idx_im;
};

// ****************************************************************************
// * D√©claration des variables aux faces
// ****************************************************************************
faces{
  Real sdivs;
  Real Œ±;
  Real Œ≤;
  Real Œ¥;
  Real Œ≥;
  Real œÉ;
  Real CosŒ∏;
  Real SinŒ∏;
  Real edge_density_re;
  Real edge_density_im;
  Uid cellLowId;
  Uid nodeLowId;
  Integer edge_matrix_idx_re;
  Integer edge_matrix_idx_im;
};


// ****************************************************************************
// * Partie d'initialisation ]-‚àû,-0[
// ****************************************************************************

cells void iniCells(void)
  out (cell sub_domain_id, cell unique_id, cell cell_density,
       cell cell_density_re, cell cell_density_im) @ -10{
  // Mise √† jour du nombre de noeuds.
  // On pourrait le faire en live apr√®s, mais pas encore au sein d'un foreach
  cell_nb_nodes=nbNode;
  // Initialisation des valeures aux mailles
  cell_density =
    cell_density_re =
    cell_density_im =
    cell_density_eq_reim_zero = 0.0;
}

nodes void iniNodes(void) out (node node_density,
                               node node_density_re,
                               node node_density_im) @ -10{
  node_density=node_density_re=node_density_im=0.0;
}

faces void iniFaces(void) out (face edge_density_re,
                               face edge_density_im) @ -10{
  edge_density_re=edge_density_im=option_ini_borders;
}

cells void cellAreaSqrt(void) out (cell cell_area) {//@ -9{
  const Real3 a=coord[0];
  const Real3 b=coord[1];
  const Real3 c=coord[2];
  register Real ab,bc,ca,p;
  if (!(a.z==0.&&b.z==0.&&c.z==0.))
    fatal("cellArea", "Failed with coplanarity");
  ab=norm(a-b);
  bc=norm(b-c);
  ca=norm(c-a);
  p=0.5*(ab+bc+ca);
  cell_area=sqrt(p*(p-ab)*(p-bc)*(p-ca));
}

cells void cellArea(void) out (cell cell_area) @ -9.0{
  const register Real3 u = coord[2]-coord[0];
  const register Real3 v = coord[0]-coord[1];      
  //cell_ùê¥ = ¬Ω(ca‚äóab);
  cell_area = 0.5*(u.x*v.y - u.y*v.x);
}


cells void cellGravityCenter(void) out (cell ccc)@-9{
  ccc=0.;
  foreach node ccc+=coord;
  ccc/=nbNode;
}

nodes void nodeArea(void) in (cell cell_area,
                              cell cell_nb_nodes)
                          out (node node_area)@-8.5{
  node_area=0.;
  foreach cell node_area+=cell_area/cell_nb_nodes;
}

faces void faceSbySigma(void) in (cell ccc) out (face sdivs, face œÉ) @ -8.4{
  Real3 fn0 = coord[0];
  Real3 fn1 = coord[1];
  Real s=norm(fn0-fn1);
  Real3 ccc0;
  Real3 ccc1;
  
  if (nbCell==2){
    ccc0=ccc[frontCell];
    ccc1=ccc[backCell];
  }
  if (nbCell==1){
    ccc0=ccc[0];
    ccc1=(fn0+fn1)/2.;
  }
  œÉ=norm(ccc0-ccc1);
  if (œÉ==0.) fatal("faceSbySigma", "|Sigma(p)| == 0.");
  sdivs=s/œÉ;  
} 
 


// ****************************************************************************
// * Initialisation du Œ¥t en fonction des options
// ****************************************************************************
faces Real computeMin_œÉ(Real min_œÉ) in (face œÉ){
  min_œÉ = min(min_œÉ,œÉ);
  return min_œÉ;
}
void ini_Œ¥t(void) @ -8.35{
  if (option_deltat==0.0){
    Real min_œÉ=computeMin_œÉ(1.0e+20);
    Real reduced_min_œÉ = mpi_reduce(ReduceMin,min_œÉ);
    Œ¥t=reduced_min_œÉ/10.0;
  }else{
    Œ¥t=option_deltat;
  }
  info()<< "\33[7m[ini_Œ¥t] Œ¥t="<<Œ¥t<<"\33[m";
}


  
// ****************************************************************************
// * faceTheta
// ****************************************************************************
faces void faceTheta(void) out (face CosŒ∏, face SinŒ∏) @ -8.3{
  Real3 n0=coord[0];
  Real3 n1=coord[1];  
  Real3 c1,c0,œÑ,tan,nrm;
  Real sinTauTan,nrm_xœÑ,nŒ§,nTan;
  if (nbCell==1){
    c0=ccc[0];
    c1=(n0+n1)/2.;
    cellLowId=cell(0).uniqueId();
    //unGlitch(c1,c0);
  }else{
    if (backCellUid>frontCellUid){
      c0=ccc[frontCell];
      c1=ccc[backCell];
      cellLowId=frontCell.uniqueId();
   }else{
      c0=ccc[backCell];
      c1=ccc[frontCell];
      cellLowId=backCell.uniqueId();
    }
    //unGlitch(c1,c0);
  }
  œÑ=(c1-c0);  // Vecteur tangentiel des mailles
  nŒ§=norm(œÑ);
  // unGlitch(n1,n0);
  tan=(n1-n0);  // Vecteur tangentiel des noeuds
  nTan=norm(tan);
  // Le sinus de ces deux vecteurs afin d'orienter la normale
  sinTauTan= cross2D(œÑ,tan)/(nŒ§*nTan);
  nodeLowId=((sinTauTan>0.)?node(0).uniqueId():node(1).uniqueId());
  // Le vecteur normal du tangentiel des noeuds
  nrm.x=-tan.y;
  nrm.y=+tan.x;
  nrm.z=0.;
  // Que l'on r√©oriente en fonction de la normale
  nrm*=(sinTauTan>0)?-1.:+1.;
  nrm_xœÑ=norm(nrm)*nŒ§;// Calcul de la norme
  // Le theta entre ce vecteur normal et le tangentiel des mailles
  CosŒ∏=(nrm‚ãÖœÑ)/nrm_xœÑ;
  SinŒ∏=cross2D(nrm,œÑ)/nrm_xœÑ;
}


// ****************************************************************************
// * updateAlphaBetaGammaDelta
// ****************************************************************************
faces void updateAlphaBetaGammaDelta(void) @ -8.2{
  Œ± = Œ¥t*sdivs/CosŒ∏;
  Œ≤ = Œ≥ = Œ¥t*(-SinŒ∏/CosŒ∏);
  Œ¥ = Œ¥t*(1./(sdivs*CosŒ∏));
}


// ****************************************************************************
// * iniNodeIsAnEdge, iniOuterNodeIsAnEdge
// ****************************************************************************
nodes void iniNodeIsAnEdge(void) out (node node_is_an_edge) @ -8{
  node_is_an_edge=false;
}
own outer nodes void iniOuterNodeIsAnEdge(void) out (node node_is_an_edge) @ -7.9{
  node_is_an_edge=true;
}


// ****************************************************************************
// * ownNbOfFaces
// ****************************************************************************
own outer faces Integer ownNbOfFaces(Integer own_nb_face){
  own_nb_face+=1;
  return own_nb_face;
}

// ****************************************************************************
// * initAlgebra fillings
// ****************************************************************************
own cells int fillCellMatrixIndex(int row_offset, int idx)
  out (cell cell_matrix_idx_re, cell cell_matrix_idx_im){
  vector_indexs.add(cell_matrix_idx_re = row_offset + (idx++)); vector_zeroes.add(0.0);
  vector_indexs.add(cell_matrix_idx_im = row_offset + (idx++)); vector_zeroes.add(0.0);
  return idx;
}

own nodes int fillNodeMatrixIndex(Integer row_offset, Integer idx)
  out (node node_matrix_idx_re, node node_matrix_idx_im){
  vector_indexs.add(node_matrix_idx_re = row_offset + (idx++)); vector_zeroes.add(0.0);
  vector_indexs.add(node_matrix_idx_im = row_offset + (idx++)); vector_zeroes.add(0.0);
  return idx;
}

own outer faces void fillFaceMatrixIndex(Integer row_offset, Integer idx)
  out (face edge_matrix_idx_re, face edge_matrix_idx_im){
  vector_indexs.add(edge_matrix_idx_re = row_offset + (idx++)); vector_zeroes.add(0.0);
  vector_indexs.add(edge_matrix_idx_im = row_offset + (idx++)); vector_zeroes.add(0.0);
}

// ****************************************************************************
// * initAlgebra
// ****************************************************************************
void initAlgebra(void) @ -7{
  const Integer own_nb_cell=ownCells().size();
  const Integer all_nb_cell=mpi_reduce(ReduceSum,own_nb_cell);
  const Integer own_nb_node=ownNodes().size();
  const Integer all_nb_node=mpi_reduce(ReduceSum,own_nb_node);
  const Integer own_nb_face=ownNbOfFaces(0);
  const Integer all_nb_face=mpi_reduce(ReduceSum,own_nb_face);
  const Integer nb_row_size=2*(all_nb_cell+all_nb_node+all_nb_face);
  const Integer nb_row_rank=2*(own_nb_cell+own_nb_node+own_nb_face);
  synchronize(ccc);
  synchronize(node_area);
  synchronize(node_is_an_edge);
  m_aleph_kernel->initialize(nb_row_size,nb_row_rank);
  {
    Integer idx;
    const Integer row_offset=m_aleph_kernel->topology()->part()[m_aleph_kernel->rank()];
    idx=fillCellMatrixIndex(row_offset,0);
    synchronize(cell_matrix_idx_re);
    synchronize(cell_matrix_idx_im);
    idx=fillNodeMatrixIndex(row_offset,idx);
    synchronize(node_matrix_idx_re);
    synchronize(node_matrix_idx_im);
    fillFaceMatrixIndex(row_offset,idx);
    synchronize(edge_matrix_idx_re);
    synchronize(edge_matrix_idx_im);
  }
}


// ****************************************************************************
// * Partie de calcul ]+0,+‚àû[ 
// ****************************************************************************

// ****************************************************************************
// * Remplissage du RHS
// ****************************************************************************
void rhsInit(void)@1.0{
  aleph rhs reset;
}
own cells void setRhsCellValues(void) @ 1.1{
  aleph rhs newValue(+cell_density_re);
  aleph rhs newValue(-cell_density_im);
}
own nodes void setRhsNodeValues(void) @ 1.2{
  aleph rhs newValue(+node_density_re);
  aleph rhs newValue(-node_density_im);
}
own outer faces void setRhsFaceValues(void) @ 1.3{
  aleph rhs newValue(+edge_density_re);
  aleph rhs newValue(-edge_density_im);
}


// ****************************************************************************
// On met lors des 'option_ini_iterations' premi√®res it√©rations √† 'option_ini_borders'
// les noeuds et faces de l'ensemble des bords
// ****************************************************************************
own outer faces void setStdRhsEdgesOnBorders(void) @ 1.4{
  const double ini=(GlobalIteration>option_ini_iterations)?0.0:option_ini_borders;
  alephRhsSet(edge_matrix_idx_re, +ini);
  alephRhsSet(edge_matrix_idx_im, -ini);
  if (node(0).isOwn()){
    alephRhsSet(node_matrix_idx_re[0], +ini);
    alephRhsSet(node_matrix_idx_im[0], -ini);
  }
  if (node(1).isOwn()){
    alephRhsSet(node_matrix_idx_re[1], +ini);
    alephRhsSet(node_matrix_idx_im[1], -ini);
  }
}
//void dumpRhs(void) @ 1.5 { info()<<rhs; }


// ********************************************************
// * Launch Aleph initialization
// * Could be done as: 'alephInitialize @ 2;'
// ********************************************************
void getMatrixAndVectors(void) @ 2{
  alephInitialize();
}


// ****************************************************************************
// * alphaCells
// ****************************************************************************
own cells void alphaCells(void)
  in (cell cell_area, cell cell_matrix_idx_re, cell cell_matrix_idx_im) @ 3.1{
  register Real Œ±c, Œ£Œ±=0.;
  foreach face {
    Œ±c=Œ±/cell_area;
    Œ£Œ±+=sdivs/CosŒ∏;
    if (nbCell==2){
      if (frontCell==*this){
        //alephAddValue(cell_density_re, this, cell_density_im, backCell, Œ±c);
        alephAddValue(cell_matrix_idx_re, cell_matrix_idx_im[backCell], Œ±c);
        alephAddValue(cell_matrix_idx_im, cell_matrix_idx_re[backCell], Œ±c);
      } else {
        alephAddValue(cell_matrix_idx_re, cell_matrix_idx_im[frontCell], Œ±c);
        alephAddValue(cell_matrix_idx_im, cell_matrix_idx_re[frontCell], Œ±c);
      }
    }
    if (nbCell==1){
      alephAddValue(cell_matrix_idx_re, edge_matrix_idx_im, Œ±c);
      alephAddValue(cell_matrix_idx_im, edge_matrix_idx_re, Œ±c);
    }
  }
  Œ£Œ±*=(Œ¥t/cell_area);
  alephAddValue(cell_matrix_idx_re, cell_matrix_idx_re, +1.0);
  alephAddValue(cell_matrix_idx_re, cell_matrix_idx_im, -Œ£Œ±);
  alephAddValue(cell_matrix_idx_im, cell_matrix_idx_re, -Œ£Œ±);
  alephAddValue(cell_matrix_idx_im, cell_matrix_idx_im, -1.0);
}


// ****************************************************************************
// * betaCells
// ****************************************************************************
own cells void betaCells(void)
  in (cell cell_area, cell cell_matrix_idx_re, cell cell_matrix_idx_im) @ 3.2{
  Node nD,nE;
  Cell cP;
  foreach face{
    Real Œ≤c=Œ≤/cell_area;
    nD=(node(0).uniqueId()==nodeLowId)?node(0):node(1);
    nE=(node(0).uniqueId()==nodeLowId)?node(1):node(0);
    cP=(cell(0).uniqueId()==cellLowId)?cell(0):(nbCell==2)?cell(1):cell(0);
    if (*this!=cP) Œ≤c*=-1.;
    alephAddValue(cell_matrix_idx_re, node_matrix_idx_im[nE], +Œ≤c);
    alephAddValue(cell_matrix_idx_im, node_matrix_idx_re[nE], +Œ≤c);
    alephAddValue(cell_matrix_idx_re, node_matrix_idx_im[nD], -Œ≤c);
    alephAddValue(cell_matrix_idx_im, node_matrix_idx_re[nD], -Œ≤c);
  }
}


// ****************************************************************************
// * gammaCells
// ****************************************************************************
own nodes void gammaNodes(void)
  in (node node_area, node node_is_an_edge) @ 3.3{
  Node nD,nE;
  Cell cP,cQ;
  if (node_is_an_edge==true) continue;
  foreach face {
    Real Œ≥n=Œ≥/node_area;
    nD=(node(0).uniqueId()==nodeLowId)?node(0):node(1);
    nE=(node(0).uniqueId()==nodeLowId)?node(1):node(0);
    cP=(cell(0).uniqueId()==cellLowId)?cell(0):(nbCell==2)?cell(1):cell(0);
    cQ=(cell(0).uniqueId()==cellLowId)?(nbCell==2)?cell(1):cell(0):cell(0);
    if (cP==cQ) fatal("Gamma", "Should have been filtered");
    if (*this!=nD) Œ≥n*=-1.;
    alephAddValue(node_matrix_idx_re, cell_matrix_idx_im[cQ], +Œ≥n);
    alephAddValue(node_matrix_idx_im, cell_matrix_idx_re[cQ], +Œ≥n);
    alephAddValue(node_matrix_idx_re, cell_matrix_idx_im[cP], -Œ≥n);
    alephAddValue(node_matrix_idx_im, cell_matrix_idx_re[cP], -Œ≥n);
  }
}


// ****************************************************************************
// * deltaCells
// ****************************************************************************
own nodes void deltaNodes(void)
  in (node node_area, node node_is_an_edge)@3.4{
  register Real Œ¥n,Œ£Œ¥=0.;
  if (node_is_an_edge==true) continue;
  foreach face {
    Œ¥n=Œ¥/node_area;
    Œ£Œ¥+=1.0/(CosŒ∏*sdivs);
    alephAddValue(node_matrix_idx_re, node_matrix_idx_im[(node(0)==*this)?node(1):node(0)], +Œ¥n);
    alephAddValue(node_matrix_idx_im, node_matrix_idx_re[(node(0)==*this)?node(1):node(0)], +Œ¥n);
  }
  Œ£Œ¥*=Œ¥t/node_area;
  alephAddValue(node_matrix_idx_re, node_matrix_idx_re, +1.0);
  alephAddValue(node_matrix_idx_re, node_matrix_idx_im, -Œ£Œ¥);
  alephAddValue(node_matrix_idx_im, node_matrix_idx_re, -Œ£Œ¥);
  alephAddValue(node_matrix_idx_im, node_matrix_idx_im, -1.0);  
}
 

// ****************************************************************************
// * Consditions de Dirichlet
// ****************************************************************************
own outer faces void dirichletFaces(void)@3.5{
  alephAddValue(edge_matrix_idx_re, edge_matrix_idx_re, +1.0);
  alephAddValue(edge_matrix_idx_im, edge_matrix_idx_im, +1.0);
}
own nodes void dirichletNodes(void)@3.6{
  if (node_is_an_edge==false) continue;
  alephAddValue(node_matrix_idx_re, node_matrix_idx_re, +1.0);
  alephAddValue(node_matrix_idx_im, node_matrix_idx_im, +1.0);
}


// ****************************************************************************
// * Aleph Solve
// ****************************************************************************
void assembleAndSolve(void) @ 4.0 { alephSolve(); }


// ****************************************************************************
// * R√©cup√©ration des r√©sultats
// ****************************************************************************
own cells void getCellResults(void)
  in (cell cell_matrix_idx_re, cell cell_matrix_idx_im)
  out (cell cell_density_re, cell cell_density_im) @4.1{
  cell_density_re=alephRhsGet(cell_matrix_idx_re);
  cell_density_im=alephRhsGet(cell_matrix_idx_im);
  // re 0.0
  cell_density_re_zero=(abs(cell_density_re)<option_epsilon)?1.0:0.0;
  // im 0.0
  cell_density_im_zero=(abs(cell_density_im)<option_epsilon)?1.0:0.0;
  // OR
  cell_density_or_reim_zero=0.;    
  cell_density_or_reim_zero+=(abs(cell_density_re)<option_epsilon)?0.25:0.;
  cell_density_or_reim_zero+=(abs(cell_density_im)<option_epsilon)?0.50:0.;
  // EQ
  cell_density_eq_reim_zero=((abs(cell_density_re)-abs(cell_density_im))<option_epsilon)?0.:1.;
}
own nodes void getNodeResults(void) 
  in (node node_matrix_idx_re, node node_matrix_idx_im)
  out (node node_density_re, node node_density_im)@4.2{
  node_density_re=alephRhsGet(node_matrix_idx_re);
  node_density_im=alephRhsGet(node_matrix_idx_im);
}

own cells void saveCellDensity(void) in (cell cell_density_re,
                                         cell cell_density_im)@4.3{
  cell_density = sqrt(cell_density_re*cell_density_re +
                      cell_density_im*cell_density_im);
}
own nodes void saveNodeDensity(void) in (node node_density_re,
                                         node node_density_im)@4.4{
  node_density = sqrt(node_density_re*node_density_re +
                      node_density_im*node_density_im);
}

void testForQuit(void)@5.0{
  synchronize(cell_density);
  synchronize(cell_density_re);
  synchronize(cell_density_im);
  synchronize(node_density);
  synchronize(node_density_re);
  synchronize(node_density_im);
  if (GlobalIteration >= option_max_iterations) exit;
}
