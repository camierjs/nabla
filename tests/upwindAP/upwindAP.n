with ℝ;
//#include <stdio.h>

// ****************************************************************************
// αβγδεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ
// ∀ ℝℕℤ ²³√½⅓¼⅛
// ****************************************************************************

//FILE *fDot;
//ofstream stream("timing.stream");

// ****************************************************************************
// * Options
// ****************************************************************************
options{
  // Geometrical options
  ℝ xmin = 0.0;
  ℝ xmax = 1.125;
  // Numerical options
  ℝ σ=3.0;
  ℝ ε=2.0;
  ℝ β=1.0;
  ℝ α=0.5;
   // Yet required options for Okina
  ℝ option_δt_initial = 0.0001;
  ℝ option_stoptime = 1.0;
  Integer option_max_iterations = 32768;   // ! utilisé en dur dans les backends
};


// **************************************************************************
// * Cell Variables
// ****************************************************************************
cells{
  ℝ E;
  ℝ F;
  // invariants de Riemann: u=E+F &  v=E-F
  ℝ U, V;
  //ℝ Um1, Vp1;
  // nos variables à l'itération 'n+1'
  ℝ Vⁿ⁺¹, Uⁿ⁺¹;
  ℝ Δ; // cell center
};


// ****************************************************************************
// * Node Variables
// ****************************************************************************
nodes{
  ℝ fluxU, fluxV;
};


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ℝ δx;
};


// ****************************************************************************
// * Analytics Functions
// ****************************************************************************
ℝ analyticE(ℝ t, ℝ x){ return α*exp(x-t); }
ℝ analyticF(ℝ t, ℝ x){ return β*exp(x-t); }
ℝ stability(ℝ t, ℝ x, ℝ e){ return (t/(e*x)+σ*t/(2.0*e²)); }

// ****************************************************************************
// * Initialization Part @ ]-∞,-0.0[
// ****************************************************************************

void iniGlobals(void) @ -5.0{
  δx=(xmax-xmin)/X_EDGE_ELEMS;
  δt=½*(2.0*δx*ε²)/(2.0*ε+δx*σ);
  printf("\n\t\t\33[7m[iniGlobals] δx=%f\33[m", (double)δx);
  printf("\n\t\t\33[7m[iniGlobals] δt=%f\33[m", (double)δt);
  assert(δt>=0.0);
  //fDot=fopen("f.dot","w");
}


// ****************************************************************************
// * Vérification de la CFL
// *  ∆t    σ∆t
// *  --- + --- ≤ 1.0
// * ε∆x    2ε²
// δt <= (2*δx*ε^2)/(2*ε+δx*σ);
// ****************************************************************************
void cflVerif(void) @ -4.5{
  assert(stability(δt,δx,ε)<=1.0);
}



// ****************************************************************************
// * iniCellCenter
// ****************************************************************************
∀ cells void iniCellCenter(void) out (/*node coord,*/ cell Δ) @ -5.0 {
  Δ=0.0;
  ∀ node Δ+=coord;
  Δ*=½;
}

∀ cells void iniCellE(void) in (cell Δ) out (cell E) @ -4.0 {
  E=analyticE(0.0,Δ);
}

∀ cells void iniCellU(void) in (cell Δ) out (cell F) @ -4.0 {
  F=analyticF(0.0,Δ);
}


// ****************************************************************************
// * Compute loop @ ]+0,+∞[
// ****************************************************************************


void dbgLoop(void) @ 1.0 {
  printf("\n\t\t\33[7m[Loop] #%d, time=%f\33[m", GlobalIteration,time);
}


// ****************************************************************************
// * invariants de Riemann u=E+F et v=E-F
// ****************************************************************************
∀ cells void invariantsRiemannU(void) in (cell E, cell F) out (cell U) @ 1.0 {
  U=E+F;
}
∀ cells void invariantsRiemannV(void) in (cell E, cell F) out (cell V) @ 1.0 {
  V=E-F;
}


// ****************************************************************************
// * Compute Flux
// ****************************************************************************
∀ nodes void computeFluxU(void) /*in (cell U,Δ)*/ out (node fluxU) @ 1.5{
  fluxU=0;
  ∀ cell fluxU = (Δ>coord)?U;
  //info()<<" fluxU["<<n<<"]="<<fluxU;
}
∀ nodes void computeFluxV(void) /*in (cell V,Δ)*/ out (node fluxV) @ 1.5{
  fluxV=0;
  ∀ cell fluxV = (Δ<coord)?V;
  //info()<<" fluxV["<<n<<"]="<<fluxV;
}


// ****************************************************************************
// * Advance Computation
// ****************************************************************************
∀ cells void Unp1(void) in (cell U, cell V/*, node fluxV*/) out (cell Uⁿ⁺¹) @ 2.0 {
  ℝ Um1=0;
  ∀ node Um1 = (Δ>coord)?fluxU;
  Uⁿ⁺¹=(1.0-stability(δt,δx,ε))*U+δt/(ε*δx)*Um1+σ*δt/(2.0*ε²)*V;
}

∀ cells void Vnp1(void) in (cell U, cell V) out (cell Vⁿ⁺¹) @ 2.0 {
  ℝ Vp1=0;
  ∀ node Vp1 = (Δ<coord)?fluxV;
  Vⁿ⁺¹=(1.0-stability(δt,δx,ε))*V+δt/(ε*δx)*Vp1+σ*δt/(2.0*ε²)*U;
}


// ****************************************************************************
// * Now come back to E & F variables
// ****************************************************************************
∀ cells  void DumpRiemmanToEF(void) in (cell E, cell F) @ 2.7 {
  E = ½*(Uⁿ⁺¹+Vⁿ⁺¹);
  V = ½*(Uⁿ⁺¹-Vⁿ⁺¹);
  //info()<<" E["<<c<<"]="<<E;
}


// ****************************************************************************
// * Test for Quit & Dump Solution Found
// ****************************************************************************
//∀ cells void dumpSolution(File results) in (cell E, cell F) {
//  results << "\t" << Δ << "\t" << E << "\t" << F << "\n";
//  stream << "\t" << Δ << "\t" << E << "\t" << F << "\n";
//}


void tstForQuit(void) @ 4.0 {
  printf("\n\t[testForQuit] GlobalIteration =%d, time=%f, delta_t=%f",
         GlobalIteration, time,(double)δt);
  if ((time<(option_stoptime-δt))) return;
//  {
//    file(results,plot);
//    printf("\n\t[testForQuit] GlobalIteration>time_steps, \33[7mdumping\33[m\n");
//    //results << "#33 "<<"globalNbCells"<<" "<<"globalNbNodes"<<"\n";
//    dumpSolution(results);
//    }
//  fwrite("done", 4, 1, fDot);
//  fclose(fDot);
  exit;
}

