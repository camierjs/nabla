///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): RAMBAUD Albéric                                           //
//                 BUET Christophe - Christophe.Buet@cea.fr                  //
//                 CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
void rhsInit(void) @ 1.1{
  ℵ rhs reset;
  ℵ lhs reset;
}


∀ cells void iniRhsV(void) in (cell cV,cW,cT) @ 1.21{
  ℝ cValue=cV;
  ℝ cWalue=cW;
  ℝ cTalue=cT;
  ℵ rhs addValue(cV,this,cValue);
  ℵ rhs addValue(cW,this,cWalue);
  ℵ rhs addValue(cT,this,cTalue);
}


∀ /*outer*/ nodes void addRhsBCLeft(void)
  in (node nV) @ 1.22{
  const ℝ nValue=P_condlimi(coord-δx*0.5,n_time) + U_condlimi(coord-δx*0.5,n_time);
  if (n!=0) continue;
  ℵ rhs addValue(nV,this,nValue); // Valeure forcee 
}


∀ /*outer*/ nodes void addRhsBCRight(void)
  in (node nW) @ 1.22{
  const ℝ nWalue=P_condlimi(coord+δx*0.5,n_time) - U_condlimi(coord+δx*0.5,n_time);
  if (n!=(NABLA_NB_NODES-1)) continue;
  ℵ rhs addValue(nW,this,nWalue); // Valeure forcee 
}


// ********************************************************
// * Initialisation ℵ
// ********************************************************
void iniAleph(void) @ 2.0{
  alephInitialize();
}


// ****************************************************************************
// * Fill our matrix
// ****************************************************************************
∀ cells void setMtxA(void) @ 2.1{
  const ℝ e1 = 0.5*tau*δt/(ε² + 2.0*tau*δt);
  const ℝ δtSx = δt/(ε*δx);
  const ℝ M= ε/(2.0*ε + sigma*δx);
  const ℝ value1=(1.0 +e1 + δtSx);
  const ℝ value2=e1-sigma*M*δt/(ε²);
  
  assert(value1>=0.0);
  assert(value2<=0.0);
  
  ℵ matrix setValue(cV,this, cV,this,value1);
  ℵ matrix setValue(cV,this, cW,this,value2);
  ℵ matrix setValue(cV,this, cT,this, -2.0*e1);

  ℵ matrix setValue(cW,this, cV,this, value2);
  ℵ matrix setValue(cW,this, cW,this, value1);
  ℵ matrix setValue(cW,this, cT,this, -2.0*e1);

  ℵ matrix setValue(cT,this, cV,this,-e1);
  ℵ matrix setValue(cT,this, cW,this, -e1);
  ℵ matrix setValue(cT,this, cT,this, 1.0+2.0*e1);
}

// ********************************************************
// * Implémentation des termes en "i-1" et "i+1" ℵ
// ********************************************************
∀ nodes void setMtxNodesV(void) @ 2.2{
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  const ℝ δtSx = δt/(ε*δx);
  const ℝ M= ε/(2.0*ε + sigma*δx);
  ∀ cell{
    if (cell(#)<0) continue; // C'est qu'on accède à une maille inexistante
    // Filtrer ordre croissant
    ℵ matrix setValue(cV, cell(1), cV, cell(0), -2.0*M*δtSx);
  }
}

∀ nodes void setMtxNodesW(void) @ 2.2{
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  const ℝ δtSx = δt/(ε*δx);
  const ℝ M= ε/(2.0*ε + sigma*δx);
  ∀ cell{
    if (cell(#)<0) continue; // C'est qu'on accède à une maille inexistante
    // Filtrer ordre décroissant
    ℵ matrix setValue(cW, cell(0), cW, cell(1),-2.0*M*δtSx);
  }
}


// ********************************************************
// * valeurs aux bords ℵ
// ********************************************************
∀ /*outer*/ nodes void setMtxNodesWBCLeft(void) in (node nV,nW,nT) @ 2.21{
  if (n!=0) continue;
  //ℝ nValue=P_condlimi(coord-δx*0.5,n_time +δt ) + U_condlimi(coord-δx*0.5,n_time+δt);
  const ℝ δtSx = δt/(ε*δx);
  const ℝ M= ε/(2.0*ε + sigma*δx);
  info()<< "[setMtxNodesWBCLeft]";
  ℵ matrix setValue(nV, this, nV, this, 1.0); // 1.0 == diagonale 
  ∀ cell{
    if (cell(#)<0) continue; // C'est qu'on accède à une maille inexistante
    ℵ matrix setValue(cV, cell(#), nV, this,-2.0*M*δtSx);//*nValue );
  }
}

∀ /*outer*/ nodes void setMtxNodesWBCRight(void)
  in (node nV,nW,nT) @ 2.21{
  if (n!=(NABLA_NB_NODES-1)) continue;
  //ℝ nWalue=P_condlimi(coord-δx*0.5,n_time+δt ) - U_condlimi(coord-δx*0.5,n_time+δt);
  const ℝ δtSx = δt/(ε*δx);
  const ℝ M= ε/(2.0*ε + sigma*δx);
  info()<< "[setMtxNodesWBCRight]";
  ℵ matrix setValue(nW, this, nW, this,1.0); // 1.0 == diagonale !
  ∀ cell
      {
        if (cell(#)<0) continue; // C'est qu'on accède à une maille inexistante
        ℵ matrix setValue(cW, cell(#), nW, this,-2.0*M*δtSx);//*nWalue );
      }
}


// ****************************************************************************
// * Aleph Solve
// ****************************************************************************
void assembleAndSolve(void) @ 3.0{
  ℵ solve;
}


// ****************************************************************************
// * Récupération des résultats
// ****************************************************************************
∀ cells void getCellResultsV(void) out (cell cV,cW,cT) @ 3.1{
  cV=ℵ lhs getValue(cV, this);
  cW=ℵ lhs getValue(cW, this);
  cT=ℵ lhs getValue(cT, this);
}

/*cells void printresult(void) out (cell cV,cW,cT) @ 3.15{
  info()<<"[getNodeResults] nV["<<uid<<"]="<<cV << " et=" << cW << ", et=" << cT ;
}*/

∀ nodes void getNodeResultsV(void) out (node nV) @ 3.2{
  if (n!=0) continue;
  nV=ℵ lhs getValue(nV,this);
  
}

∀ nodes void getNodeResultsW(void)
  out (node nW) @ 3.2{
  if (n!=(NABLA_NB_NODES-1)) continue;
  nW=ℵ lhs getValue(nW,this);
}
