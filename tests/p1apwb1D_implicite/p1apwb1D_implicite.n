///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): RAMBAUD Albéric                                           //
//                 BUET Christophe - Christophe.Buet@cea.fr                  //
//                 CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ℝ, ℵ;

// ****************************************************************************
// * αβγδεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ
// * ∀ ℝℕℤℾ √∛ ½⅓¼⅛ 𝜕ℵ∂ * ⋅⨯⤫⊗⨂⊛ ∞ ⁰¹²³ⁱⁿ⁺⁼
// ****************************************************************************

//ofstream output("schema1.plot");
//ofstream outputCv("cv.plot");
ofstream outputCvFinal("outputCvFinal.plot");     
       

// ****************************************************************************v 
// * Options
// ****************************************************************************
options{  
  // Mesh options
  ℝ LENGTH                    = 1.0;
  ℕ X_EDGE_ELEMS              = 8;
  ℕ Y_EDGE_ELEMS              = 1;
  ℕ Z_EDGE_ELEMS              = 1;
  ℝ option_a = 1.0;
  ℝ xmin = 0.0;
  ℝ xmax = 1.0; // A mettre à jour en mleme temps dans le Makefile.nabla.okina 
  ℝ pi =atan(1.0)*4.0;  
  //ℕ time_steps = 0.0005;
  //ℝ final_time = 5.0; 
  ℝ sigma=1.0;   
  // Yet required options for Okina 
  ℝ option_δt_initial = 0.000010;
  ℝ option_stoptime=0.1;//0.2;//10.
  ℕ option_max_iterations = 32768;   // ! utilisé en dur dans les backends
  ℝ N=100;
  ℝ N_i=100;
  ℝ tau =1.0;    
  ℝ ε = 0.001;           
  ℝ CFL =0.5;  
  // Options d'Aleph
  ℝ alephEpsilon             = 1.e-16;
  ℕ alephUnderlyingSolver    = 2;
  ℕ alephMaxIterations       = 2048;
  // DIAGONAL=0, AINV=1, AMG=2, IC=3, POLY=4, ILU=5, ILUp=6,
  // SPAIstat=7, SPAIdyn=8, DDMCriteriaAdaptedSelector=9, NONE=10
  ℕ alephPreconditionerMethod = 2;
  // PCG=0, BiCGStab=1 , BiCGStab2=2, GMRES=3, SAMG=4, QMR=5, SuperLU=6
  ℕ alephSolverMethod     = 3; 
  ℕ alephNumberOfCores    = 0;
  Bool option_aleph_dump_matrix = false;
  Bool option_dump_output= true; 
};


// **************************************************************************
// * Node Variables
// ****************************************************************************
cells{  
  ℝ cU;
  ℝ cP;
  ℝ cp1P;
  ℝ cp1U;  
  ℝ cT; 
  ℝ cp1T;
  ℝ center;
  ℝ cV,cW;
  ℝ cV_ini,cW_ini,cT_ini;
  ℝ cDelta_F_sigma;
  ℝ cDelta_F_sigma_moins;
  ℝ cM;
  ℝ cM_moins;
};  


// ****************************************************************************
// * Cell Variables
// ****************************************************************************
nodes{
  ℝ nU,nV,nW,nT;
};  


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ℝ δx;
  ℝ Integrale;
  ℝ n_time;        
  ℝ iδx;
  ℝ N1;    
  ℝ Intu;    
  ℝ Intt;    
  ℝ Intp;  
  ℕ tstQuit;
};
     
// ****************************************************************************
// * Initialization Part @ ]-∞,-0.0[
// ****************************************************************************
void iniGlobals(void) @ -5.0{
  δx=(xmax-xmin)/X_EDGE_ELEMS;
  δt=0.01;
  iδx=1./δx; 
  printf("\n\t\t\33[7m[iniGlobals] δx=%f\33[m", (double)δx);
  printf("\n\t\t\33[7m[iniGlobals] δt=%f\33[m", (double)δt);
  assert(δt>=0.0);
  tstQuit=0;
}

  
// ****************************************************************************
// * Compute loop @ ]+0,+∞[
// ****************************************************************************
void dbgLoop(void) @ 1.0{
  printf("\n\33[7m[Loop] #%d, time=%f\33[m", iteration,time);
} 

    
void tstForTstQuit(void) @ 4.0 {
  if ((time<(option_stoptime-δt))) return;
  tstQuit=1;
}


∀ cells dumpOutputCvFinal @ 4.0 if (global_tstQuit[0]==1){
  outputCvFinal<<  center << "\t " << 0.5*(cV+cW)<< P_condlimi(center,n_time)<<"\n";
}   

void tstForQuit(void) @ 4.1 {
  n_time+=δt;
  if ((time<(option_stoptime-δt))) return;
  printf("\n");
  exit;
}
