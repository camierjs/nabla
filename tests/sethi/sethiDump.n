// NABLA - a Numerical Analysis Based LAnguage

// Copyright (C) 2014 CEA/DAM/DIF
// Jean-Sylvain CAMIER - Jean-Sylvain.Camier@cea.fr

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// See the LICENSE file for details.


// ****************************************************************************
// * Other tools
// ****************************************************************************

int isX(void){
  return ((((GlobalIteration-1)%4)==0) || ((GlobalIteration-1)%4)==3);
}


void eieio(void){
  synchronize(old_œÅ);
  synchronize(old_u); // Normal momentum
  synchronize(old_v); // Transverse momentum
  synchronize(old_E);
}


// ****************************************************************************
// * Dump old_*
// ****************************************************************************
cells void dump_old_œÅ(void){
  if (lid==0) printf("\n[dump] old_ID");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", old_œÅ);
}
cells void dump_old_u(void){
  if (lid==0) printf("\n[dump] old_IU");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", old_u);
}
cells void dump_old_v(void){
  if (lid==0) printf("\n[dump] old_IV");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", old_v);
}
cells void dump_old_E(void){
  if (lid==0) printf("\n[dump] old_IP");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", old_E);
}
void dump_old_œÅuvE(void){
  dump_old_œÅ();
  dump_old_u();
  dump_old_v();
  dump_old_E();
}


// ****************************************************************************
// * Dump œÅ,u,v,E
// ****************************************************************************
cells void dump_œÅ(void){
  if (lid==0) printf("\n[dump] ID");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", œÅ);
}
cells void dump_info_œÅ(void){
  info()<< "[dump_info_œÅ] #"<<uid<<" œÅ="<<œÅ;
}
cells void dump_u(void){
  if (lid==0) printf("\n[dump] IU");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", u);
}
cells void dump_info_u(void){
  info()<< "[dump_info_œÅ] #"<<uid<<" u="<<u;
}
cells void dump_v(void){
  if (lid==0) printf("\n[dump] IV");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", v);
}
cells void dump_info_v(void){
  info()<< "[dump_info_œÅ] #"<<uid<<" v="<<v;
}
cells void dump_E(void){
  if (lid==0) printf("\n[dump] IP");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", E);
}
cells void dump_info_E(void){
  info()<< "[dump_info_œÅ] #"<<uid<<" E="<<E;
}
void dump_œÅuvE(void){
  dump_œÅ();
  dump_u();
  dump_v();
  dump_E();
}
void dump_info_œÅuvE(void){
  dump_info_œÅ();
  dump_info_u();
  dump_info_v();
  dump_info_E();
}


// ****************************************************************************
// * Dump primitives
// ****************************************************************************
cells void dump_prim_œÅ(void){
  if (lid==0) printf("\n[dump] prim_ID");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", prim_œÅ);
}
cells void dump_prim_u(void){
  if (lid==0) printf("\n[dump] prim_IU");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", prim_u);
}
cells void dump_prim_v(void){
  if (lid==0) printf("\n[dump] prim_IV");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", prim_v);
}
cells void dump_prim_E(void){
  if (lid==0) printf("\n[dump] prim_IP");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", E_internal);
}
cells void dump_prim_p(void){
  if (lid==0) printf("\n[dump] prim_p");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", prim_p);
}
cells void dump_prim_c(void){
  if (lid==0) printf("\n[dump] prim_c");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", prim_c);
}
cells void dump_info_prim_œÅ(void){
  info()<< "[dump_info_prim_œÅ] #"<<uid<<" prim_œÅ="<<prim_œÅ;
}
cells void dump_info_prim_u(void){
  info()<< "[dump_info_prim_u] #"<<uid<<" prim_u="<<prim_u;
}
cells void dump_info_prim_v(void){
  info()<< "[dump_info_prim_v] #"<<uid<<" prim_v="<<prim_v;
}
cells void dump_info_prim_E(void){
  info()<< "[dump_info_prim_E] #"<<uid<<" prim_E="<<E_internal;
}
cells void dump_info_prim_p(void){
  info()<< "[dump_info_prim_p] #"<<uid<<" prim_p="<<prim_p;
}
cells void dump_info_prim_c(void){
  info()<< "[dump_info_prim_c] #"<<uid<<" prim_c="<<prim_c;
}
void dump_info_prim_œÅuvEpc(void){
  dump_info_prim_œÅ();
  dump_info_prim_u();
  dump_info_prim_v();
  dump_info_prim_E();
  dump_info_prim_p();
  dump_info_prim_c();
}


// ****************************************************************************
// * Dump slopes
// ****************************************************************************
cells void dump_dœÅ(void){
  if (lid==0) printf("\n[dump] slope_œÅ");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", slope_œÅ);
}
cells void dump_du(void){
  if (lid==0) printf("\n[dump] slope_u");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", slope_u);
}
cells void dump_dv(void){
  if (lid==0) printf("\n[dump] slope_v");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", slope_v);
}
cells void dump_dp(void){
  if (lid==0) printf("\n[dump] slope_p");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", slope_p);
}
void dump_slopes(void){
  dump_dœÅ();
  dump_du();
  dump_dv();
  dump_dp();
}



// ****************************************************************************
// * Dump flux
// ****************************************************************************
cells void dump_flux_œÅ_left(void){
  if (lid==0) printf("\n[dump] flux_œÅ_left");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_œÅ_left);
}
cells void dump_flux_u_left(void){
  if (lid==0) printf("\n[dump] flux_u_left");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_u_left);
}
cells void dump_flux_v_left(void){
  if (lid==0) printf("\n[dump] flux_v_left");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_v_left);
}
cells void dump_flux_p_left(void){
  if (lid==0) printf("\n[dump] flux_p_left");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_p_left);
}

cells void dump_flux_œÅ_right(void){
  if (lid==0) printf("\n[dump] flux_œÅ_right");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_œÅ_right);
}
cells void dump_flux_u_right(void){
  if (lid==0) printf("\n[dump] flux_u_right");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_u_right);
}
cells void dump_flux_v_right(void){
  if (lid==0) printf("\n[dump] flux_v_right");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_v_right);
}
cells void dump_flux_p_right(void){
  if (lid==0) printf("\n[dump] flux_p_right");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_p_right);
}
void dump_flux(void){
  dump_flux_œÅ_left();
  dump_flux_u_left();
  dump_flux_v_left();
  dump_flux_p_left();
  
  dump_flux_œÅ_right();
  dump_flux_u_right();
  dump_flux_v_right();
  dump_flux_p_right();
}


// ****************************************************************************
// * Dump left/right flux
// ****************************************************************************
cells void dump_qflux_œÅ_left(void){
  if (lid==0) printf("\n[dump] [33mq_œÅ_left[m");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", q_œÅ_left);
}
cells void dump_qflux_u_left(void){
  if (lid==0) printf("\n[dump] [33mq_u_left[m");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", q_u_left);
}
cells void dump_qflux_v_left(void){
  if (lid==0) printf("\n[dump] [33mq_v_left[m");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", q_v_left);
}
cells void dump_qflux_p_left(void){
  if (lid==0) printf("\n[dump] [33mq_p_left[m");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", q_p_left);
}
cells void dump_qflux_œÅ_right(void){
  if (lid==0) printf("\n\n[dump] [36mq_œÅ_right[m");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", q_œÅ_right);
}
cells void dump_qflux_u_right(void){
  if (lid==0) printf("\n[dump] [36mq_u_right[m");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", q_u_right);
}
cells void dump_qflux_v_right(void){
  if (lid==0) printf("\n[dump] [36mq_v_right[m");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", q_v_right);
}
cells void dump_qflux_p_right(void){
  if (lid==0) printf("\n[dump] [36mq_p_right[m");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", q_p_right);
}
void dump_qleftright(void){
  dump_qflux_œÅ_left();
  dump_qflux_u_left();
  dump_qflux_v_left();
  dump_qflux_p_left();
  dump_qflux_œÅ_right();
  dump_qflux_u_right();
  dump_qflux_v_right();
  dump_qflux_p_right();
}


// ****************************************************************************
// * Dump Riemann solutions
// ****************************************************************************
cells void dump_gdnv_œÅ(void){
  if (lid==0) printf("\n[dump] gdnv_œÅ");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", gdnv_œÅ);
}
cells void dump_gdnv_u(void){
  if (lid==0) printf("\n[dump] gdnv_u");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", gdnv_u);
}
cells void dump_gdnv_v(void){
  if (lid==0) printf("\n[dump] gdnv_v");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", gdnv_v);
}
cells void dump_gdnv_p(void){
  if (lid==0) printf("\n[dump] gdnv_p");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", gdnv_p);
}
void dump_riemann(void){
  dump_gdnv_œÅ();
  dump_gdnv_u();
  dump_gdnv_v();
  dump_gdnv_p();
}


// ****************************************************************************
// * Dump computed fluxes from solution
// ****************************************************************************
cells void dump_flux_œÅ(void){
  if (lid==0) printf("\n[dump] flux_œÅ");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_œÅ);
}
cells void dump_flux_u(void){
  if (lid==0) printf("\n[dump] flux_u");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_u);
}
cells void dump_flux_v(void){
  if (lid==0) printf("\n[dump] flux_v");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_v);
}
cells void dump_flux_E(void){ 
  if (lid==0) printf("\n[dump] flux_E");
  if ((lid%4)==0) printf("\n\t");
  printf("%12.12f ", flux_E);
}
void dump_cmpflx(void){
  dump_flux_œÅ();
  dump_flux_u();
  dump_flux_v();
  dump_flux_E();
}
