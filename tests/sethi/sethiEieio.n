///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
void eieio_init(void) @ -9.0 {
  eieio();
  //dump_info_œÅuvE();
}


void eieio_init_dt(void) @ -4.1 {eieio();}


//void infoXY(void)@ 0.01{
//  if (isX()) info()<<"[36m[XYZ] is MD_DirX[m";
//  else info()<<"[36m[XYZ] is MD_DirY[m";
//}


void eieio_gather(void) @ 0.6 {
  eieio();
  //dump_info_œÅuvE();
}


void eieio_eos(void) @ 3.1 {
  eieio();
  //dump_info_prim_œÅuvEpc();
}

void eieio_slope(void) @ 4.1 {
  eieio();
  //dump_slopes();
}

void eieio_flux(void) @ 5.01 {
  eieio();
  //dump_flux();
}


void eieio_qleftright(void) @ 5.6 {
  eieio();
  //dump_qleftright();
}

void eieio_riemann(void) @ 6.01 {
  eieio();
  //dump_riemann();
}
void eieio_cmpflx(void) @ 7.01 {
  eieio();
  //dump_cmpflx();
}

/*
cells void updateXYZ(xyz direction) {
  Real dtSdx=Œ¥t/dx;
  if (!this->isOwn()) continue;
  if (prevCell.null()){ // Fronti√®re prev
    //info()<<"[update] no-prev cell #"<<lid;
    //printf("*I-sethi      [update] v=%12.12f, old_v=%12.12f, flux_v=%12.12f, dtSdx=%12.12f", v,old_v,flux_v,dtSdx);
    #warning Should find v=0.315214452951 depuis un qleft √† 0.011443611907
    old_œÅ = œÅ + (flux_œÅ - flux_œÅ[nextCell]) * dtSdx;
    if (isX()){
      old_u = u + (flux_u - flux_u[nextCell]) * dtSdx;
      old_v = v + (flux_v - flux_v[nextCell]) * dtSdx;
    }else{
      old_v = u + (flux_u - flux_u[nextCell]) * dtSdx;
      old_u = v + (flux_v - flux_v[nextCell]) * dtSdx;
    }
    old_E = E + (flux_E - flux_E[nextCell]) * dtSdx;
    //printf(", vnew_=%12.12f, flux_v[nextCell]=%12.12f\n", old_v, flux_v[nextCell]);
    continue;
  }
  #warning updateXYZ for nextCell
// On a besoin de mailles fictives pour les conditions en 'next'
  if (nextCell.null()){ // Fronti√®re next
    //if (isX())
    //info()<<"[update] X no-next cell #"<<lid;
    //else
    // info()<<"[update] Y no-next cell #"<<lid;
    //info()<<"[update] dtSdx="<<dtSdx;
    //printf("*I-sethi      [update] u=%12.12f, old_u=%12.12f, flux_u=%12.12f, flux_u[prevCell]=%12.12f", u, old_u, flux_u, flux_u[prevCell]);
    //printf("\n*I-sethi      [update] v=%12.12f, old_v=%12.12f, flux_v=%12.12f, flux_v[prevCell]=%12.12f", v, old_v,flux_v, flux_v[prevCell]);
    old_œÅ = œÅ + (flux_œÅ) * dtSdx;
    if (isX()){
      old_u = u + (flux_u - 0.000004) * dtSdx;//0.000004 
      old_v = v + (flux_v) * dtSdx;
    }else{
      old_v = u + (flux_u - 0.000004) * dtSdx;//0.000004
      old_u = v + (flux_v) * dtSdx;
    }
    old_E = E + (flux_E) * dtSdx;
    //printf(", unew=%12.12f", old_u);
    //printf(", vnew=%12.12f\n", old_v);
    continue;
  }
  //info()<<"[update] std cell #"<<lid;
  //printf("*I-sethi      [update] v=%12.12f, old_v=%12.12f, flux_v=%12.12f, dtSdx=%12.12f", v,old_v,flux_v,dtSdx);
  old_œÅ = œÅ + (flux_œÅ-flux_œÅ[nextCell]) * dtSdx;
  if (isX()){
    old_u = u + (flux_u-flux_u[nextCell]) * dtSdx;
    old_v = v + (flux_v-flux_v[nextCell]) * dtSdx;
  }else{
    old_v = u + (flux_u-flux_u[nextCell]) * dtSdx;
    old_u = v + (flux_v-flux_v[nextCell]) * dtSdx;
  }
  old_E = E + (flux_E-flux_E[nextCell]) * dtSdx;
  //printf(", vnew_=%12.12f, flux_v[nextCell]=%12.12f\n", old_v, flux_v[nextCell]);
}
*/
void eieio_update(void) @ 8.01 {
  eieio();
}
