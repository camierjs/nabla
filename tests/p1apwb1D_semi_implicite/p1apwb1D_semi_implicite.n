///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): RAMBAUD Alb√©ric                                           //
//                 BUET Christophe - Christophe.Buet@cea.fr                  //
//                 CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñù;
#include "math.h"  

// ****************************************************************************
// * Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÇœÉœÑœÖœÜœáœàœâŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©
// * ‚àÄ ‚Ñù‚Ñï‚Ñ§‚Ñæ ‚àö‚àõ ¬Ω‚Öì¬º‚Öõ ùúï‚Ñµ‚àÇ * ‚ãÖ‚®Ø‚§´‚äó‚®Ç‚äõ ‚àû ‚Å∞¬π¬≤¬≥‚Å±‚Åø‚Å∫‚Åº
// ****************************************************************************

ofstream output("schema1.plot");  

  
// ****************************************************************************
// * Options  
// ****************************************************************************
options{
  ‚Ñù option_a = 1.0;
  ‚Ñù xmin = 0.0;
  ‚Ñù xmax = 1.0; // A mettre √† jour en mleme temps dans le Makefile.nabla.okina
  ‚Ñù pi =atan(1.0)*4.0;
  ‚Ñù N=1000;  
  ‚Ñù I= 40;
  ‚Ñï time_steps = 0.0005;       
  ‚Ñù final_time = 5.0;
  ‚Ñù sigma=1.0;  
  // Yet required options for Okina 
  ‚Ñù option_Œ¥t_initial = 0.00010;
  ‚Ñù option_stoptime= 0.01;     
  ‚Ñù tau =1.0;           
  ‚Ñù epsilon =0.01;         
  ‚Ñù CFL= 0.75;  
  Bool option_dump_output = false;          
};

  
// **************************************************************************
// * Node Variables
// ****************************************************************************
cells{  
  ‚Ñù cU;
  ‚Ñù cP;
  ‚Ñù cPi;
  ‚Ñù cp1P;
  ‚Ñù cp1U;    
  ‚Ñù center;
  ‚Ñù cM;
  ‚Ñù cp1Tm;
  ‚Ñù cTm ;
};


// ****************************************************************************
// * Cell Variables
// ****************************************************************************
nodes{
  ‚Ñù nU;  
  ‚Ñù nP;
  ‚Ñù nM;
  ‚Ñù nM_plus;
  ‚Ñù nM_moins;
};


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ‚Ñù Œ¥x;
  ‚Ñù Integrale;
  ‚Ñù n_time;
  ‚Ñù iŒ¥x;
  ‚Ñù L2;
  ‚Ñù N1;
  ‚Ñù N2;
  ‚Ñù Intu;  
  ‚Ñù Intt;  
  ‚Ñù Intp;  
};


// ****************************************************************************
// * Initialization Part @ ]-‚àû,-0.0[
// ****************************************************************************

void iniGlobals(void) @ -5.0{
  Œ¥x=(xmax-xmin)/X_EDGE_ELEMS;
  Œ¥t=CFL*epsilon¬≤*Œ¥x;
  iŒ¥x=1./Œ¥x;
  printf("\n\t\t\33[7m[iniGlobals] Œ¥x=%f\33[m", (double)Œ¥x);
  printf("\n\t\t\33[7m[iniGlobals] Œ¥t=%f\33[m", (double)Œ¥t);
  assert(Œ¥t>=0.0);
}


// ****************************************************************************
// * Compute loop @ ]+0,+‚àû[
// ****************************************************************************
void dbgLoop(void) @ 1.0{
  // printf("\n\33[7m[Loop] #%d, time=%f\33[m", GlobalIteration,time);
}


// ********************************************************
// cU partout
// ********************************************************
‚àÄ cells void loop1(void)
  in (cell cU, cell cp1U,  cell cM /*, node nP, node nU*/)  @ 2.6{
  const ‚Ñù Œ¥tSx = Œ¥t/(epsilon*Œ¥x);
  cp1U = cU;
  ‚àÄ node{    
    if (coord<center)
      cp1U += - (1.0/epsilon)*Œ¥tSx*cM*nU + Œ¥tSx*(nP+ (1.0/epsilon)*nM*nU);        
    else
      cp1U +=  (1.0/epsilon)*Œ¥tSx*cM*nU-Œ¥tSx*(nP + (1.0/epsilon)*nM*nU);
  }
}


// ********************************************************
// cP  partout
// ********************************************************
‚àÄ cells void loop2(void)
  in (cell cU, cell cP, cell cM) @ 2.61{
  const ‚Ñù Œ¥tSx = Œ¥t/(epsilon*Œ¥x); 
  cPi= cP; 
  ‚àÄ node{
    if (center<coord)
      cPi += -nU*Œ¥tSx;
    else
      cPi += nU*Œ¥tSx ;
  }
}


// ********************************************************
// cTr  partout
//********************************************************
‚àÄ cells void loop4(void) in (cell cTm) @ 2.5 {
  ‚Ñù x= min(pow(cPi,0.25),cTm); 
  ‚Ñù y= max(pow(cPi,0.25),cTm);
  cp1Tm =fct_dicotomie(x,y,cP,cTm);
}


‚àÄ cells void loop5(void) in (cell cp1P) @ 2.7{
  const ‚Ñù e1=tau*Œ¥t/(epsilon¬≤);
  const ‚Ñù e2=1.0/(e1+1.0);
  cp1P = cPi + e1*pow(cp1Tm,4);
  cp1P *= e2;
}


// Copy results
‚àÄ cells  void copyResults(void)
  in (cell cU, cell cP, cell cTm ) @ 2.7{
  cU = cp1U;
  cP = cp1P;
  cTm= cp1Tm;
}


// ****************************************************************************
// * Test for Quit & Dump Solution Found
// ****************************************************************************
‚àÄ cells void dumpSolution(File results)
  in (cell cU, cell cP, cell cM){
  results  << "\t" << center
           << "\t" << P_condlimi(center,option_stoptime)
           << "\t" << cP
           << "\t" << pow(cTm,4)
           << "\n";
}

‚àÄ cells void dumpOutput(void)
  in (cell cU, cell cP, cell cM){
  if  (center!=0.005) continue;
  output << n_time
    //<< "\t" << cU
         << "\t" << cP
         << "\t" << cP - pow(cTm,4)
         << "\n";
}  

void tstForQuit(void) @ 4.0 {
  //printf("\n\t[testForQuit] GlobalIteration =%d, time=%f, delta_t=%f",
  //    GlobalIteration, time,(double)Œ¥t);
  if (option_dump_output){
    dumpOutput();
    output << "\n";
  }
  // file(resultsvstime ,plot);
  // dumpVsTimeSolution(resultsvstime);
  if ((time<(option_stoptime-Œ¥t))) return;  
  if (option_dump_output){
    file(results,plot);
    //printf("\n\t[testForQuit] GlobalIteration>time_steps, \33[7mdumping\33[m\n");
    //results << "#33 "<<"globalNbCells"<<" "<<"globalNbNodes"<<"\n";
    dumpSolution(results);
  }else printf("\n");
  exit;
}


