///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): RAMBAUD Albéric                                           //
//                 BUET Christophe - Christophe.Buet@cea.fr                  //
//                 CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

∀ nodes void flushNodeB(void)@ 1.0{
  nP=nU=0.0;
}


// ********************************************************
// nU à l'intérieur
// ********************************************************
∀ nodes void computeNodB1(void) 
  out (node nU) @ 2.0{
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  ℝ  r=2*epsilon;
  nU=0.0;
  ∀ cell{
    // maille de droite, on ajoute l'invariant de Rieman pour la vp 1
    if (center>coord){
      r+=cM;
      nU+= cU -cP;            
      // maille de gauche, on ajoute l'invariant de Rieman pour la vp 1
    }else{
      r-=cM;
      nU += cU + cP ;            
    }
  }
  r=epsilon/r;
  nU*=r; 
}


// ********************************************************
// nP à  l'intérieur
// ********************************************************
∀ nodes void computeNodB2(void)
  out (node nP) @ 2.1{
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  ℝ  r=2*epsilon;
  nP=0.0;
  ∀ cell{
    if (center>coord){
      nP+=(cP-cU)*(epsilon +nM-nM_moins);
      r+=cM;            
    }else{
      nP+=(cP+cU)*(epsilon +nM_plus-nM);
      r+=-cM;
    }
  }
  nP*=1.0/r;  
}
    

// ********************************************************
// nT en "i-1"
// ********************************************************
∀ nodes void computeNodT_g(void)
  out (node nP) @ 2.1{
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  nT_g=0.0;
  ∀ cell{
    if (center<coord)
      nT_g+=cT;
    else
      nT_g+=0;
  }
}

   
// ********************************************************
// nT en "i+1"
// ********************************************************
∀ nodes void computeNodt_d(void)
  out (node nP) @ 2.1{
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  nT_d=0.0;
  ∀ cell{
    if (center>coord)
      nT_d+=cT;
    else
      nT_d+=0;
  }
}


// ********************************************************
// nU et nP au bord droit
// ********************************************************
∀ nodes void outer0Loop1(void) 
  in (node nU, node nP/*, node nP, node nU*/)
  out (node nU,node nP)@ 2.4{
  if (n!=0) continue;
  nU=0.0;
  nP=0.0;
  nT_g=0.0;
  ℝ r=2*epsilon;
  ∀ cell{
    if (c==0) continue;
    nU+=(cU - cP);
    nP+=(-cU+cP)*(epsilon + nM-nM_moins) ;
    nT_g+=0.0;
    r+=cM;
  }
  // nU et nP à la "maille fantôme" gauche
  nU+=(U_condlimi(coord-δx*0.5,n_time) + P_condlimi(coord-δx*0.5,n_time));
  nP+= (U_condlimi(coord-δx*0.5,n_time) + P_condlimi(coord-δx*0.5,n_time))*(epsilon + nM_plus -nM);
  nT_g+= T_condini(coord-δx*0.5,n_time);
  r+=-nM_moins;
  nP*=1.0/r;
  nU*=epsilon/r;
}


// ********************************************************
// nP et nU au bord droit
// ********************************************************
∀ nodes void outer0Loop2(void)
  in (node nU, node nP/*, node nP, node nU*/)
  out (node nU, node nP)@ 2.45{
  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  if (n!=(NABLA_NB_NODES-1)) continue;
  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  nU=0.0;
  nP=0.0;
  nT_d=0.0;
  ℝ r=2*epsilon;
  ∀ cell{
    if (c==0) continue;
    nU+= (cU + cP);
    nP+= (cU + cP)*(epsilon + nM_plus-nM);
    r+= nM_plus -cM;
  }
  // nP et nU à la "maille fantôme" gauche
  nU+=((U_condlimi(coord+δx*0.5,n_time) -P_condlimi(coord+δx*0.5,n_time)));
  nU*=epsilon/r;
  nP+= (-U_condlimi(coord+δx*0.5,n_time)  + P_condlimi(coord+δx*0.5,n_time))*(epsilon +nM-nM_moins);
  nT_d+=T_condini(coord+δx*0.5,n_time);
  nP*=1.0/r;
  n_time+=δt;
}
