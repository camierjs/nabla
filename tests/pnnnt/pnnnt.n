///////////////////////////////////////////////////////////////////////////////
// This NABLA port is an implementation of the PENNANT Mini-App              //
// from Charles R. Ferenbaugh (cferenba@lanl.gov), LANL                      //
// ∇ contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr        //
///////////////////////////////////////////////////////////////////////////////
// PENNANT is an unstructured mesh physics mini-app designed for advanced    //
// architecture research. It contains mesh data structures and a few physics //
// algorithms adapted from the LANL rad-hydro code FLAG, and gives a sample  //
// of the typical memory access patterns of FLAG.                            //
///////////////////////////////////////////////////////////////////////////////
// Copyright 2012, Los Alamos National Security, LLC. All rights reserved.   //
// This software was produced under US Government contract DE-AC52-06NA25396 //
// for Los Alamos National Laboratory, which is operated by Los Alamos       //
// National Security, LLC for the U.S. Department of Energy.                 //
// The US Government has rights to use, reproduce and distribute this        //
// software.                                                                 //
// NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY    //
// WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF     //
// THIS SOFTWARE.                                                            //
// If this software is modified to produce derivative works, such modified   //
// software should be clearly marked, so as not to confuse it with the       //
// version available from LANL.                                              //
// Additionally, redistribution and use in source and binary forms, with or  //
// without modification, are permitted provided that the following           //
// conditions are met:                                                       //
//  1. Redistributions of source code must retain the above copyright notice,//
//     this list of conditions and the following disclaimer.                 //
//  2. Redistributions in binary form must reproduce the above copyright     //
//     notice, this list of conditions and the following disclaimer in the   //
//     documentation and/or other materials provided with the distribution.  //
//  3. Neither the name of Los Alamos National Security, LLC, Los Alamos     //
//     National Laboratory, LANL, the U.S. Government, nor the names of its  //
//     contributors may be used to endorse or promote products derived from  //
//     this software without specific prior written permission.              //
///////////////////////////////////////////////////////////////////////////////
// THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND        //
// CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,    //
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS //
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                                  //
// IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS BE    //
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR       //
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF      //
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  //
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN   //
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)   //
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF    //
// THE POSSIBILITY OF SUCH DAMAGE.                                           //
///////////////////////////////////////////////////////////////////////////////
// End cycle 48, time = 1.00000000000000e+00, dt = 7.22554862846492e-03
with ℝ²;

// ****************************************************************************
// Default options should match test/sedovsmall/sedovsmall.pnt
// cstop=100, tstop=1.0, meshtype=rect, meshparams=3 3 1.125 1.125
// subregion=0.0 0.3 0.0 0.3, rinitsub=1.0, einitsub=40.222, bcx=0.0 1.125
// bcy=0.0 1.125, ssmin=0.1, q1=0.1, q2=1.0, dtinit=0.0025
// ****************************************************************************
options{
  // Mesh options
  ℝ LENGTH       = 1.125;
  ℕ X_EDGE_ELEMS = 3;
  ℕ Y_EDGE_ELEMS = 3;
  ℕ Z_EDGE_ELEMS = 1;
  ℕ option_max_iterations = 0;// ! utilisé en dur dans le backend lambda !
  ℝ option_δt_initial = 1e-7; // ! utilisé en dur dans le backend lambda !
  ℝ option_stoptime = 1.0;    // ! utilisé en dur dans le backend lambda !
  // Pennant options
  ℾ trace       = false;
  ℕ cstop       = 64;     // simulation stop cycle
  ℝ tstop       = 1.0;    // simulation stop time
  ℝ dtmax       = 1.e99;  // maximum timestep size
  ℝ dtinit      = 0.0025; // initial timestep size
  ℝ dtfac       = 1.2;    // factor limiting timestep growth
  ℕ dtreport    = 10;     // frequency for timestep reports
  ℝ cfl         = 0.6;    // Courant number, limits timestep
  ℝ cflv        = 0.1;    // volume change limit for timestep
  ℝ rinit       = 1.0;    // initial density for main mesh
  ℝ einit       = 0.0;    // initial energy for main mesh
  ℾ subregion   = true;
  ℝ sbxmin      = 0.0;
  ℝ sbxmax      = 0.3;
  ℝ sbymin      = 0.0;
  ℝ sbymax      = 0.3;
  ℝ rinitsub    = 1.0;    // initial density in subregion
  ℝ einitsub    = 40.222; // initial energy in subregion
  ℝ uinitradial = 0.0;    // initial velocity in radial direction
  ℝ γ           = 1.6666666666666667;//5./3.;  // coeff. for ideal gas equation
  ℝ ssmin       = 0.1;    // minimum sound speed for gas
  ℝ alpha       = 0.5;    // alpha coefficient for TTS model
  ℝ q1          = 0.1;    // linear coefficients for Q model
  ℝ q2          = 1.0;    // quadratic coefficients for Q model
  ℝ ε           = 1.e-12;
  ℝ ι           = 1.e-99;
};


// ****************************************************************************
// * Zone/Sides/Corners Variables
// ****************************************************************************
cells{
  ℝ² zx;    // zone center coordinates
  ℝ² zxp;   // zone ctr coords, middle of cycle
  ℝ zarea;  // zone area
  ℝ zvol;   // zone volume
  ℝ zareap; // zone area, middle of cycle
  ℝ zvolp;  // zone volume, middle of cycle
  ℝ zvol0;  // zone volume, start of cycle
  ℝ zdl;    // zone characteristic length
  ℝ zm;     // zone mass
  ℝ zr;     // zone density
  ℝ zrp;    // zone density, middle of cycle
  ℝ ze;     // zone specific internal energy (energy per unit mass)
  ℝ zetot;  // zone total internal energy
  ℝ zw;     // zone work done in cycle
  ℝ zwrate; // zone work rate
  ℝ zp;     // zone pressure
  ℝ zss;    // zone sound speed
  ℝ zdu;    // zone velocity difference
  ℝ z0per;  // zone tmp variable in PolyGas calcStateAtHalf
  ℝ² z0uc;  // zone tmp centered velocity
  // Sides
  ℝ sarea[faces];  // area
  ℝ svol[faces];   // volume
  ℝ sareap[faces]; // area, middle of cycle
  ℝ svolp[faces];  // volume, middle of cycle
  ℝ² ssurfp[faces];// surface vector
  ℝ smf[faces];    // mass fraction
  ℝ² sfp[faces];   // force from pressure
  ℝ² sfq[faces];   // force from artificial visc.
  ℝ² sft[faces];   // force from tts
  // Corners
  ℝ² cftot[nodes]; // force, total from all sources
  ℝ cmaswt[nodes]; // contribution to pmaswt
  ℝ carea[nodes]; // tmp
  ℝ cevol[nodes]; // tmp
  ℝ cdu[nodes];   // tmp
  ℝ cdiv[nodes];  // tmp
  ℝ ccos[nodes];  // tmp
  ℝ² cqe0[nodes]; // tmp
  ℝ² cqe1[nodes]; // tmp
  ℝ cw[nodes];    // tmp
  ℝ crmu[nodes];  // tmp
  // Utilisé par legion
  ℕ znump;
};

// ****************************************************************************
// * Point Variables
// ****************************************************************************
nodes{
  ℝ² px,px0,pxp; // point coordinates, start & middle of cycle
  ℝ² pu,pu0;     // point velocity
  ℝ² pap,pf;     // point acceleration, force
  ℝ pmaswt;      // point mass, weighted by 1/r
  ℾ has_bcx;     // Utilisé par legion
  ℾ has_bcy;     // Utilisé par legion
};

// ****************************************************************************
// * Edge Variables
// ****************************************************************************
faces{
  ℝ² ex,exp; // edge center coordinates & middle of cycle
  ℝ elen;    // edge length
};

// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ℕ cycle;  // simulation cycle number
  ℝ dt;     // current timestep
  ℝ dtrec;  // maximum timestep for hydro
  ℝ dvovmax;//
};

// ****************************************************************************
// * Initialization ]-∞,-0.0[
// ****************************************************************************

∀ nodes iniMeshPx @ -33 { px = coord; }

∀ cells iniMeshZx @ -32 { zx=0; ∀ nodes zx+=px; zx/=#nodes; }
∀ faces iniMeshEx @ -32 { ex=0; ∀ nodes ex+=px; ex/=#nodes; }

∀ cells iniMeshCalcVols @ -31.8 {
  zvol=0;
  zarea=0; 
  ∀ nodes{
    sarea = ½ * cross2D(px[#+1]-px,zx-px);
    svol = ⅓* sarea * (px.x+px[#+1].x+zx.x);
    zarea += sarea;
    zvol  += svol;
  }
}

∀ cells iniMeshCalcSideFracs @ -31.7 { ∀ faces smf = sarea/zarea; }

iniGlobals @ -20.0 { time=0; cycle=0; }

∀ cells iniZr @ -14.9 { zr=rinit; }
∀ cells iniZe @ -14.9 { ze=einit; }
∀ cells iniZwrate @ -14.9 { zwrate=0; }

∀ cells iniSubRegion @ -14.8 if (subregion) {
  if (!(zx.x > (sbxmin-ε) && zx.x < (sbxmax+ε) &&
        zx.y > (sbymin-ε) && zx.y < (sbymax+ε))) continue;
  zr = rinitsub;
  ze = einitsub;
}

∀ cells iniZm @ -14.7 { zm=zr*zvol; }
∀ cells iniZetot @ -14.6 { zetot=ze*zm; }

// Legion not vs != for the if statement
//∀ nodes niPuRadial @ -14.5 if (uinitradial != 0.0) {
//  const ℝ pmag = length(px);
//  pu=(pmag>ε)?uinitradial*px/pmag:0;
//}
∀ nodes iniPuStd @ -14.5 if (uinitradial==0.0) { pu=0.0; }

iniRstDtHydro @ -14.4 { dtrec = +∞; }


// ****************************************************************************
// * Compute loop ⊂ ]+0.0,+∞[ 
// ****************************************************************************

incCycle @ 1.0 { cycle += 1; }

calcGlobalDt @ 2.0 {
  const ℝ dtlast = dt;
  dt = dtmax;
  if (cycle == 1) {
    dt=(dtinit<dt)?dtinit;
  } else {
    const ℝ dtrecover = dtfac * dtlast;
    if (dtrecover<dt) dt = dtrecover;
  }
  dt=((tstop-time)<dt)?tstop-time;
  dt=(dtrec<dt)?dtrec;
}


∀ nodes savePx @ 3.0 { px0=px; }
∀ nodes savePu @ 3.0 { pu0=pu; }
∀ cells saveZvol @ 3.0 { zvol0=zvol; }

∀ nodes advPosHalf0 @ 3.1 { pxp = px0+½*pu0*dt; }

∀ cells calcZxp @ 3.2 { zxp=0; ∀ nodes zxp+=pxp; zxp/=#nodes; }
∀ faces calcExp @ 3.2 { exp=0; ∀ nodes exp+=pxp; exp/=#nodes; }

∀ cells calcVols @ 3.4 {
  zareap=0; 
  zvolp=0;
  ∀ nodes {
    sareap = ½*cross2D(pxp[#+1]-pxp,zxp-pxp);
    svolp = ⅓*sareap*(pxp.x+pxp[#+1].x+zxp.x);
    zareap+=sareap;
    zvolp +=svolp;
  } 
}

∀ cells calcSurfVecs @ 3.5 { ∀ faces ssurfp = rotateCCW(exp-zxp); }
∀ faces calcEdgeLen @ 3.5 { elen = length(pxp[1]-pxp[0]); }

∀ cells calcCharLen @ 3.6 { zdl = 1.e99; ∀ faces zdl=fmin(zdl,4.0*sareap/elen); }

∀ cells calcZrp @ 4.0 { zrp = zm/zvolp; }

∀ cells calcCrnrMass @ 4.1 { ∀ nodes cmaswt = ½*zrp*zareap*(smf+smf[#-1]); }

∀ cells calcEOS1 @ 5.0 {
  const ℝ γm1 = γ - 1.0;
  const ℝ ss2 = fmax(ssmin*ssmin,1.e-99);
  const ℝ rx = zr;
  const ℝ local_ex = fmax(ze,0.0);
  const ℝ local_px = γm1*rx*local_ex;
  const ℝ prex = γm1*local_ex;
  const ℝ perx = γm1*rx;
  const ℝ csqd = fmax(ss2, prex+perx*local_px/(rx*rx));
  zp =local_px;
  z0per = perx;
  zss = √(csqd);
}

∀ cells calcEOS2 @ 5.1 {
  const ℝ dth = ½ * dt;
  const ℝ zminv = 1.0 / zm;
  const ℝ dv = (zvolp - zvol0) * zminv;
  const ℝ bulk = zr * zss * zss;
  const ℝ denom = 1.0 + ½ * z0per * dv;
  const ℝ src = zwrate * dth * zminv;
  zp += (z0per * src - zr * bulk * dv) / denom;
}

∀ cells pgasCalcForce @ 6.0 { ∀ faces sfp=-zp * ssurfp; }

∀ cells ttsCalcForce @ 6.1 {
  ∀ faces {
    const ℝ svfacinv = zareap / sareap;
    const ℝ srho = zrp * smf * svfacinv;
    ℝ sstmp = fmax(zss, ssmin);
    sstmp = alpha * sstmp * sstmp;
    const ℝ sdp = sstmp * (srho - zrp);
    const ℝ³ sqq = -sdp * ssurfp;
    sft = sqq;
  }
}

∀ cells qcsZuc @ 6.2 { z0uc=0; ∀ nodes z0uc += pu; z0uc/=#nodes; }

∀ cells qcsCornerDiv @ 6.3 {
  ∀ nodes {
    const ℝ³ up0 = pu;
    const ℝ³ xp0 = pxp;
    const ℝ³ up1 = ½ * (pu + pu[#+1]);
    const ℝ³ xp1 = exp;
    const ℝ³ up2 = z0uc;
    const ℝ³ xp2 = zxp;
    const ℝ³ up3 = ½ * (pu[#-1] + pu);
    const ℝ³ xp3 = exp[#-1];
    const ℝ cvolume = ½ * cross2D(xp2-xp0, xp3-xp1);
    carea = cvolume;
    const ℝ³ v1 = xp3-xp0;
    const ℝ³ v2 = xp1-xp0;
    const ℝ de1 = elen[#-1];
    const ℝ de2 = elen[#];
    ℝ minelen = fmin(de1, de2);
    ccos = ((minelen<ε)?0.0:4.0*dot2D(v1,v2)/(de1*de2));
    cdiv = (cross2D(up2-up0, xp3-xp1)-cross2D(up3-up1, xp2-xp0))/(2.0*cvolume);
    const ℝ³ dxx1 = ½ * (xp1+xp2-xp0-xp3);
    const ℝ³ dxx2 = ½ * (xp2+xp3-xp0-xp1);
    const ℝ dx1 = length(dxx1);
    const ℝ dx2 = length(dxx2);
    const ℝ³ duav = ¼*(up0+up1+up2+up3);
    const ℝ test1 = fabs(dot2D(dxx1,duav)*dx2);
    const ℝ test2 = fabs(dot2D(dxx2,duav)*dx1);
    const ℝ num = (test1>test2?dx1:dx2);
    const ℝ den = (test1>test2?dx2:dx1);
    const ℝ r = num / den;
    const ℝ evol = fmin(sqrt(4.0*cvolume*r),2.0*minelen);
    const ℝ dv1 = length2(up1+up2-up0-up3);
    const ℝ dv2 = length2(up2+up3-up0-up1);
    const ℝ du = sqrt(fmax(dv1, dv2));
    cevol = (cdiv < 0.0 ? evol : 0.);
    cdu   = (cdiv < 0.0 ? du   : 0.);
  }
}

∀ cells qcsCrmu @ 6.4 { // Kurapatenko viscous scalar
  const ℝ γp1 = γ + 1.0;
  ∀ nodes {
    const ℝ ztmp2 = ¼*q2*γp1*cdu;
    const ℝ ztmp1 = q1 * zss;
    const ℝ zkur = ztmp2 + √(ztmp2² + ztmp1²);
    const ℝ rmu = zkur * zrp * cevol;
    crmu = (cdiv>0.0)?0.0:rmu;
  }
}

∀ cells qcsC0qe @ 6.5 {
  ∀ nodes {
    cqe0 = crmu * (pu-pu[#-1])/elen[#-1];
    cqe1 = crmu * (pu[#+1]-pu)/elen;
  }
}

∀ cells qcsExtraVars @ 6.6 {
  ∀ nodes {
    const ℝ csin2 = 1.0-ccos²;
    cw   = ((csin2 < 1.e-4) ? 0.0:carea/csin2);
    ccos = ((csin2 < 1.e-4) ? 0.0:ccos);
  }
}

∀ cells qcsForcesCorners @ 6.7 {
  ∀ faces sfq = (cw*(cqe1+ccos*cqe0)+
                 cw[#+1]*(cqe0[#+1]+ccos[#+1]*cqe1[#+1]))/elen;
}

∀ cells qcsSetVelDiff @ 6.8 {
  ℝ z0tmp=0;
   ∀ nodes {
    const ℝ³ dx = pxp[#+1]-pxp;
    const ℝ³ du = pu[#+1]-pu;
    const ℝ lenx = elen;
    const ℝ dux = (lenx > 0.0)?fabs(dot2D(du,dx))/lenx:0.0;
    z0tmp = fmax(z0tmp, dux);
  }
  zdu = q1 * zss + 2.0 * q2 * z0tmp;
}

∀ cells sumCrnrForce @ 7.0 { ∀ nodes cftot=(sfp+sfq+sft)-(sfp[#-1]+sfq[#-1]+sft[#-1]); }

∀ nodes sumCrnrMasses @ 8.0 { pmaswt=0; ∀ cells pmaswt+=cmaswt; }

∀ nodes sumCrnrForces @ 8.1 { pf=0; ∀ cells pf+=cftot; }
 
∀ /*outer*/ nodes applyFixedBC_X @ 9.0 {
  if (px.x!=0.0 && px.x!=LENGTH) continue;
  const ℝ³ vfixx = ℝ³(1,0,0);
  pu = project(pu, vfixx);
  pf = project(pf, vfixx);
}
∀ /*outer*/ nodes applyFixedBC_Y @ 9.1 {
  if (px.y!=0.0 && px.y!=LENGTH) continue;
  const ℝ³ vfixy = ℝ³(0,1,0);
  pu = project(pu, vfixy);
  pf = project(pf, vfixy);
} 

∀ nodes calcAccel @ 10.0 { pap = pf/fmax(pmaswt,ι); }

∀ nodes advPosFullPu @ 11.0 { pu = pu0 + pap*dt; }
∀ nodes advPosFullPx @ 11.1 { px = px0 + ½*(pu+pu0)*dt; }

∀ cells updateZx @ 13.0 { zx=0; ∀ nodes zx+=px; zx/=#nodes; }
∀ faces updateEx @ 13.0 { ex=0; ∀ nodes ex+=px; ex/=#nodes; }
∀ cells updateVols @ 13.2 { 
  zvol=zarea=0; 
  ∀ nodes {
    sarea = ½ * cross2D(px[#+1]-px,zx-px);
    svol = ⅓* sarea * (px.x+px[#+1].x+zx.x);
    zarea += sarea;
    zvol  += svol;
  }
}

∀ cells calcWork @ 14.0 {
  zw=0; 
  const ℝ dth = ½ * dt;
  ∀ nodes { 
    const ℝ³ sftot = sfp + sfq;
    const ℝ sd1 = dot2D( sftot, (pu0+pu));
    const ℝ sd2 = dot2D(-sftot, (pu0[#+1]+pu[#+1]));
    const ℝ dwork = -dth*(sd1*pxp.x+sd2*pxp[#+1].x);
    zetot += dwork;
    zw += dwork;
  }
}

∀ cells calcWorkRate @ 15.0 { 
  const ℝ dvol=zvol-zvol0;
  zwrate = (zw+zp*dvol)/dt;
}

∀ cells calcEnergy @ 16.0 { ze = zetot/(zm+ι); }
∀ cells calcRho @ 16.0 { zr = zm / zvol; }


resetDtHydro @ 12.0 { dtrec=dtmax; dvovmax=ι;}

∀ cells calcDtCourant @ 19.0 {
  const ℝ du = fmax(zdu, fmax(zss,ι));
  const ℝ zdthyd = zdl * cfl / du;
  const ℝ dtnew = (zdthyd < dtmax)?zdthyd:dtmax;
  if (dtnew < dtrec) dtrec = dtnew;
}

∀ cells calcDtVolume @ 20.0 {
  const ℝ zdvov = fabs((zvol-zvol0)/zvol0);
  dvovmax = (zdvov>dvovmax)?zdvov;
}

calcDtVolumeTst @ 20.1 {
  const ℝ dtnew = dt * cflv / dvovmax;
  if (dtnew < dtrec) dtrec = dtnew;
}

incTime @ 30.0 {
  time += dt;
  cout<<"End cycle "<<cycle
      <<", time = "<<time<<", dt = "<<dt<<endl;
}

tstExit @ 40.0 {
  if (cycle < cstop && time < tstop) return;
  if (X_EDGE_ELEMS==3 && Y_EDGE_ELEMS==3 && Z_EDGE_ELEMS==1) assert(iteration==48);
  //exit;
}


// ****************************************************************************
// * Mathematical functions
// ****************************************************************************
ℝ length(const ℝ² v){ return sqrt(v.x*v.x + v.y*v.y); }
ℝ length2(const ℝ² v){ return(v.x*v.x + v.y*v.y); }
ℝ dot2D(const ℝ² v1, const ℝ² v2){ return(v1.x*v2.x + v1.y*v2.y); }
ℝ² rotateCCW(const ℝ² v){ return ℝ²(-v.y, v.x,0); }
ℝ cross2D(const ℝ² v1, const ℝ² v2){ return (v1.x*v2.y - v1.y*v2.x); }
ℝ² project(ℝ² v, const ℝ² u){ return v-dot(v,u)*u; }
