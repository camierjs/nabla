///////////////////////////////////////////////////////////////////////////////
// This NABLA port is an implementation of the PENNANT Mini-App              //
// from Charles R. Ferenbaugh (cferenba@lanl.gov), LANL                      //
// ‚àá contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr        //
///////////////////////////////////////////////////////////////////////////////
// PENNANT is an unstructured mesh physics mini-app designed for advanced    //
// architecture research. It contains mesh data structures and a few physics //
// algorithms adapted from the LANL rad-hydro code FLAG, and gives a sample  //
// of the typical memory access patterns of FLAG.                            //
///////////////////////////////////////////////////////////////////////////////
// Copyright 2012, Los Alamos National Security, LLC. All rights reserved.   //
// This software was produced under US Government contract DE-AC52-06NA25396 //
// for Los Alamos National Laboratory, which is operated by Los Alamos       //
// National Security, LLC for the U.S. Department of Energy.                 //
// The US Government has rights to use, reproduce and distribute this        //
// software.                                                                 //
// NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY    //
// WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF     //
// THIS SOFTWARE.                                                            //
// If this software is modified to produce derivative works, such modified   //
// software should be clearly marked, so as not to confuse it with the       //
// version available from LANL.                                              //
// Additionally, redistribution and use in source and binary forms, with or  //
// without modification, are permitted provided that the following           //
// conditions are met:                                                       //
//  1. Redistributions of source code must retain the above copyright notice,//
//     this list of conditions and the following disclaimer.                 //
//  2. Redistributions in binary form must reproduce the above copyright     //
//     notice, this list of conditions and the following disclaimer in the   //
//     documentation and/or other materials provided with the distribution.  //
//  3. Neither the name of Los Alamos National Security, LLC, Los Alamos     //
//     National Laboratory, LANL, the U.S. Government, nor the names of its  //
//     contributors may be used to endorse or promote products derived from  //
//     this software without specific prior written permission.              //
///////////////////////////////////////////////////////////////////////////////
// THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND        //
// CONTRIBUTORS ‚ÄúAS IS‚Äù AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,    //
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS //
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                                  //
// IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS BE    //
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR       //
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF      //
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  //
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN   //
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)   //
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF    //
// THE POSSIBILITY OF SUCH DAMAGE.                                           //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñù¬≤;

// ****************************************************************************
// Default options should match test/sedovsmall/sedovsmall.pnt
// cstop=100, tstop=1.0, meshtype=rect, meshparams=3 3 1.125 1.125
// subregion=0.0 0.3 0.0 0.3, rinitsub=1.0, einitsub=40.222, bcx=0.0 1.125
// bcy=0.0 1.125, ssmin=0.1, q1=0.1, q2=1.0, dtinit=0.0025
// ****************************************************************************
options{
  // Mesh options
  ‚Ñù LENGTH       = 1.125;
  ‚Ñï X_EDGE_ELEMS = 3;
  ‚Ñï Y_EDGE_ELEMS = 3;
  ‚Ñï Z_EDGE_ELEMS = 1;
  ‚Ñï option_max_iterations = 0;// ! utilis√© en dur dans le backend lambda !
  ‚Ñù option_Œ¥t_initial = 1e-7; // ! utilis√© en dur dans le backend lambda !
  ‚Ñù option_stoptime = 1.0;    // ! utilis√© en dur dans le backend lambda !
  // Pennant options
  ‚Ñæ trace       = false;
  ‚Ñï cstop       = 100;    // simulation stop cycle
  ‚Ñù tstop       = 1.0;    // simulation stop time
  ‚Ñù dtmax       = 1.e99;  // maximum timestep size
  ‚Ñù dtinit      = 0.0025; // initial timestep size
  ‚Ñù dtfac       = 1.2;    // factor limiting timestep growth
  ‚Ñï dtreport    = 10;     // frequency for timestep reports
  ‚Ñù cfl         = 0.6;    // Courant number, limits timestep
  ‚Ñù cflv        = 0.1;    // volume change limit for timestep
  ‚Ñù rinit       = 1.0;    // initial density for main mesh
  ‚Ñù einit       = 0.0;    // initial energy for main mesh
  ‚Ñæ subregion   = true;
  ‚Ñù sbxmin      = 0.0;
  ‚Ñù sbxmax      = 0.3;
  ‚Ñù sbymin      = 0.0;
  ‚Ñù sbymax      = 0.3;
  ‚Ñù rinitsub    = 1.0;    // initial density in subregion
  ‚Ñù einitsub    = 40.222; // initial energy in subregion
  ‚Ñù uinitradial = 0.0;    // initial velocity in radial direction
  ‚Ñù Œ≥           = 5./3.;  // coeff. for ideal gas equation
  ‚Ñù ssmin       = 0.1;    // minimum sound speed for gas
  ‚Ñù alpha       = 0.5;    // alpha coefficient for TTS model
  ‚Ñù q1          = 0.1;    // linear coefficients for Q model
  ‚Ñù q2          = 1.0;    // quadratic coefficients for Q model
  ‚Ñù Œµ           = 1.e-12;
  ‚Ñù Œπ           = 1.e-99;
};


// ****************************************************************************
// * Trace & Debug
// ****************************************************************************
enum{red=31,green,yellow,blue,magenta,cyan,white};
#define dbg(...) if (trace) printf("%s%s%s","\n[35m",__VA_ARGS__,"[m")
#define dbc(clr,...) if (trace) cout<<"["<<clr<<"m"<<__VA_ARGS__<<"[m"<<endl;


// ****************************************************************************
// * Zone/Sides/Corners Variables
// ****************************************************************************
cells{
  ‚Ñù¬≤ zx;    // zone center coordinates
  ‚Ñù¬≤ zxp;   // zone ctr coords, middle of cycle
  ‚Ñù zarea;  // zone area
  ‚Ñù zvol;   // zone volume
  ‚Ñù zareap; // zone area, middle of cycle
  ‚Ñù zvolp;  // zone volume, middle of cycle
  ‚Ñù zvol0;  // zone volume, start of cycle
  ‚Ñù zdl;    // zone characteristic length
  ‚Ñù zm;     // zone mass
  ‚Ñù zr;     // zone density
  ‚Ñù zrp;    // zone density, middle of cycle
  ‚Ñù ze;     // zone specific internal energy (energy per unit mass)
  ‚Ñù zetot;  // zone total internal energy
  ‚Ñù zw;     // zone work done in cycle
  ‚Ñù zwrate; // zone work rate
  ‚Ñù zp;     // zone pressure
  ‚Ñù zss;    // zone sound speed
  ‚Ñù zdu;    // zone velocity difference
  ‚Ñù z0per;  // zone tmp variable in PolyGas calcStateAtHalf
  ‚Ñù¬≤ z0uc;  // zone tmp centered velocity
  // Sides
  ‚Ñù sarea[faces];  // area
  ‚Ñù svol[faces];   // volume
  ‚Ñù sareap[faces]; // area, middle of cycle
  ‚Ñù svolp[faces];  // volume, middle of cycle
  ‚Ñù¬≤ ssurfp[faces];// surface vector
  ‚Ñù smf[faces];    // mass fraction
  ‚Ñù¬≤ sfp[faces];   // force from pressure
  ‚Ñù¬≤ sfq[faces];   // force from artificial visc.
  ‚Ñù¬≤ sft[faces];   // force from tts
  // Corners
  ‚Ñù¬≤ cftot[nodes]; // force, total from all sources
  ‚Ñù cmaswt[nodes]; // contribution to pmaswt
  ‚Ñù c0area[nodes]; // tmp
  ‚Ñù c0evol[nodes]; // tmp
  ‚Ñù c0du[nodes];   // tmp
  ‚Ñù c0div[nodes];  // tmp
  ‚Ñù c0cos[nodes];  // tmp
  ‚Ñù¬≤ c0qe0[nodes]; // tmp
  ‚Ñù¬≤ c0qe1[nodes]; // tmp
  ‚Ñù c0w[nodes];    // tmp
  ‚Ñù c0rmu[nodes];  // tmp
};

// ****************************************************************************
// * Point Variables
// ****************************************************************************
nodes{
  ‚Ñù¬≤ px,px0,pxp; // point coordinates, start & middle of cycle
  ‚Ñù¬≤ pu,pu0;     // point velocity
  ‚Ñù¬≤ pap,pf;     // point acceleration, force
  ‚Ñù pmaswt;      // point mass, weighted by 1/r
};

// ****************************************************************************
// * Edge Variables
// ****************************************************************************
faces{
  ‚Ñù¬≤ ex,exp; // edge center coordinates & middle of cycle
  ‚Ñù elen;    // edge length
};

// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ‚Ñï cycle;  // simulation cycle number
  ‚Ñù dt;     // current timestep
  ‚Ñù dtrec;  // maximum timestep for hydro
  ‚Ñù dvovmax;//
};

// ****************************************************************************
// * Initialization ]-‚àû,-0.0[
// ****************************************************************************

‚àÄ nodes @ -33 { px = coord; }

‚àÄ cells @ -32 { zx=0; ‚àÄ nodes zx+=px; zx/=#nodes; }
‚àÄ faces @ -32 { ex=0; ‚àÄ nodes ex+=px; ex/=#nodes; }

‚àÄ cells iniMeshCalcVols @ -31.8 {
  ‚Ñù¬≥ X[4]; ‚àÄ nodes X[#]=px;
  zvol=0;
  zarea=0; 
  ‚àÄ nodes{
    const int j=(#+1)%#nodes;
    sarea = ¬Ω * cross2D(X[j]-X[#],zx-X[#]);
    svol = ‚Öì* sarea * (X[#].x+X[j].x+zx.x);
    zarea += sarea;
    zvol  += svol;
  }
}

‚àÄ cells @ -31.7 { ‚àÄ faces smf = sarea/zarea; }

iniGlobals @ -20.0 { time=0; cycle=0; }

‚àÄ cells @ -14.9 { zr=rinit; }
‚àÄ cells @ -14.9 { ze=einit; }
‚àÄ cells @ -14.9 { zwrate=0; }
‚àÄ cells @ -14.8 if (subregion) {
  if (!(zx.x > (sbxmin-Œµ) && zx.x < (sbxmax+Œµ) &&
        zx.y > (sbymin-Œµ) && zx.y < (sbymax+Œµ))) continue;
  zr = rinitsub;
  ze = einitsub;
}

‚àÄ cells @ -14.7 { zm=zr*zvol; }

‚àÄ cells @ -14.6 { zetot=ze*zm; }

‚àÄ nodes @ -14.5 if (uinitradial!=0.0) {
  const ‚Ñù pmag = length(px);
  pu=(pmag>Œµ)?uinitradial*px/pmag:0;
}
‚àÄ nodes @ -14.5 if (uinitradial==0.0) { pu=0.0; }

iniRstDtHydro @ -14.4 { dtrec = 1.e99; }


// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+‚àû[ 
// ****************************************************************************

incCycle @ 1.0 { cycle += 1; }

calcGlobalDt @ 2.0 {
  const ‚Ñù dtlast = dt;
  dt = dtmax;
  if (cycle == 1) {
    dt=(dtinit<dt)?dtinit;
  } else {
    const ‚Ñù dtrecover = dtfac * dtlast;
    if (dtrecover<dt) dt = dtrecover;
  }
  dt=((tstop-time)<dt)?tstop-time;
  dt=(dtrec<dt)?dtrec;
}


‚àÄ nodes @ 3.0 { px0=px; }
‚àÄ nodes @ 3.0 { pu0=pu; }
‚àÄ cells @ 3.0 { zvol0=zvol; }

‚àÄ nodes @ 3.1 { pxp = px0+¬Ω*pu0*dt; }

‚àÄ cells @ 3.2 { zxp=0; ‚àÄ nodes zxp+=pxp; zxp/=#nodes; }
‚àÄ faces @ 3.2 { exp=0; ‚àÄ nodes exp+=pxp; exp/=#nodes; }

‚àÄ cells @ 3.4 {
  ‚Ñù¬≥ X[4]; ‚àÄ nodes X[#]=pxp;
  zareap=0; 
  zvolp=0;
  ‚àÄ nodes {
    const ‚Ñï j=(#+1)%#nodes;
    sareap = ¬Ω*cross2D(X[j]-X[#],zxp-X[#]);
    svolp = ‚Öì*sareap*(X[#].x+X[j].x+zxp.x);
    zareap+=sareap;
    zvolp +=svolp;
  } 
}

‚àÄ cells @ 3.5 { ‚àÄ faces ssurfp = rotateCCW(exp-zxp); }
‚àÄ faces @ 3.5 { elen = length(pxp[1]-pxp[0]); }

‚àÄ cells @ 3.6 { zdl = 1.e99; ‚àÄ faces zdl=min(zdl,4.0*sareap/elen); }

‚àÄ cells @ 4.0 { zrp = zm/zvolp; }

‚àÄ cells @ 4.1 {
  ‚Ñù m[4]; ‚àÄ nodes m[#]=smf;
  ‚àÄ nodes {
    const ‚Ñï j=(#+#nodes-1)%#nodes;
    cmaswt = ¬Ω*zrp*zareap*(m[#]+m[j]);
  }
}

‚àÄ cells @ 5.0 {
  const ‚Ñù Œ≥m1 = Œ≥ - 1.0;
  const ‚Ñù ss2 = fmax(ssmin*ssmin,1.e-99);
  const ‚Ñù rx = zr;
  const ‚Ñù local_ex = fmax(ze,0.0);
  const ‚Ñù local_px = Œ≥m1*rx*local_ex;
  const ‚Ñù prex = Œ≥m1*local_ex;
  const ‚Ñù perx = Œ≥m1*rx;
  const ‚Ñù csqd = fmax(ss2, prex+perx*local_px/(rx*rx));
  zp =local_px;
  z0per = perx;
  zss = ‚àö(csqd);
}

‚àÄ cells @ 5.1 {
  const ‚Ñù dth = ¬Ω * dt;
  const ‚Ñù zminv = 1.0 / zm;
  const ‚Ñù dv = (zvolp - zvol0) * zminv;
  const ‚Ñù bulk = zr * zss * zss;
  const ‚Ñù denom = 1.0 + ¬Ω * z0per * dv;
  const ‚Ñù src = zwrate * dth * zminv;
  zp += (z0per * src - zr * bulk * dv) / denom;
}

‚àÄ cells @ 6.0 { ‚àÄ faces sfp=-zp * ssurfp; }

‚àÄ cells @ 6.1 {
  ‚àÄ faces {
    const ‚Ñù svfacinv = zareap / sareap;
    const ‚Ñù srho = zrp * smf * svfacinv;
    ‚Ñù sstmp = fmax(zss, ssmin);
    sstmp = alpha * sstmp * sstmp;
    const ‚Ñù sdp = sstmp * (srho - zrp);
    const ‚Ñù¬≥ sqq = -sdp * ssurfp;
    sft = sqq;
  }
}

‚àÄ cells @ 6.2 { z0uc=0; ‚àÄ nodes z0uc += pu; z0uc/=#nodes; }

‚àÄ cells @ 6.3 {
  const ‚Ñù¬≥ _pu[4] = {pu[0],pu[1],pu[2],pu[3]};
  const ‚Ñù¬≥ _ex[4] = {exp[0],exp[1],exp[2],exp[3]};
  const ‚Ñù _elen[4] = {elen[0],elen[1],elen[2],elen[3]};
  ‚àÄ nodes {
    const ‚Ñï i=(#+#nodes-1)%#nodes; // previous
    const ‚Ñï k=(#+1)%#nodes;   // next
    const ‚Ñù¬≥ up0 = pu;
    const ‚Ñù¬≥ xp0 = pxp;
    const ‚Ñù¬≥ up1 = ¬Ω * (_pu[#] + _pu[k]);
    const ‚Ñù¬≥ xp1 = _ex[#];
    const ‚Ñù¬≥ up2 = z0uc;
    const ‚Ñù¬≥ xp2 = zxp;
    const ‚Ñù¬≥ up3 = ¬Ω * (_pu[i] + _pu[#]);
    const ‚Ñù¬≥ xp3 = _ex[i];
    const ‚Ñù cvolume = ¬Ω * cross2D(xp2-xp0, xp3-xp1);
    c0area = cvolume;
    const ‚Ñù¬≥ v1 = xp3-xp0;
    const ‚Ñù¬≥ v2 = xp1-xp0;
    const ‚Ñù de1 = _elen[i];
    const ‚Ñù de2 = _elen[#];
    ‚Ñù minelen = min(de1, de2);
    c0cos = ((minelen<Œµ)?0.0:4.0*dot2D(v1,v2)/(de1*de2));
    c0div = (cross2D(up2-up0, xp3-xp1)-cross2D(up3-up1, xp2-xp0))/(2.0*cvolume);
    const ‚Ñù¬≥ dxx1 = ¬Ω * (xp1+xp2-xp0-xp3);
    const ‚Ñù¬≥ dxx2 = ¬Ω * (xp2+xp3-xp0-xp1);
    const ‚Ñù dx1 = length(dxx1);
    const ‚Ñù dx2 = length(dxx2);
    const ‚Ñù¬≥ duav = ¬º*(up0+up1+up2+up3);
    const ‚Ñù test1 = fabs(dot2D(dxx1,duav)*dx2);
    const ‚Ñù test2 = fabs(dot2D(dxx2,duav)*dx1);
    const ‚Ñù num = (test1>test2?dx1:dx2);
    const ‚Ñù den = (test1>test2?dx2:dx1);
    const ‚Ñù r = num / den;
    const ‚Ñù evol = min(sqrt(4.0*cvolume*r),2.0*minelen);
    const ‚Ñù dv1 = length2(up1+up2-up0-up3);
    const ‚Ñù dv2 = length2(up2+up3-up0-up1);
    const ‚Ñù du = sqrt(max(dv1, dv2));
    c0evol = (c0div < 0.0 ? evol : 0.);
    c0du   = (c0div < 0.0 ? du   : 0.);
  }
}

‚àÄ cells @ 6.4 {
  const ‚Ñù Œ≥p1 = Œ≥ + 1.0;
  ‚àÄ nodes {
    const ‚Ñù ztmp2 = ¬º*q2*Œ≥p1*c0du;
    const ‚Ñù ztmp1 = q1 * zss;
    const ‚Ñù zkur = ztmp2 + ‚àö(ztmp2¬≤ + ztmp1¬≤);
    const ‚Ñù rmu = zkur * zrp * c0evol;
    c0rmu = (c0div>0.0)?0.0:rmu;
  }
}

‚àÄ cells @ 6.5 {
  const int N = #nodes;
  const ‚Ñù¬≥ _pu[4] = {pu[0],pu[1],pu[2],pu[3]};
  const ‚Ñù _elen[4] = {elen[0],elen[1],elen[2],elen[3]};
  ‚àÄ nodes {
    const ‚Ñï p1=(#+N-1)%N; // previous
    const ‚Ñï p=(#);        // current
    const ‚Ñï p2=(#+1)%N;   // next
    c0qe0 = c0rmu * (_pu[p] - _pu[p1]) / _elen[p1];
    c0qe1 = c0rmu * (_pu[p2] - _pu[p]) / _elen[p];
  }
}

‚àÄ cells @ 6.6 {
  ‚àÄ nodes {
    const ‚Ñù csin2 = 1.0-c0cos¬≤;
    c0w   = ((csin2 < 1.e-4) ? 0.0:c0area/csin2);
    c0cos = ((csin2 < 1.e-4) ? 0.0:c0cos);
  }
}

‚àÄ cells @ 6.7 {
  const ‚Ñù _elen[4] = {elen[0],elen[1],elen[2],elen[3]};
  ‚àÄ faces {
    const ‚Ñù _el = _elen[#];
    const ‚Ñï c20 = (#+1)%#nodes; // next
    sfq = (c0w*(c0qe1+c0cos*c0qe0)
           +c0w[NABLA_FACE_PER_CELL*c+c20]
           *(c0qe0[NABLA_FACE_PER_CELL*c+c20]
             +c0cos[NABLA_FACE_PER_CELL*c+c20]
             *c0qe1[NABLA_FACE_PER_CELL*c+c20]))/_el;
  }
}

‚àÄ cells  @ 6.8 {
  ‚Ñù z0tmp=0;
  ‚Ñù¬≥ u[4]; ‚àÄ nodes u[#]=pu;
  ‚Ñù¬≥ x[4]; ‚àÄ nodes x[#]=pxp;
  ‚Ñù e[4]; ‚àÄ faces e[#]=elen;
  ‚àÄ nodes {
    const ‚Ñï k=(#+1)%#nodes; // next
    const ‚Ñù¬≥ dx = x[k]-x[#];
    const ‚Ñù¬≥ du = u[k]-u[#];
    const ‚Ñù lenx = e[#];
    const ‚Ñù dux = (lenx > 0.0)?fabs(dot2D(du,dx))/lenx:0.0;
    z0tmp = max(z0tmp, dux);
  }
  zdu = q1 * zss + 2.0 * q2 * z0tmp;
}

‚àÄ cells @ 7.0 {
  ‚Ñù¬≥ p[4]; ‚àÄ faces p[#]=sfp;
  ‚Ñù¬≥ q[4]; ‚àÄ faces q[#]=sfq;
  ‚Ñù¬≥ t[4]; ‚àÄ faces t[#]=sft;
  ‚àÄ nodes {
    const ‚Ñï i=(#+#nodes-1)%#nodes; // previous
    cftot = (p[#]+q[#]+t[#]) - (p[i]+q[i]+t[i]);
  }
}

‚àÄ nodes @ 8.0 { pmaswt=0; ‚àÄ cells pmaswt+=cmaswt; }

‚àÄ nodes @ 8.1 { pf=0; ‚àÄ cells pf+=cftot; }
 
‚àÄ /*outer*/ nodes @ 9.0 {
  if (px.x!=0.0 && px.x!=LENGTH) continue;
  const ‚Ñù¬≥ vfixx = ‚Ñù¬≥(1,0,0);
  pu = project(pu, vfixx);
  pf = project(pf, vfixx);
}
‚àÄ /*outer*/ nodes @ 9.1 {
  if (px.y!=0.0 && px.y!=LENGTH) continue;
  const ‚Ñù¬≥ vfixy = ‚Ñù¬≥(0,1,0);
  pu = project(pu, vfixy);
  pf = project(pf, vfixy);
} 

‚àÄ nodes @ 10.0 { pap = pf/fmax(pmaswt,Œπ); }

‚àÄ nodes @ 11.0 { pu = pu0 + pap*dt; }
‚àÄ nodes @ 11.1 { px = px0 + ¬Ω*(pu+pu0)*dt; }

‚àÄ cells @ 13.0 { zx=0; ‚àÄ nodes zx+=px; zx/=#nodes; }
‚àÄ faces @ 13.0 { ex=0; ‚àÄ nodes ex+=px; ex/=#nodes; }

‚àÄ cells @ 13.2 { 
  ‚Ñù¬≥ X[4]; ‚àÄ nodes X[#]=px;
  zvol=0;
  zarea=0; 
  ‚àÄ nodes {
    const ‚Ñï i=#;
    const ‚Ñï j=(#+1)%#nodes;
    sarea = ¬Ω * cross2D(X[j]-X[i],zx-X[i]);
    svol = ‚Öì* sarea * (X[i].x+X[j].x+zx.x);
    zarea += sarea;
    zvol  += svol;
  }
}

‚àÄ cells @ 14.0 {
  zw=0; 
  const ‚Ñù dth = ¬Ω * dt;
  ‚Ñù¬≥ _pu[4]; ‚àÄ nodes _pu[#]=pu;
  ‚Ñù¬≥ _pu0[4]; ‚àÄ nodes _pu0[#]=pu0;
  const ‚Ñù _xp[4] = {pxp[0].x,pxp[1].x,pxp[2].x,pxp[3].x};
  ‚àÄ faces { 
    const ‚Ñï j=(#);
    const ‚Ñï k=(#+1)%#nodes;
    const ‚Ñù¬≥ sftot = sfp + sfq;
    const ‚Ñù sd1 = dot2D( sftot, (_pu0[j] + _pu[j]));
    const ‚Ñù sd2 = dot2D(-sftot, (_pu0[k] + _pu[k]));
    const ‚Ñù dwork = -dth * (sd1 * _xp[j] + sd2 * _xp[k]);
    zetot += dwork;
    zw += dwork;
  }
}

‚àÄ cells @ 15.0 { 
  const ‚Ñù dvol = zvol - zvol0;
  zwrate = (zw+zp*dvol)/dt;
}

‚àÄ cells @ 16.0 { ze = zetot/(zm+Œπ); }
‚àÄ cells @ 16.0 { zr = zm / zvol; }


resetDtHydro @ 12.0 { dtrec=dtmax; dvovmax=Œπ;}

‚àÄ cells @ 19.0 {
  const ‚Ñù cdu = fmax(zdu, fmax(zss,Œπ));
  const ‚Ñù zdthyd = zdl * cfl / cdu;
  const ‚Ñù dtnew = (zdthyd < dtmax)?zdthyd:dtmax;
  if (dtnew < dtrec) dtrec = dtnew;
}

‚àÄ cells @ 20.0 {
  const ‚Ñù zdvov = fabs((zvol-zvol0)/zvol0);
  dvovmax = (zdvov>dvovmax)?zdvov;
}

calcDtVolumeTst @ 20.1 {
  const ‚Ñù dtnew = dt * cflv / dvovmax;
  if (dtnew < dtrec) dtrec = dtnew;
}

incTime @ 30.0 {
  time += dt;
  cout<<"End cycle "<<cycle
      <<", time = "<<time<<", dt = "<<dt<<endl;
}

tstExit @ 40.0 { if (cycle>=cstop||time>=tstop) exit; }


// ****************************************************************************
// * Mathematical functions
// ****************************************************************************
‚Ñù length(const ‚Ñù¬≤ v){ return sqrt(v.x*v.x + v.y*v.y); }
‚Ñù length2(const ‚Ñù¬≤ v){ return(v.x*v.x + v.y*v.y); }
‚Ñù dot2D(const ‚Ñù¬≤ v1, const ‚Ñù¬≤ v2){ return(v1.x*v2.x + v1.y*v2.y); }
‚Ñù¬≤ rotateCCW(const ‚Ñù¬≤ v){ return ‚Ñù¬≤(-v.y, v.x,0); }
‚Ñù cross2D(const ‚Ñù¬≤ v1, const ‚Ñù¬≤ v2){ return (v1.x*v2.y - v1.y*v2.x); }
‚Ñù¬≤ project(‚Ñù¬≤ v, const ‚Ñù¬≤ u){ return v-dot(v,u)*u; }
