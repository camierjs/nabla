inline ℝ length(const ℝ² v){
  return sqrt(v.x * v.x + v.y * v.y);
}

inline ℝ dot2D(const ℝ² v1, const ℝ² v2)
{
    return(v1.x * v2.x + v1.y * v2.y);
}

// rotate 90 degrees counterclockwise
inline ℝ² rotateCCW(const ℝ² v){
  return ℝ²(-v.y, v.x,0);
}

inline ℝ cross2D(const ℝ² v1, const ℝ² v2)
{
    return (v1.x * v2.y - v1.y * v2.x);
}

// project v onto subspace perpendicular to u
// u must be a unit vector
inline ℝ² project(ℝ² v, const ℝ² u){
    // assert(length2(u) == 1.);
    return v - dot(v, u) * u;
}
