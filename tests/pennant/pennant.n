///////////////////////////////////////////////////////////////////////////////
// This NABLA port is an implementation of the PENNANT Mini-App              //
// from Charles R. Ferenbaugh (cferenba@lanl.gov), LANL                      //
// ‚àá contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr        //
///////////////////////////////////////////////////////////////////////////////
// PENNANT is an unstructured mesh physics mini-app designed for advanced    //
// architecture research. It contains mesh data structures and a few physics //
// algorithms adapted from the LANL rad-hydro code FLAG, and gives a sample  //
// of the typical memory access patterns of FLAG.                            //
///////////////////////////////////////////////////////////////////////////////
// Copyright 2012, Los Alamos National Security, LLC. All rights reserved.   //
// This software was produced under US Government contract DE-AC52-06NA25396 //
// for Los Alamos National Laboratory, which is operated by Los Alamos       //
// National Security, LLC for the U.S. Department of Energy.                 //
// The US Government has rights to use, reproduce and distribute this        //
// software.                                                                 //
// NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY    //
// WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF     //
// THIS SOFTWARE.                                                            //
// If this software is modified to produce derivative works, such modified   //
// software should be clearly marked, so as not to confuse it with the       //
// version available from LANL.                                              //
// Additionally, redistribution and use in source and binary forms, with or  //
// without modification, are permitted provided that the following           //
// conditions are met:                                                       //
//  1. Redistributions of source code must retain the above copyright notice,//
//     this list of conditions and the following disclaimer.                 //
//  2. Redistributions in binary form must reproduce the above copyright     //
//     notice, this list of conditions and the following disclaimer in the   //
//     documentation and/or other materials provided with the distribution.  //
//  3. Neither the name of Los Alamos National Security, LLC, Los Alamos     //
//     National Laboratory, LANL, the U.S. Government, nor the names of its  //
//     contributors may be used to endorse or promote products derived from  //
//     this software without specific prior written permission.              //
///////////////////////////////////////////////////////////////////////////////
// THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND        //
// CONTRIBUTORS ‚ÄúAS IS‚Äù AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,    //
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS //
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED.                                  //
// IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS BE    //
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR       //
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF      //
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  //
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN   //
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)   //
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF    //
// THE POSSIBILITY OF SUCH DAMAGE.                                           //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñù¬≤;

options{
  // Mesh options
  ‚Ñù LENGTH       = 1.125;
  ‚Ñï X_EDGE_ELEMS = 3;
  ‚Ñï Y_EDGE_ELEMS = 3;
  ‚Ñï Z_EDGE_ELEMS = 1;
  ‚Ñï option_max_iterations = 0;// ! utilis√© en dur dans le backend lambda !
  ‚Ñù option_Œ¥t_initial = 1e-7; // ! utilis√© en dur dans le backend lambda !
  ‚Ñù option_stoptime = 1.;     // ! utilis√© en dur dans le backend lambda !
  // Pennant options
  ‚Ñæ option_debug = true;
  ‚Ñï cstop=999999; // simulation stop cycle
  ‚Ñù tstop=1.e99;  // simulation stop time
  ‚Ñù dtmax=1.e99;  // maximum timestep size
  ‚Ñù dtinit=1.e99; // initial timestep size
  ‚Ñù dtfac=1.2;    // factor limiting timestep growth
  ‚Ñï dtreport=10;  // frequency for timestep reports
  ‚Ñù cfl=0.6;      // Courant number, limits timestep
  ‚Ñù cflv=0.1;     // volume change limit for timestep
  ‚Ñù rinit=1.0;    // initial density for main mesh
  ‚Ñù einit=0.0;    // initial energy for main mesh
  ‚Ñæ subregion=true;
  ‚Ñù subrgn_xmin=0.0;
  ‚Ñù subrgn_xmax=0.3;
  ‚Ñù subrgn_ymin=0.0;
  ‚Ñù subrgn_ymax=0.3;
  ‚Ñù rinitsub=1.0; // initial density in subregion
  ‚Ñù einitsub=0.0; // initial energy in subregion
  ‚Ñù uinitradial=0.0; // initial velocity in radial direction
  //std::vector<‚Ñù> bcx; // x values of x-plane fixed boundaries
  //std::vector<‚Ñù> bcy; // y values of y-plane fixed boundaries
  ‚Ñù option_gamma=5./3.; // coeff. for ideal gas equation
  ‚Ñù ssmin=0;      // minimum sound speed for gas
  ‚Ñù alfa=0.5;     // alpha coefficient for TTS model
  ‚Ñù qgamma=5./3.; // gamma coefficient for Q model
  ‚Ñù q1=0.0;       // linear coefficients for Q model
  ‚Ñù q2=2.0;       // quadratic coefficients for Q model
  ‚Ñæ option_chaos = true;
  ‚Ñù option_chaos_seed = 1.1234567890123;//456789;
};

enum{red=31,green,yellow,blue,magenta,cyan,white};
#define dbg(...) if (option_debug) printf("%s%s%s","\n[35m",__VA_ARGS__,"[m")
#define dbc(clr,...) if (option_debug) cout<<"\n["<<clr<<"m"<<__VA_ARGS__<<"[m";

// ****************************************************************************
// * Zone Variables
// ****************************************************************************
cells{
  ‚Ñù¬≤ zx;    // zone center coordinates
  ‚Ñù¬≤ zxp;   // zone ctr coords, middle of cycle
  ‚Ñù zarea;  // zone area
  ‚Ñù zvol;   // zone volume
  ‚Ñù zareap; // zone area, middle of cycle
  ‚Ñù zvolp;  // zone volume, middle of cycle
  ‚Ñù zvol0;  // zone volume, start of cycle
  ‚Ñù zdl;    // zone characteristic length
  ‚Ñù zm;     // zone mass
  ‚Ñù zr;     // zone density
  ‚Ñù zrp;    // zone density, middle of cycle
  ‚Ñù ze;     // zone specific internal energy (energy per unit mass)
  ‚Ñù zetot;  // zone total internal energy
  ‚Ñù zw;     // zone work done in cycle
  ‚Ñù zwrate; // zone work rate
  ‚Ñù zp;     // zone pressure
  ‚Ñù zss;    // zone sound speed
  ‚Ñù zdu;    // zone velocity difference
  ‚Ñù z0per;  // zone tmp variable in PolyGas calcStateAtHalf
  ‚Ñù¬≤ z0uc;  // zone tmp centered velocity
  ‚Ñù zr0;    // zone tmp
  ‚Ñù z0tmp;  // zone tmp
  ‚Ñù sarea[faces];  // side area
  ‚Ñù svol[faces];   // side volume
  ‚Ñù sareap[faces]; // side area, middle of cycle
  ‚Ñù svolp[faces];  // side volume, middle of cycle
  ‚Ñù¬≤ ssurfp[faces];// side surface vector
  ‚Ñù smf[faces];    // side mass fraction
  ‚Ñù¬≤ sfp[faces];   // side force from pressure
  ‚Ñù¬≤ sfq[faces];   // side force from artificial visc.
  ‚Ñù¬≤ sft[faces];   // side force from tts
  ‚Ñù¬≤ cftot[nodes]; // corner force, total from all sources
  ‚Ñù cmaswt[nodes]; // corner contribution to pmaswt
  ‚Ñù c0area[nodes]; // corner tmp
  ‚Ñù c0evol[nodes]; // corner tmp
  ‚Ñù c0du[nodes];   // corner tmp
  ‚Ñù c0div[nodes];  // corner tmp
  ‚Ñù c0cos[nodes];  // corner tmp
  ‚Ñù¬≤ c0qe0[nodes]; // corner tmp
  ‚Ñù¬≤ c0qe1[nodes]; // corner tmp
  ‚Ñù c0w[nodes];    // corner tmp
  ‚Ñù c0rmu;         // corner tmp
};


// ****************************************************************************
// * Point Variables
// ****************************************************************************
nodes{
  ‚Ñù¬≤ px0;   // point coords, start of cycle
  ‚Ñù¬≤ px;    // point coordinates
  ‚Ñù¬≤ pxp;   // point coords, middle of cycle
  ‚Ñù¬≤ pu;    // point velocity
  ‚Ñù¬≤ pu0;   // point velocity, start of cycle
  ‚Ñù¬≤ pap;   // point acceleration
  ‚Ñù¬≤ pf;    // point force
  ‚Ñù pmaswt; // point mass, weighted by 1/r
};


// ****************************************************************************
// * Edge Variables
// ****************************************************************************
faces{
  ‚Ñù¬≤ ex;    // edge center coordinates
  ‚Ñù¬≤ exp;   // edge ctr coords, middle of cycle
  ‚Ñù elen;   // edge length
};


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  //‚Ñù time; // simulation time
  ‚Ñï cycle;  // simulation cycle number
  ‚Ñù dt;     // current timestep
  ‚Ñù dtlast; // previous timestep
  ‚Ñù dtrec;  // maximum timestep for hydro
  ‚Ñù¬≤ vfix;  // vector perp. to fixed plane
  ‚Ñù dvovmax;//
  //‚Ñù sumi;   // tmp var for sumEnergy
};


// ****************************************************************************
// * Partie d'initialisation ]-‚àû,-0.0[
// ****************************************************************************
iniCout @ -48.0{
  cout<<"\n[m";
}

‚àÄ nodes iniMeshCoords @ -32.0{
  px = coord;
  px *= (option_chaos)?option_chaos_seed:1.0;
  cout<<"\t[33m[iniMeshCoords] px["<<n<<"]="<<px<<"[m"<<endl;
}

‚àÄ cells iniMeshCalcCtrs_zx @ -31.9 {
  zx=0;
  ‚àÄ node zx+=px;
  zx /= nbNode;
  cout<<"[33m[Mesh::calcCtrs] zx["<<c<<"]="<<zx<<"[m"<<endl;
}

‚àÄ faces iniMeshCalcCtrs_ex @ -31.9 {
  ex = 0.0;
  ‚àÄ node ex += px; 
  ex /= nbNode;
  assert(nbNode==2);
  //cout<<"\n[33m[Mesh::calcCtrs] ex["<<uid<<"]="<<ex<<"[m";
}

‚àÄ cells iniMeshCalcVols @ -31.8 {
  const int N = nbNode;
  const ‚Ñù¬≥ X[4] = {px[0],px[1],px[2],px[3]};
  zvol=0;
  zarea=0; 
  ‚àÄ node{
    const int i=#;
    const int j=(#+1)%N;
    //cout<<"\n[33m[iniMeshCalcVolsCross2D] i="<<i<<", j="<<j<<", N="<<N<<"[m";
    sarea = ¬Ω * cross2D(X[j]-X[i],zx-X[i]);
    svol = ‚Öì* sarea * (X[i].x+X[j].x+zx.x);
    zarea += sarea;
    zvol  += svol;
    //cout<<"\n[33m[iniMeshCalcVolsCross2D] sarea["<<uid<<","<<n<<"]="<<sarea<<"[m";
  }
  cout<<"\t[33m[iniMeshCalcVols] zvol="<<zvol<<"[m"<<endl;
}

‚àÄ cells iniMeshCalcSideFracs @ -31.7 {
  ‚àÄ face {
    smf = sarea / zarea;
    cout<<"[33m[iniMeshCalcSideFracs] smf["<<c<<"]="<<smf<<"[m"<<endl;
  }
}

iniTstOptions @ -30.0 {
  dbc(magenta,"optTest");
  if (cstop == 999999 && tstop == 1.e99) {
    cerr << endl << "Must specify either cstop or tstop" << endl;
    exit;
  }
}

iniGlobals @ -20.0 {
  dbc(magenta,"iniGlobals");
  time = 0.0;
  cycle = 0;
}

‚àÄ cells iniZr @ -14.9 { zr=rinit; }
‚àÄ cells iniZe @ -14.9 { ze=einit; }
‚àÄ cells iniZwrate @ -14.9 { zwrate=0.0; }
‚àÄ cells @ -14.8 if (subregion) {
  const double eps = 1.e-12;
  //cout<<"\n[37m[subregion] zx["<<c<<"]="<<zx<<"[m";
  //cout<<"\n[37m[subregion] subrgn_xmin="<<subrgn_xmin<<"[m";
  //cout<<"\n[37m[subregion] subrgn_xmax="<<subrgn_xmax<<"[m";
  if (!(zx.x > (subrgn_xmin - eps) && zx.x < (subrgn_xmax + eps) &&
        zx.y > (subrgn_ymin - eps) && zx.y < (subrgn_ymax + eps))) continue;
  cout<<"\n[37;1m[subregion] zx["<<c<<"] in sybregion![m";
  zr = rinitsub;
  ze = einitsub;
}

‚àÄ cells iniZm @ -14.7 {
  zm = zr * zvol;
  cout<<"\n[37m[Hydro::init] zm["<<c<<"]="<<zm<<"[m";
}

‚àÄ cells iniZetot @ -14.6 {
  zetot = ze * zm;
  cout<<"\n[37m[Hydro::init] zetot["<<c<<"]="<<zetot<<"[m";
}

‚àÄ nodes iniPuRadial @ -14.5 if (uinitradial!=0.0) {
  const ‚Ñù eps = 1.e-12;
  const ‚Ñù pmag = length(px);
  if (pmag > eps) pu = uinitradial * px / pmag;
  else pu = 0.0;
}
‚àÄ nodes iniPuStd @ -14.5 if (uinitradial==0.0) { pu=0.0; }

iniRstDtHydro @ -14.4 { dtrec = 1.e99; }



// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+‚àû[ 
// ****************************************************************************


incCycle @ 1.0 { cycle += 1; }

calcGlobalDt @ 2.0 {
  // Save timestep from last cycle
  dtlast = dt;
  // Compute timestep for this cycle
  dt = dtmax;
  if (cycle == 1) {    // compare to initial timestep
    cout<<"\n\t[35m[Driver::calcGlobalDt] initial timestep, dtinit="<<dtinit<<"[m"<<endl;
    if (dtinit < dt) dt = dtinit;
  } else {
    const double dtrecover = dtfac * dtlast;
    if (dtrecover < dt) dt = dtrecover;
  }
  // compare to time-to-end
  if ((tstop - time) < dt) dt = tstop - time;
  // compare to hydro dt
  if (dtrec < dt) dt = dtrec;
  cout<<"\t[35m[calcGlobalDt] dt="<<dt<<"[m"<<endl;
}

// Hydro::doCycle
// Begin hydro cycle

‚àÄ nodes saveOffPxFromPreviousCycle @ 3.0 { px0=px; }
‚àÄ nodes saveOffPuFromPreviousCycle @ 3.0 { pu0=pu; }

// ===== Predictor step =====
// 1. advance mesh to center of time step
‚àÄ nodes advPosHalf0 @ 3.1 {
  pxp = px0 + pu0 * ¬Ω * dt;
  cout<<"\t[37m[Hydro::advPosHalf] pxp"<<pxp<<"[m"<<endl;
}

// save off zone variable values from previous cycle
‚àÄ cells saveOffZvolFromPreviousCycle @ 3.2 { zvol0=zvol; }

// 1a. compute new mesh geometry
‚àÄ cells computeZxp @ 3.3 {
  zxp=0;
  ‚àÄ node zxp+=pxp;
  zxp/= nbNode;
  cout<<"[33m[Mesh::calcCtrs] zxp["<<c<<"]="<<zxp<<"[m"<<endl;
}

‚àÄ faces computeExp @ 3.3 {
  exp = 0.0;
  ‚àÄ node exp += pxp;
  exp /= nbNode;
  //cout<<"\n[33m[Mesh::calcCtrs] exp["<<c<<"]="<<exp<<"[m";
}

‚àÄ cells calcVols @ 3.4 {
  const int N = nbNode;
  const ‚Ñù¬≥ X[4] = {pxp[0],pxp[1],pxp[2],pxp[3]};
  //‚Ñù¬≥ X[4];  ‚àÄ node X[#]=pxp;
  zareap=0; 
  zvolp=0;
  ‚àÄ node {
    const ‚Ñï i=#;
    const ‚Ñï j=(#+N+1)%N;
    sareap = ¬Ω * cross2D(X[j]-X[i],zxp-X[i]);
    svolp = ‚Öì* sareap * (X[i].x+X[j].x+zxp.x);
    zareap += sareap;
    zvolp  += svolp;
  } 
  cout<<"\t[33m[calcVols] zvolp="<<zvolp<<"[m"<<endl;
}

‚àÄ cells calcSurfVecs @ 3.5 {
  ‚àÄ face{
    ssurfp = rotateCCW(exp - zxp);
    cout<<"\t[33m[calcSurfVecs] ssurfp="<<ssurfp<<"[m"<<endl;
  }
}

‚àÄ faces calcEdgeLen @ 3.5 {
  elen = length(pxp[1]-pxp[0]);
  //cout<<"\t[33m[calcEdgeLen] elen="<<elen<<"[m"<<endl;
}

‚àÄ cells calcCharLen @ 3.6 {
  zdl = 1.e99;
  ‚àÄ face {
    const ‚Ñù sdl = 4.0 * sareap / elen;
    zdl = min(zdl, sdl);
  }
  //cout<<"\t[33m[calcCharLen] zdl="<<zdl<<"[m"<<endl;
}

// 2. compute point masses
‚àÄ cells calcRhoOne @ 4.0 {
  zrp = zm / zvolp;
  cout<<"\t[37m[calcRhoOne] zrp="<<zrp<<"[m"<<endl;
}

‚àÄ cells calcCrnrMass @ 4.1 {
  const ‚Ñï N = nbNode;
  ‚àÄ node {
    const ‚Ñï j=(#+N-1)%N;
    cmaswt = ¬Ω * zrp * zareap * (smf + smf[j]);
    cout<<"\t[37m[calcCrnrMass] cmaswt="<<cmaswt<<"[m"<<endl;
  }
}

// 3. compute material state (half-advanced)
// calcStateAtHalf
‚àÄ cells calcStateAtHalf_calcEOS @ 5.0 {
  const ‚Ñù gm1 = option_gamma - 1.;
  const ‚Ñù ss2 = max(ssmin * ssmin, 1.e-99);
  const ‚Ñù local_rx = zr;
  const ‚Ñù local_ex = max(ze, 0.0);
  const ‚Ñù local_px = gm1 * local_rx * local_ex;
  const ‚Ñù prex = gm1 * local_ex;
  const ‚Ñù perx = gm1 * local_rx;
  const ‚Ñù csqd = max(ss2, prex + perx * local_px / (local_rx * local_rx));
  zp =local_px;
  //cout<<"[36m[PolyGas::calcEOS] zp="<<zp<<"[m"<<endl;
  z0per = perx;
  zss = ‚àö(csqd);
  cout<<"[36m[PolyGas::calcEOS] zss="<<zss<<"[m"<<endl;
}

‚àÄ cells calcStateAtHalf_next @ 5.1 {
  const ‚Ñù dth = ¬Ω * dt;
  const ‚Ñù zminv = 1. / zm;
  const ‚Ñù dv = (zvolp - zvol0) * zminv;
  const ‚Ñù bulk = zr0 * zss * zss;
  const ‚Ñù denom = 1. + 0.5 * z0per * dv;
  const ‚Ñù src = zwrate * dth * zminv;
  zp += (z0per * src - zr0 * bulk * dv) / denom;
  //cout<<"[36m[PolyGas::calcStateAtHalf_next] zp="<<zp<<"[m"<<endl;
}

// 4. compute forces
‚àÄ cells pgasCalcForce @ 6.0 {
  ‚àÄ face {
    sfp=-zp * ssurfp;
    cout<<"[36m[PolyGas::calcForce] sf["<<f<<"]="<<sfp<<"[m"<<endl;
  }
}
‚àÄ cells ttsCalcForce @ 6.1 {
  ‚àÄ face {
    ‚Ñù svfacinv = zareap / sareap;
    ‚Ñù srho = zrp * smf * svfacinv;
    ‚Ñù sstmp = max(zss, ssmin);
    sstmp = alfa * sstmp * sstmp;
    ‚Ñù sdp = sstmp * (srho - zrp);
    //‚Ñù¬≤ sqq = -sdp * ssurfp;
    sft = -sdp * ssurfp;
    //cout<<"[34m[TTS::calcForce] sft="<<sft[f]<<"[m"<<endl;
  }
}

‚àÄ cells qcsCalcForce_zoneCenteredVelocity @ 6.2 {
  z0uc=0;
  ‚àÄ node z0uc += pu;
  z0uc /= nbNode;  
  //cout<<"[32m[QCS::setCornerDiv] z0uc="<<z0uc<<"[m"<<endl;
}

‚àÄ cells qcsCalcForce_divergenceAtTheCorner @ 6.3 {
  const ‚Ñï N = nbNode;
  const ‚Ñù¬≥ _pu[4] = {pu[0],pu[1],pu[2],pu[3]};
  const ‚Ñù¬≥ _ex[4] = {ex[0],ex[1],ex[2],ex[3]};
  const ‚Ñù _elen[4] = {elen[0],elen[1],elen[2],elen[3]};
/*  cout<<"[32m[QCS::setCornerDiv] cell #"<<uid<<" nodes: "
      <<xs_cell_node[c+NABLA_NB_CELLS*0]<<","
      <<xs_cell_node[c+NABLA_NB_CELLS*1]<<","
      <<xs_cell_node[c+NABLA_NB_CELLS*2]<<","
      <<xs_cell_node[c+NABLA_NB_CELLS*3]
      <<"[m"<<endl;
  cout<<"[32m[QCS::setCornerDiv] cell #"<<uid<<" faces: "
      <<xs_cell_face[c+NABLA_NB_CELLS*0]<<","
      <<xs_cell_face[c+NABLA_NB_CELLS*1]<<","
      <<xs_cell_face[c+NABLA_NB_CELLS*2]<<","
      <<xs_cell_face[c+NABLA_NB_CELLS*3]
      <<"[m"<<endl;
*/
  ‚àÄ node {
    const ‚Ñï i=(#+N-1)%N; // previous
    const ‚Ñï j=(#);       // current
    const ‚Ñï k=(#+1)%N;   // next
    //cout<<"[32m[QCS::setCornerDiv] i="<<i<<", j="<<j<<", k="<<k<<"[m"<<endl;
    // Velocities and positions
    // 0 = point p
    const ‚Ñù¬≥ up0 = pu;
    const ‚Ñù¬≥ xp0 = px;
    //cout<<"[32m[QCS::setCornerDiv] up0="<<up0<<", xp0="<<xp0<<"[m"<<endl;
    // 1 = edge e2
    const ‚Ñù¬≥ up1 = ¬Ω * (_pu[#] + _pu[k]);
    const ‚Ñù¬≥ xp1 = _ex[j];
    //cout<<"[32m[QCS::setCornerDiv] up1="<<up1<<", xp1="<<xp1<<"[m"<<endl;
    // 2 = zone center z
    const ‚Ñù¬≥ up2 = z0uc;
    const ‚Ñù¬≥ xp2 = zx;
    //cout<<"[32m[QCS::setCornerDiv] up2="<<up2<<", xp2="<<xp2<<"[m"<<endl;
    // 3 = edge e1
    const ‚Ñù¬≥ up3 = ¬Ω * (_pu[i] + _pu[#]);
    const ‚Ñù¬≥ xp3 = _ex[i];
    //cout<<"[32m[QCS::setCornerDiv] up3="<<up3<<", xp3="<<xp3<<"[m"<<endl;
    // compute 2d cartesian volume of corner
    const ‚Ñù cvolume = ¬Ω * cross2D(xp2-xp0, xp3-xp1);
    //c0area = cvolume;
    //cout<<"[32m[QCS::setCornerDiv] c0area="<<c0area<<"[m"<<endl;
    // compute cosine angle
    const ‚Ñù¬≥ v1 = xp3-xp0;
    const ‚Ñù¬≥ v2 = xp1-xp0;
    const ‚Ñù de1 = _elen[i];
    const ‚Ñù de2 = _elen[#];
    ‚Ñù minelen = min(de1, de2);
    //cout<<"[32m[QCS::setCornerDiv] minelen="<<minelen<<"[m"<<endl;
    c0cos = ((minelen < 1.e-12) ?
                 0.0 : 4.0 * dot2D(v1,v2)/(de1*de2));
    //cout<<"[32m[QCS::setCornerDiv] c0cos="<<c0cos<<"[m"<<endl;
    // compute divergence of corner
    c0div = (cross2D(up2-up0, xp3-xp1)-cross2D(up3-up1, xp2-xp0))/(2.0*cvolume);
    //cout<<"[32m[QCS::setCornerDiv] c0div="<<c0div<<"[m"<<endl;
    // compute evolution factor
    const ‚Ñù¬≥ dxx1 = ¬Ω * (xp1+xp2-xp0-xp3);
    const ‚Ñù¬≥ dxx2 = ¬Ω * (xp2+xp3-xp0-xp1);
    const ‚Ñù dx1 = length(dxx1);
    const ‚Ñù dx2 = length(dxx2);
    // average corner-centered velocity
    const ‚Ñù¬≥ duav = 0.25 * (up0+up1+up2+up3);
    const ‚Ñù test1 = fabs(dot2D(dxx1,duav)*dx2);
    const ‚Ñù test2 = fabs(dot2D(dxx2,duav)*dx1);
    const ‚Ñù num = (test1>test2?dx1:dx2);
    const ‚Ñù den = (test1>test2?dx2:dx1);
    const ‚Ñù r = num / den;
    //‚Ñù evol = sqrt(4.0 * cvolume * r);
    const ‚Ñù evol = min(sqrt(4.0*cvolume*r),2.0*minelen);
    // compute delta velocity
    const ‚Ñù dv1 = length2(up1+up2-up0-up3);
    const ‚Ñù dv2 = length2(up2+up3-up0-up1);
    const ‚Ñù du = sqrt(max(dv1, dv2));
    c0evol = (c0div < 0.0 ? evol : 0.);
    //cout<<"[32m[QCS::setCornerDiv] c0evol="<<c0evol<<"[m"<<endl;
    c0du   = (c0div < 0.0 ? du   : 0.);
    //cout<<"[32m[QCS::setCornerDiv] c0du="<<c0du<<"[m"<<endl;
  }
}

// [4.1] Compute the c0rmu (real Kurapatenko viscous scalar)
‚àÄ cells qcsCalcForce_setQCnForce_4_1 @ 6.4 {
  const ‚Ñù gammap1 = qgamma + 1.0;
  ‚àÄ node {
    // Kurapatenko form of the viscosity
    const ‚Ñù ztmp2 = q2 * 0.25 * gammap1 * c0du;
    const ‚Ñù ztmp1 = q1 * zss;
    const ‚Ñù zkur = ztmp2 + sqrt(ztmp2 * ztmp2 + ztmp1 * ztmp1);
    // Compute c0rmu for each corner
    const ‚Ñù rmu = zkur * zrp * c0evol;
    c0rmu = ((c0div > 0.0) ? 0. : rmu);
    //cout<<"[32m[QCS::setQCnForce] c0rmu="<<c0rmu<<"[m"<<endl;
  }
}

// [4.2] Compute the c0qe for each corner
‚àÄ cells qcsCalcForce_setQCnForce_4_2 @ 6.5 {
  const int N = nbNode;
  const ‚Ñù¬≥ _pu[4] = {pu[0],pu[1],pu[2],pu[3]};
  const ‚Ñù _elen[4] = {elen[0],elen[1],elen[2],elen[3]};
  ‚àÄ node {
    const ‚Ñï p1=(#+N-1)%N; // previous
    const ‚Ñï p=(#);        // current
    const ‚Ñï p2=(#+1)%N;   // next
    // Compute: c0qe(1,2,3)=edge 1, y component (2nd), 3rd corner
    //          c0qe(2,1,3)=edge 2, x component (1st)
    c0qe0 = c0rmu * (_pu[p] - _pu[p1]) / _elen[p1];
    //cout<<"[32m[QCS::setQCnForce] c0qe0="<<c0qe0<<"[m"<<endl;
    c0qe1 = c0rmu * (_pu[p2] - _pu[p]) / _elen[p2];
    //cout<<"[32m[QCS::setQCnForce] c0qe1="<<c0qe1<<"[m"<<endl;
  }
}

// [5] Compute the Q forces
// Routine number [5]  in the full algorithm CS2DQforce(...)
// [5.1] Preparation of extra variables
‚àÄ cells qcsCalcForce_setForce_preparationOfExtraVariables @ 6.6 {
  ‚àÄ node {
    const ‚Ñù csin2 = 1.0 - c0cos * c0cos;
    c0w   = ((csin2 < 1.e-4) ? 0. : c0area / csin2);
    //cout<<"[32m[QCS::setForce] c0w="<<c0w<<"[m"<<endl;
    c0cos = ((csin2 < 1.e-4) ? 0. : c0cos);
    //cout<<"[32m[QCS::setForce] c0cos="<<c0cos<<"[m"<<endl;
  }
}
‚àÄ cells qcsCalcForce_setForce_setUpTheForcesOnCorners @ 6.7 {
  const ‚Ñï N = nbNode;
  const ‚Ñù _elen[4] = {elen[0],elen[1],elen[2],elen[3]};
  ‚àÄ face {
    // Edge length for c1, c2 contribution to s
    const ‚Ñù _el = _elen[#];
    const ‚Ñï c10 = #;
    const ‚Ñï c20 = (#+1)%N; // next
    sfq = (c0w[c10]*(c0qe1[c10]+c0cos[c10]*c0qe0[c10])+
           c0w[c20]*(c0qe0[c20]+c0cos[c20]*c0qe1[c20])) / _el;
    //cout<<"[32m[QCS::setForce] sfq="<<sfq<<"[m"<<endl;
  }
}
// Routine number [6] in the full algorithm
‚àÄ cells qcsCalcForce_setVelDiff @ 6.8 {
  const ‚Ñï N = nbNode;
  const ‚Ñù¬≥ _pu[4] = {pu[0],pu[1],pu[2],pu[3]};
  const ‚Ñù¬≥ _px[4] = {px[0],px[1],px[2],px[3]};
  const ‚Ñù _elen[4] = {elen[0],elen[1],elen[2],elen[3]};
  z0tmp=0;
  ‚àÄ node {
    //const ‚Ñï i=(#+N-1)%N; // previous
    const ‚Ñï j=(#);       // current
    const ‚Ñï k=(#+1)%N; // next
    const ‚Ñù¬≥ dx = _px[k] - _px[j];
    const ‚Ñù¬≥ du = _pu[k] - _pu[j];
    //cout<<"[32m[QCS::setVelDiff] dx="<<dx<<", du="<<du<<"[m"<<endl;
    const ‚Ñù lenx = _elen[j];
    const ‚Ñù dux = (lenx > 0. ? fabs(dot2D(du,dx)) / lenx : 0.);
    //cout<<"[32m[QCS::setVelDiff] dux="<<dux<<"[m"<<endl;
    z0tmp = max(z0tmp, dux);
    //cout<<"[32m[QCS::setVelDiff] z0tmp="<<z0tmp<<"[m"<<endl;
  }
  zdu = q1 * zss + 2. * q2 * z0tmp;
  //cout<<"[32m[QCS::setVelDiff] zdu="<<zdu<<"[m"<<endl;
}


‚àÄ cells sumCrnrForce @ 7.0 {
  const ‚Ñï N = nbNode;
  ‚Ñù¬≥ p[4]; ‚àÄ face p[#]=sfp;
  ‚Ñù¬≥ q[4]; ‚àÄ face q[#]=sfq;
  ‚Ñù¬≥ t[4]; ‚àÄ face t[#]=sft;
  ‚àÄ node {
    const ‚Ñï i=(#+N-1)%N; // previous
    cftot = (p[#] + q[#] + t[#]) - (p[i] + q[i] + t[i]);
    cout<<"[32m[QCS::sumCrnrForce] cftot["<<(uid*4+n)<<"]="<<cftot<<"[m"<<endl;
  }
}

‚àÄ nodes sumCornerMassesToPoints @ 8.0{
  pmaswt=0;
  ‚àÄ cell pmaswt+=cmaswt;
  cout<<"[33m[sumCornerMassesToPoints] pmaswt="<<pmaswt<<"[m"<<endl;
}

‚àÄ nodes sumCornerForcesToPoints @ 8.1{
  pf=0;
  //cout<<"[32;1m[sumCornerForcesToPoints] node #"<<n<<"[m"<<endl;
  ‚àÄ cell {
/*    cout<<"[32;1m[sumCornerForcesToPoints] "<<
      " xs_node_cell="<<xs_node_cell[NABLA_NODE_PER_CELL*(n<<WARP_BIT)+c]<<
      " xs_node_cell_corner="<<xs_node_cell_corner[NABLA_NODE_PER_CELL*(n<<WARP_BIT)+c]<<
      " gathered_cell_cftot="<<gathered_cell_cftot
      <<"[m"<<endl;*/
    pf+=cftot;
  }
  cout<<"[33m[sumCornerForcesToPoints] pf="<<pf<<"[m"<<endl;
}
 
// 4a. apply boundary conditions
‚àÄ /*outer*/ nodes applyFixedBC_X @ 9.0 {
  if (px.x!=0.0 && px.x!=LENGTH) continue;
  //cout<<"[37m[applyFixedBC] X p="<<n<<"[m"<<endl;
  const ‚Ñù¬≥ vfixx = ‚Ñù¬≥(1.,0.,0.);
  pu = project(pu, vfixx);
  pf = project(pf, vfixx);
}
‚àÄ /*outer*/ nodes applyFixedBC_Y @ 9.1 {
  if (px.y!=0.0 && px.y!=LENGTH) continue;
  //cout<<"[37m[applyFixedBC] Y p="<<n<<"[m"<<endl;
  const ‚Ñù¬≥ vfixy = ‚Ñù¬≥(0.,1.,0.);
  pu = project(pu, vfixy);
  pf = project(pf, vfixy);
} 

‚àÄ nodes calcAccel @ 10.0 { //(pf, pmaswt, pap, pfirst, plast);
  const double fuzz = 1.e-99;
  pap = pf / max(pmaswt, fuzz);
  cout<<"[37m[calcAccel] pap="<<pap<<"[m"<<endl;
}

// ===== Corrector step =====
// 6. advance mesh to end of time step
‚àÄ nodes advPosFull @ 11.0 { //(px0, pu0, pap, dt, px, pu, pfirst, plast);
  pu = pu0 + pap * dt;
  //cout<<"\t[37m[Hydro::advPosFull] pu0="<<pu0<<"[m"<<endl;
  //cout<<"\t[37m[Hydro::advPosFull] pu="<<pu<<"[m"<<endl;
  px = px0 + 0.5 * (pu + pu0) * dt;
  //cout<<"\t[37m[Hydro::advPosFull] px="<<px<<"[m"<<endl;
}

resetDtHydro @ 12.0 { dtrec = 1.e99; }

// 6a. compute new mesh geometry
‚àÄ cells computeNewMeshGeometry @ 13.0 { // px, ex, zx, sfirst, slast);
  zx=0.0;
  ‚àÄ node zx+=px;
  zx /= nbNode;
  cout<<"[33m[computeNewMeshGeometry] zx["<<c<<"]="<<zx<<"[m"<<endl;
}
‚àÄ faces computeExpBis @ 13.1 {
  ex = 0.0;
  ‚àÄ node ex += px;
  ex /= nbNode;
  assert(nbNode==2);
  //cout<<"[33m[computeExpBis] ex["<<uid<<"]="<<ex<<"[m"<<endl;
}
‚àÄ cells calcVolsBis @ 13.2 { // (px, zx, sarea, svol, zarea, zvol6
  const int N = nbNode;
  const ‚Ñù¬≥ X[4] = {px[0],px[1],px[2],px[3]};
  zvol=0;
  zarea=0; 
  ‚àÄ node {
    const ‚Ñï i=#;
    const ‚Ñï j=(#+1)%N;
    sarea = ¬Ω * cross2D(X[j]-X[i],zx-X[i]);
    svol = ‚Öì* sarea * (X[i].x+X[j].x+zx.x);
    zarea += sarea;
    zvol  += svol;
    //cout<<"[37m[calcVolsBis] sarea["<<uid<<","<<n<<"]="<<sarea<<"[m"<<endl;
  }
  cout<<"\t[33m[calcVolsBis] zvol="<<zvol<<"[m"<<endl;
}

// 7. compute work
‚àÄ cells calcWork @ 14.0 { // sfp, sfq, pu0, pu, pxp, dt, zw, zetot,
  zw=0; 
  const int N = nbNode;
  const ‚Ñù dth = 0.5 * dt;
  //cout<<"[37m[calcWork] dth="<<dth<<"[m"<<endl;
  const ‚Ñù¬≥ _pu[4] = {pu[0],pu[1],pu[2],pu[3]};
  const ‚Ñù¬≥ _pu0[4] = {pu0[0],pu0[1],pu0[2],pu0[3]};
  const ‚Ñù¬≥ _fp[4] = {sfp[0],sfp[1],sfp[2],sfp[3]};
  const ‚Ñù¬≥ _fq[4] = {sfq[0],sfq[1],sfq[2],sfq[3]};
  const ‚Ñù _xp[4] = {pxp[0].x,pxp[1].x,pxp[2].x,pxp[3].x};
  ‚àÄ face { 
    const ‚Ñï j=(#);       // current
    const ‚Ñï k=(#+1)%N;   // next
    /*cout<<"[32m[Hydro::calcWork]"
        <<" p1="<<xs_cell_node[c+NABLA_NB_CELLS*j]
        <<" p2="<<xs_cell_node[c+NABLA_NB_CELLS*k]
        <<"[m"<<endl;*/
    const ‚Ñù¬≥ sftot = _fp[j] + _fq[j];
    //cout<<"[37m[calcWork] sfp="<<_fp[j]<<"[m"<<endl;
    //cout<<"[37m[calcWork] sfq="<<_fq[j]<<"[m"<<endl;
    //cout<<"[37m[calcWork] sftot="<<sftot<<"[m"<<endl;
    const ‚Ñù sd1 = dot2D( sftot, (_pu0[j] + _pu[j]));
    //cout<<"[37m[calcWork] sd1="<<sd1<<"[m"<<endl;
    const ‚Ñù sd2 = dot2D(-sftot, (_pu0[k] + _pu[k]));
    //cout<<"[37m[calcWork] sd2="<<sd2<<"[m"<<endl;
    const ‚Ñù dwork = -dth * (sd1 * _xp[j] + sd2 * _xp[k]);
    //cout<<"[37m[calcWork] dwork["<<(uid*4+f)<<"]="<<dwork<<"[m"<<endl;
    zetot += dwork;
    //cout<<"[37m[calcWork] zetot="<<zetot<<"[m"<<endl;
    zw += dwork;
  }
  cout<<"[37m[calcWork] zw="<<zw<<"[m"<<endl;
}

// 7a. compute work rate
‚àÄ cells calcWorkRate @ 15.0 { //(zvol0, zvol, zw, zp, dt, zwrate, zfirst, zlast);
  const ‚Ñù dtinv = 1. / dt;
  const ‚Ñù dvol = zvol - zvol0;
  zwrate = (zw + zp * dvol) * dtinv;
  cout<<"[37m[calcWorkRate] zwrate="<<zwrate<<"[m"<<endl;
}

// 8. update state variables
‚àÄ cells calcEnergy @ 16.0 { //(zetot, zm, ze, zfirst, zlast);
  const ‚Ñù fuzz = 1.e-99;
  ze = zetot / (zm + fuzz);
  cout<<"\t[37m[Hydro::calcEnergy] ze="<<ze<<"[m"<<endl;
}

‚àÄ cells calcRho @ 17.0 { //(zm, zvol, zr, zfirst, zlast);
  zr = zm / zvol;
  cout<<"\t[37m[calcRho] zr="<<zr<<"[m"<<endl;
}

// 9.  compute timestep for next cycle

‚àÄ cells calcDtCourant @ 19.0 {
  const ‚Ñù fuzz = 1.e-99;
  ‚Ñù dtnew = 1.e99;
  ‚Ñù cdu = max(zdu, max(zss, fuzz));
  ‚Ñù zdthyd = zdl * cfl / cdu;
  //int zmin = -1;
  //zmin = (zdthyd < dtnew ? z : zmin);
  dtnew = (zdthyd < dtnew ? zdthyd : dtnew);
  //cout<<"\t[37m[Hydro::calcDtCourant] dtnew="<<dtnew<<"[m"<<endl;
  if (dtnew < dtrec){
    cout<<"\t[37m[calcDtCourant] dtrec="<<dtrec<<"[m"<<endl;
    dtrec = dtnew;
  }
}
‚àÄ cells calcDtVolume @ 20.0 {
  dvovmax = 1.e-99;
  const ‚Ñù zdvov = fabs((zvol - zvol0) / zvol0);
  //zmax = (zdvov > dvovmax ? z : zmax);
  dvovmax = (zdvov > dvovmax ? zdvov : dvovmax);
  //cout<<"\t[37m[Hydro::calcDtVolume] dvovmax="<<dvovmax<<"[m"<<endl;
}
calcDtVolumeTst @ 20.1 {
  const ‚Ñù dtnew = dt * cflv / dvovmax;
  //cout<<"\t[37m[Hydro::calcDtVolume] dtlast="<<dtlast<<"[m"<<endl;
  //cout<<"\t[37m[Hydro::calcDtVolume] dt="<<dt<<"[m"<<endl;
  //cout<<"\t[37m[Hydro::calcDtVolume] cflv="<<cflv<<"[m"<<endl;
  //cout<<"\t[37m[Hydro::calcDtVolume] dvovmax="<<dvovmax<<"[m"<<endl;
  //cout<<"\t[37m[Hydro::calcDtVolume] dtnew="<<dtnew<<"[m"<<endl;
  if (dtnew < dtrec){
    cout<<"\t[37m[calcDtVolume] dtrec="<<dtrec<<"[m"<<endl;
    dtrec = dtnew;
  }
}

calcDtHydro @ 20.2 {
  cout<<"\t[37m[calcDtHydro] dtrec="<<dtrec<<"[m"<<endl;
}

// End of Hydro::doCycle

incTime @ 30.0 {
  time += dt;
  cout << "\t[35mEnd cycle "  << cycle
       << ", time = "  << time
       << ", dt = "  << dt << "[m"<<endl;
}

tstExit @ 40.0 {
  if (cycle < cstop && time < tstop) return;
  exit;
}
