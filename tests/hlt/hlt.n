///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

cells{ ‚Ñù Œ¥; };
global{ ‚Ñù Œî; };

void gbl_init(void) @ -10.0 {Œî=0;}

‚àÄ cells void std_init(void) @ -10.0 {Œ¥=0;}

‚àÄ cells void std_loop(void) @ 0.5 {Œ¥+=1;}

‚àÄ cells void hlt1_init(void) @ 1.0/1.0 {/*‚Ñù Œ∂,Œ∑ = modf(Œ¥, &Œ∂);Œ¥=Œ∂;*/}
‚àÄ cells void hlt1_loop(void) @ 1.0/2.0 {Œ¥+=0.1;}


‚àÄ cells void hlt2_init(void) @ 1.0/2.5/1.0 {/*Œ¥=0;*/}
‚àÄ cells void hlt2_loop(void) @ 1.0/2.5/2.0 {Œ¥+=0.01;}
‚àÄ cells Œî <?= Œ¥ @ 1.0/2.5/3.0;
void hlt2_exit(void) @ 1.0/2.5/4.0 {
  ‚Ñù Œ∂,Œ∑ = modf(Œî, &Œ∂);
  info()<<"\t\t[31m[hlt2] delta="<<Œî<<"[0m";
  //printf("\n\t\t[1;33mdelta=%.21e, fractional=%.21e[0m",Œî,fractional);
  //if (m_global_Dt.isNearlyEqual(1.44)) exit; // Why not == ?
  if (Œ∑>=0.18){
    info()<<"\t\t[31m[hlt2] EXIT, m_hlt_level="<<m_hlt_level<<"[0m";
    exit;
  }
}


‚àÄ cells Œî <?= Œ¥ @ 1.0/3.0;

void hlt1_exit(void) @ 1.0/4.0 {
  //‚Ñù Œ∂,Œ∑ = modf(Œî, &Œ∂);
  //printf("\n\t[1;33mdelta=%.12e vs %.12e, m_hlt_dive=%d[0m",Œî,1.8,m_hlt_dive);
  //info()<<"[1;33mdelta="<<Œî<<" vs "<<1.8<<", m_hlt_dive="<<m_hlt_dive<<"[0m";
  //if (m_global_Dt.isNearlyEqual(1.8)) exit; // Why not == ?
  info()<<"\t[31m[hlt1] delta="<<Œî<<"[0m";
  if (Œî>=1.2){
    info()<<"\t[31m[hlt1] EXIT, m_hlt_level="<<m_hlt_level<<"[0m";
    exit;
  }
}


void dump(void) @ 3.0 {
  ‚Ñù Œ∂,Œ∑ = modf(Œî, &Œ∂);
  info()<<"[1;33m[dump] delta="<<Œî<<", Œ∂="<<Œ∂<<", Œ∑="<<Œ∑<<"[0m";
  if (Œî>=9.0) exit;
}

void std_exit(void) @ 4.0 {exit;}
