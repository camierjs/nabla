options{
  //Real wtf = -1.0e-15;
  //Bool option_a = true;
  Real option_qqc = 1.0;
};

cells{
  Real α;
  Real sound_speed;
  Real arealg;
  Real vdov;
  //Real αs[4];
  //Real theta[nodes];
};

/*global{
  Int64 mc_vars_seed_cur;
  Int64 array[4];
};
*/
/*void ini(void) @ -10.0{
  inverse(1.0);
  }*/

cells Real inverse(xyz direction, Real ε) in (cell α) {
  //ε=(ε!=0.0)?1.0/α:ε;
  return ε;
  }


/*cells Real calcCourantConstraintForElems(Real dtcourant)
  in (cell sound_speed, cell arealg, cell vdov) {
  const Real qqc2 = 64.0 * option_qqc * option_qqc ;
  const Real dtf = sound_speed * sound_speed ;
  const Real dtfp = √(dtf+((vdov<0.0)?qqc2*arealg*arealg*vdov*vdov:0.0));
  const Real adtfp = arealg/dtfp;
  dtcourant=(vdov!=0.0)?min(dtcourant,adtfp);
  return dtcourant;
  }*/      

/*cells Real calcHydroConstraintForElems(Real dthydro) in (cell vdov){
  const Real denom = 1.e-20+rabs(vdov);
  const Real dtdvov = option_dvovmax / denom;
  const Real dthdr = min(dthydro,dtdvov);
  dthydro=(vdov!=0.0)?dthdr;
  return dthydro;
  }*/

/*
void powOfTwo(void){
  const Real α = 1.0;
  const Real β = α²;
  const Real γ = β³;
  const Real ε = 0;
  ε?=1.0;
  ε<?=1.0;
}
*/
