///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// LOG="-t -v gram.log" m gen1 -B && dot -O -Tsvg gram.dot

//with ℝ;
with ℝ²,cartesian;

//ofstream stream("timing.stream");

/*int a;

void try(void){
  int b;
}
*/

//#include <stdio.h>

//extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")


/*extern int snprintf (char *__restrict __s, size_t __maxlen, const char *__restrict __format, ...)
  __attribute__ ((__nothrow__))
  __attribute__ ((__format__ (__printf__, 3, 4)));
*/


//struct _IO_FILE;
//extern int _IO_getc (_IO_FILE *__fp);
//extern int _IO_putc (int __c, _IO_FILE *__fp);
//extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
//extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,   __gnuc_va_list, int *__restrict);


/*struct _IO_FILE;
typedef struct _IO_FILE FILE;
extern int _IO_getc (_IO_FILE *__fp);
*/

/*struct _IO_marker {
  int *_next;
  int _pos;
# 177 "/usr/include/libio.h" 3 4
};
*/


/*typedef int intt;
typedef struct {
  int __pos;
  int __state;
} _G_fpos_t;
typedef struct {
  _G_fpos_t __pos;
} _G_fpos_tt;
typedef struct _IO_FILE __FILE;
typedef void  * __timer_t;
typedef struct { int val[2]; } __fsid_t;
__timer_t t;
*/


// ****************************************************************************
// αβγδεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ
// ∀ ℝℕℤ ²³√½⅓¼⅛
// ****************************************************************************
 
//FILE *fDot;
options{
  ℝ LENGTH = 1.0;
  ℕ X_EDGE_ELEMS = 4+2;
  ℕ Y_EDGE_ELEMS = 4+2;
  ℝ γ = 1.0;
  //ℕ opt = 1;
  //ℾ tst = true;
};


cells{
  ℝ α;
  ℝ³ center;
//  ℝ^{Nb} β;
//  ℝ^{l(nvx,nvy,nvz),nc} γ;
//  ℝ v;  ℝ e,volo;
};

nodes{ ℝ π;};
faces{ ℝ f;};
//global{  ℝ α_global;};


/*∀ outer west cells tstOuterWest @ 7.2 {
  ∀ outer south face α=α[↑];
  ∀ outer south face α=α[↓];
  }*/

//∀ inner ~east cells innerNotEastCellJob @ -8.7 { α=0.0; }
∀ outer cells one @ -13 { ∀ outer south face α=α[↑];}
//∀ outer cells one @ -14 { ∀ faces α=α[↑]; }
//∀ outer cells two @ -14 { ∀ i faces α=α[↑];}
// Arcane does not like this one yet: ∀ outer cells thr @ -14 { ∀ outer faces α=α[↑]; }

//void ini(void) @ -10.0{}

/*∀ cells void iniCells(void)
  in (cell e,v, node coord)
  out (cell volo) @ 8.0 {
  volo += e*v;
  }*/

/*∀ cells in (cell e,v, node coord) out (cell volo) @ 8.0 {
  volo += e*v;
  }
*/
//∀ cells void blabla(void) @ 8.0 { /*α=0.0;*/ }
//∀ cells cellJob @ 8.0 { /*∀ node α=0.0;*/ }
//∀ cells @ 8.0 { ∀ node α=0.0; }
/*∀ cells try @ 8.0 {
  ∀ faces {
    //const ℝ r=π;
    //const ℝ s=π[#];
    //const ℝ t=π[#+1];
    const ℝ u=α;
    const ℝ u=α[#];
    const ℝ u=α[#+1];
  }
  }*/
//∀ cells @ 8.0 { center=0; ∀ node center+=coord; center/=4.0; }
//∀ cells @ 8.0 { /*∀ node α=0.0;*/ }
//∀ cells @ 8.0 { ∀ n node α=0.0; }
//∀ cells @ 8.0 { ∀ Nb set{ β=0.0;} }

//void resetDtHydro1(void) @ -14.4 { opt = 1.; }
//resetDtHydro2 @ -14.4 { opt = 1.; }

//∀ cells @ 8.0 {volo += (α=1.0)*α_global*β*(e=1.0)*v*α;}


/*∀ nodes void loop(void) in (node u) @ 1.0 {
  unp1 = u - cp*(u-u[n-1]) - cm*(u[+1]-u);
  }*/

//  FILE *f=fopen("temporal.plot","r");
//  fprintf(f,"bla");
//  fclose(f);

/*cells void computeGeometricVolume(void) in (cell cqs, node coord)
  out (cell oldVolume) inout(cell v) @ -3.9,5.0{
  ∀ node τVolume += coord⋅cqs;
  }*/

/*∀ faces void loop(void) in (node u) @ 1.0 {
  if (0==1){}
  if (backCell is own){}
  }*/

//∀ cells α_global <?= α @ 12.11;

