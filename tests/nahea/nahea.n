// NABLA - a Numerical Analysis Based LAnguage

// Copyright (C) 2014 CEA/DAM/DIF
// Jean-Sylvain CAMIER - Jean-Sylvain.Camier@cea.fr

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// See the LICENSE file for details.
with mail;
with gmp, dft, slurm;
//with mathematica;


// ********************************************************
// * options
// ********************************************************
options{
  Integer option_nth_prime = 2;
  Integer option_log_modulo = 4;
  Integer option_tst_tremain = 300;
  Integer option_max_iterations = 1;
};


// ********************************************************
// * variables aux mailles
// ********************************************************
cells{
  Integer i;
  Integer nth;       // the nth of the nth prime number
  Integer inc;       // l'incrément utilisé
  Integer prime;     // the nth prime number
  Real cpuTime;      // Le temps mis pour le résultat
  volatile precise Integer next_prime;
};


// ********************************************************
// * variables globales
// ********************************************************
global{
  Integer meshSize;
  Integer firstIteration;
};


// ********************************************************
// * iniGlobals
// ********************************************************
void iniGlobals(void) @ -1.0{
  //info()<<"sizeof(int)="<<sizeof(int);
  //info()<<"sizeof(double)="<<sizeof(double);
  δt=0.01;
  meshSize=0;
  firstIteration=0;
  if (option_nth_prime<2)
    fatal("iniGlobals", "Option first nth must be >= 2!");
}


// ********************************************************
// * iniCells
// ********************************************************
own cells void iniCells(void) out (cell i, cell prime, cell inc, cell nth) @ -1.0{
  inc=nth=option_nth_prime+uid; // Au début, on set inc à nth à uid pour créer une rampe d'indice
  i=prime=1ul;                  // On flush le rang de l'itérateuret le prime (il faut i==prime)
  //info()<<"inc=nth="<<inc;
}


// ********************************************************
// * iniMeshSize + reduceMeshSize to set meshSize = mesh size
// ********************************************************
own cells Integer iniMeshSize(void) in (cell nth) out (cell meshSize){
  meshSize=max(uid,meshSize);
  return meshSize;
}
void reduceMeshSize(void) @ -0.9{
  meshSize=1+mpi_reduce(ReduceMax,iniMeshSize());
  //info()<<"meshSize="<<meshSize;
}



// ********************************************************
// * iniPrime via GMP
// ********************************************************
own cells void iniPrimeGmp(void) in (cell inc, cell nth) out (cell i, cell prime, cell cpuTime) @ -0.8,2.0{
  int tmp,percent=0;
  if (i!=prime) continue;
  // On flush le rang de l'itérateur
  i=0; 
  mpz_set_ui(next_prime,prime);
  // On utilise la rampe d'indice pour chercher l'ensemble des primes associés
  info()<<"\33[45;30m[iniPrimeGmp] Looking prime for cell #"<<uid<<", nth="<<nth<<"\33[m"; 
  for(int k=0;k<inc;k+=1){
    if (percent != (tmp=(int)((((double)k)/inc)*100.0))){
      printf("\r*I-nahea      \33[45;30m[iniPrimeGmp] %d%%\33[m",percent=tmp);
      fflush(stdout);
    }
    mpz_nextprime(next_prime,next_prime);
  }
  prime=mpz_get_ui(next_prime);
  printf("\n\r");
  info()<<"\33[45;30m[iniPrimeGmp] Setting prime to "<<prime<<"\33[m"; 
  cpuTime=ElapsedTime; // On flush le temps mis pour ce test
}


// ********************************************************
// * continueInit
// ********************************************************
void continueInit(void) @ 0.0{
  firstIteration=GlobalIteration-1;
  info()<<"\33[7;32m[continueInit] Reloading from iteration "<<firstIteration<<"\33[m"; 
}
cells void cellsContinueInit(void) @ 0.0{
  info()<<"\33[7;32m[continueInit] Restoring next_prime="<<prime<<"\33[m";
  mpz_set_ui(next_prime,prime);
}


// ********************************************************
// * lltLaunchWork
// ********************************************************
own cells void lltLaunchWork(void) @ 1.0{
  double seconds = ((double)((int)(1000.0*(ElapsedTime-cpuTime))))/1000.0;
  i += dftLlt(this,prime,i);
  info()<<"\33[32mcell #"<<uid<<", nth="<<nth<<" "<<i<<"/"<<prime<<"\33[m";

  if (i==prime){
    mail()<< "cell #"<<uid<<", nth="<<nth<<" hits prime "<<prime<<" in "<<(seconds);
    warning()<< "\33[41;37mcell #"<<uid<<", nth="<<nth<<" hits prime "<<prime<<" in "<<(seconds)<<"s\33[m";
  }

  if (i==(prime-2))
    info()<<"cell #"<<uid<<", nth="<<nth<<" miss prime "<< prime<<" in "<<seconds<<"s";

  if ((i==prime) || (i==(prime-2))){
    // En boucle de calcule, la rampe étant déjà initialisée,
    // il reste à s'incrémenter du nombre de mailles présentes
    inc=meshSize;
    nth+=meshSize;
    // et on force ceci pour qu'iniPrimeGmp se déclenche
    i=prime;
  }//else info()<<"cell #"<<uid<<", nth="<<nth<<" still running...";
}

 
// ********************************************************
// * testForQuit
// ********************************************************
void testForQuit(void) @ 4.0{
  register Integer tremain, tlimit;
  if (GlobalIteration%option_log_modulo) return;
  tlimit=time limit;
  tremain=time remain;
  info()<<"\33[43;30m#"<<GlobalIteration<<", remaining "
        << tremain << "/" <<tlimit <<"(s)\33[m";
  // Si le temps restant est inférieur à notre borne, on sort
  if (tremain < option_tst_tremain){
    info()<<"\33[43;30m#"<<GlobalIteration<<" now EXITing! ("
          << tremain << "<" <<option_tst_tremain<<"(s))\33[m";
    exit;
  }
  // Pareil si on a atteint le nombre max d'itérations par run
  if (GlobalIteration >= (firstIteration+option_max_iterations)){
    info()<<"\33[43;30m#"<<GlobalIteration<<" now EXITing! ("
          << GlobalIteration << ">=" <<(firstIteration+option_max_iterations)<<")\33[m";
    exit;
  }
}

