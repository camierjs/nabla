///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
// This NABLA port is an implementation of the NDSPMHD software
// checks (user defined) setup of primitive quantities for errors
void check_setup_ini(void) @ -107.0{
  info()<<"[1;33mChecking setup...[m";
  global_xcentre=Real3(0.0,0.0,0.0);
  global_sum_pmass=0.0;
}

âˆ€ particles void particle_check_setup(void) @ -106 {
  // check for negative densities/thermal energies
  if (dens<tiny(dens)) fatal("particle_check_setup", "density <= 0");
  if (pmass<tiny(pmass)) fatal("particle_check_setup", "pmass <= 0");
  if (uu<0.0) fatal("particle_check_setup", "u < 0.0");
  if (hh<0.0) fatal("particle_check_setup", "h < 0.0");
  global_xcentre = global_xcentre+pmass*r;
}


âˆ€ particles void checkForParticlesOutsideTheBoundary(void) @ -106 {
  if (r.x > global_xmax.x) fatal("Error:","r.x > global_xmax.x");
  if (r.y > global_xmax.y) fatal("Error:","r.y > global_xmax.y");
  if (r.z > global_xmax.z) fatal("Error:","r.z > global_xmax.z");
  
  if (r.x < global_xmin.x) fatal("Error:","r.x > global_xmin.x");
  if (r.y < global_xmin.y) fatal("Error:","r.y > global_xmin.y");
  if (r.z < global_xmin.z) fatal("Error:","r.z > global_xmin.z");
}


void centreOfMassIsAt(void) @ -105.0{
  info()<<"[1;33m-> centre of mass is at "<<global_xcentre<<"[m";
}


/*
particles void setupAdditionalQuantitiesThatAreNotDoneInSetup(void) @ -104 {
  if (option_iavlimx>0) alpha.x = 1.0;
  else alpha.x = alphamin;
  alpha.y = alphaumin;
  alpha.z = alphaBmin;
  gradh = 1.0;
  divB = 0.0;
  curlB = 0.0;
  fmag = 0.0;
  if (iprterm != 11) psi = 0.0;
  sqrtg = 1.0;
  if (imhd==0){
    Bfield = 0.0; // zero mag field if turned off
    Bevol = 0.0;
  }
  rhomin = 0.0;
  info()<<"rhomin="<<rhomin;
  info()<<"particle mass = "<<pmass;
}
*/
// if using fixed particle boundaries, set them up
//  if (any(ibound.eq.1)) call set_fixedbound
