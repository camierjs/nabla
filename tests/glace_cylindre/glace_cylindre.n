#include "assert.h"

// Options Hydro-Glace Euler/Sans reconstruction
options{
  Bool option_glace = true;
  Bool option_chic = false;
  Real Œ≥ = 1.4;
  Bool option_test_sod = true;  
  Bool option_quads = false;  
  Bool option_triangles = false;
  Bool option_hexa = true;
  Bool option_cylinder = false;
  Real option_x_interface = 0.5;
  Real option_x_min = 0.0;
  Real option_y_min = 0.0;
  Real option_z_min = 0.0;
  Real option_x_max = 1.0;
  Real option_y_max = 1.0;
  Real option_z_max = 1.0;
  Real option_Œ¥t_ini = 0.0001;
  Real option_Œ¥t_min = 1e-12;
  Real option_Œ¥t_max = 0.01;
  Real option_Œ¥t_end = 0.01;
  Real option_Œ¥t_control = 0.9;            // Contr√¥le du pas de temps hydrodynamique
  Real option_Œ¥t_min_variation = 0.99;     // D√©croissance maximale tol√©r√©e du pas de temps
  Real option_Œ¥t_max_variation = 0.10;     // Amplitude maximale de croissance du pas de temps
  Bool option_Œ¥t_last_exact = true;
  Integer option_max_iterations = 1024;
  Real option_ini_zg_œÅ = 1.0;
  Real option_ini_zd_œÅ = 0.125;
  Real option_ini_zg_p = 1.0; 
  Real option_ini_zd_p = 0.1;
  Real option_u_ini = 0.0;
};

// D√©claration des variables aux faces
faces{
  Real3 face_normales[nodes];               // Pour Chic
  Real3 faces_oriented_areas[nodes];
  };

// D√©claration des variables aux noeuds
nodes{
  Bool    node_x_min_max;
  Bool    node_got_tgt;
  Real3   node_tangent;
  Real3   node_u;                          // Vitesse nodale du maillage
  Real3x3 node_u_matrix;                   // Matrice aux sommets pour le calcul de la vitesse
  Real3   node_u_second_member;            // Second membre aux sommets pour le calcul de la vitesse
};

// D√©claration des variables aux mailles
cells{  
  Real ZG;                                 // Group ZG
  Real ZD;                                 // Group ZD
  Real m;                                  // Masse
  Real V;                                  // Volume des mailles
  Real œÅ;                                  // Densit√©s
  Real p;                                  // Pression
  Real3 u;                                 // Vitesse moyenne
  Real c;
  //Real S;                                  // Surface de la maille
  Real glace_Œ¥t;
  Real absCQs[nodes];
  Real3 CQs[nodes];                        // R√©sultantes aux sommets
  Real3x3 AQs[nodes];                      // Matrices de contributions aux sommets
  Real œÅŒï;                                 // √ânergie massique
  Real ŒπŒï;                                 // √ânergie interne
  Real3 reconstructed_u[nodes];            // Tableau des vitesses reconstruites
  Real reconstructed_p[nodes];             // Tableau des pressions reconstruites
  Real3 momentum_fluxes_Œ£;
  Real total_energy_fluxes_Œ£;
  Real Œª;                                  // Œª g√©om√©trique utilis√© pour retrouver Godunov 1D
};

// ****************************************************************************
// * Partie d'initialisation ]-‚àû,-0.0[
// ****************************************************************************

void hydroInit(void) @ -25.0{
  Œ¥t=option_Œ¥t_ini;
  assert(option_triangles^option_quads^option_hexa^option_cylinder);
}

cells void cellHydroMaterialInitZone(void) @ -25.0{
  Real3 centre; 
  Œª=1.0;
  foreach node centre+=coord;
  centre/=nbNode;
  // On regarde si le centre de la maille est √† G ou D de la fronti√®re
  if ((option_test_sod && (centre.x < option_x_interface))
      ||(!option_test_sod && (centre.abs() < option_x_interface))){
    œÅ=option_ini_zg_œÅ;
    p=option_ini_zg_p;
    ZG=p;
  }else{
    œÅ=option_ini_zd_œÅ;
    p=option_ini_zd_p;
    ZD=p;
  }
}

cells void cellIniMassCompute(void) @ -19.0 {
  c=0.0;
  u = 0.0;
  m = œÅ*V;
}

cells void iniEOS(void) @ -18.0{
  œÅŒï = p/((Œ≥-1.0)*œÅ);
}

nodes void flushNodeGroups(void)@-18.0{
  //node_u=0;
  node_x_min_max=false;
}

outer nodes void iniNodeGroups(void)@-17.0{
  //if (!(coord.x==option_x_min || coord.x==option_x_max)) continue;
  if (coord.x<=(option_x_min+0.01) || coord.x>=(option_x_max-0.01))
    node_x_min_max=true;
}

// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+‚àû[ 
// ****************************************************************************

cells void temporalScheme_spatialScheme_GLACE_computeAQsMatrices(void) @ 9.0 if (option_glace){ // 18%
  const Real œÅc = Œª*œÅ*c;
  foreach node{
    AQs = CQs‚äóCQs;
    AQs *= œÅc/absCQs;
  }
}
cells void temporalSchemeReconstructPressure(void) @ 10.0{
  foreach node reconstructed_p=p;
}

cells void temporalSchemeReconstructVelocity(void) @ 10.0{
  foreach node reconstructed_u=u;
}

nodes void temporalSchemeIniMatricesAndSecondMember(void) @ 11.0{
  node_u_matrix=Real3x3(Real3(0,0,0),
                        Real3(0,0,0),
                        // .Z √† mettre √† 0.0 dans le cas 3D!
                        Real3(0,0,0));
//#warning 3D Real3(0,0,1));
  //Real3(0,0,1));
  node_u_second_member=0;//Real3(0,0,0);
}

cells void temporalSchemeAssembleMatricesAndSecondMember(void) @ 12.0{ // 16%
  foreach node{
    const Real3x3 local_matrix = AQs;
    node_u_matrix += local_matrix;
    node_u_second_member += local_matrix ‚®Ç reconstructed_u;
    node_u_second_member += CQs*reconstructed_p;
  }
}

void eieioNode_u_matrix_second_member(void)@ 13.4{
  synchronize(node_u_matrix);
  synchronize(node_u_second_member);
}

nodes void temporalSchemeComputeNodesVelocity(void) @ 14.0{ // 11%
  const Real determinent = math::matrixDeterminant(node_u_matrix);
  node_u_matrix = math::inverseMatrix(node_u_matrix, determinent);
  node_u = node_u_matrix ‚®Ç node_u_second_member;
//#warning 3D node_u.z=0.0;
  //node_u.z=0.0;
}
  
cells void temporalSchemeIniFluxesSum(void) @ 15.0{
  momentum_fluxes_Œ£=total_energy_fluxes_Œ£=0.0;
}
cells void temporalSchemeComputeStandardFluxesSum(void) @ 16.0{ // 14%
  foreach node{
    const Real3 Œîu = reconstructed_u-node_u;
    Real3 FQs = AQs ‚®Ç Œîu;
    FQs += reconstructed_p*CQs;
    momentum_fluxes_Œ£ -= FQs;
    total_energy_fluxes_Œ£ -= FQs‚ãÖnode_u;
  }
}

cells void temporalSchemeApplyFluxesStandard(void) @ 19.0{
  u += Œ¥t*momentum_fluxes_Œ£/m;
  œÅŒï += Œ¥t*total_energy_fluxes_Œ£/m;
}

nodes void temporalSchemeMoveNodes(void) @ 22.0{
  coord += Œ¥t*node_u;
}
/*#warning Still ReMaxMin
nodes void temporalSchemeMoveNodesReMaxMin(void) @ 23.0{
  if (coord.x<=option_x_min) coord.x=option_x_min;
  if (coord.x>=option_x_max) coord.x=option_x_max;
  }*/

cells void updatePhysicalDensity(void)
  in (cell m, cell V) out (cell œÅ) @ 26.0{
  œÅ = m/V;
}

cells void computeTotalInternalEnergyFromTotalEnergy(void) @ -16.0,26.0{
  ŒπŒï = œÅŒï-¬Ω*u.abs2();
}

cells void updateTotalPressure(void) @ 27.0{
  p=(Œ≥-1.0)*œÅ*ŒπŒï;
}

cells void updateTotalPressureZgZd(void) @ 28.0{
  Real3 centre; 
  foreach node centre+=coord;
  centre/=nbNode;
  // On regarde si le centre de la maille est √† G ou D de la fronti√®re
  if ((option_test_sod && (centre.x < option_x_interface))
      ||(!option_test_sod && (centre.abs() < option_x_interface))){
    ZG=p;
  }else{
    ZD=p;
  }
}

cells void computeTotalSoundSpeed(void) @ -18.0,28.0{
  c=‚àö(Œ≥*p/œÅ);
}




cells Real hydroTimeStepCtrlCells(Real local_Œ¥t){ // 8%
  Real Œ£ljr=0.0;
  foreach node Œ£ljr+=absCQs;
  glace_Œ¥t=2.0*Œª*V/(c*Œ£ljr);
  if(glace_Œ¥t<local_Œ¥t)
    local_Œ¥t = min(local_Œ¥t,glace_Œ¥t);
  return local_Œ¥t;
}
void hydroTimeStepCtrl(void) @ 35.0{
  Real local_Œ¥t=hydroTimeStepCtrlCells(MAXFLOAT);
  Real new_Œ¥t=option_Œ¥t_control*mpi_reduce(ReduceMin, local_Œ¥t);
  { // on calcule les variations min et max autoris√©es
    const Real max_time_step = (1.0+option_Œ¥t_max_variation)*Œ¥t;
    const Real min_time_step = (1.0-option_Œ¥t_min_variation)*Œ¥t;
    if (new_Œ¥t > max_time_step) new_Œ¥t=max_time_step;
    if (new_Œ¥t < min_time_step) new_Œ¥t=min_time_step;
  }
  new_Œ¥t = min(new_Œ¥t, option_Œ¥t_max);
  new_Œ¥t = max(new_Œ¥t, option_Œ¥t_min);
  // le dernier calcul se fait exactement au temps final
  if (option_Œ¥t_last_exact && ((time + new_Œ¥t) > option_Œ¥t_end)) 
      new_Œ¥t = option_Œ¥t_end - time;
  if ((time>=option_Œ¥t_end) || (new_Œ¥t==0.0)) exit;
  Œ¥t=new_Œ¥t;
  info()<<"[1;32m final Œ¥t="<<Œ¥t<<"[0m";
  if (option_max_iterations!=0 && GlobalIteration >= option_max_iterations) exit;
}
