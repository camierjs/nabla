with ℝ, ℵ;
//export NABLA_LAMBDA_ALEPH_DEBUG=1

// αβγδδδεεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ
// ∀
// ℝℕℤ
// ²³√½⅓¼⅛

//ofstream output("schema1.plot");


// ****************************************************************************
// * Options
// ****************************************************************************
options{
  ℝ xmin = 0.0;
  ℝ xmax = 1.0; // A mettre à jour en mleme temps dans le Makefile.nabla.okina
  
  ℝ σ=1.0;
  ℝ τ =1.0;    
  ℝ ε = 0.1;   
  ℝ CFL =2.0;

  // Yet required options for Okina 
  ℝ option_δt_initial = 0.0001;
  ℝ option_stoptime=0.2;
  ℕ option_max_iterations = 32768;   // ! utilisé en dur dans les backends

  // Options d'Aleph
  ℝ alephEpsilon          = 1.e-14;
  ℕ alephUnderlyingSolver = 2;
  ℕ alephMaxIterations    = 16384;
  // DIAGONAL=0, AINV=1, AMG=2, IC=3, POLY=4, ILU=5, ILUp=6,
  // SPAIstat=7, SPAIdyn=8, DDMCriteriaAdaptedSelector=9, NONE=10
  ℕ alephPreconditionerMethod = 2;
  // PCG=0, BiCGStab=1 , BiCGStab2=2, GMRES=3, SAMG=4, QMR=5, SuperLU=6
  ℕ alephSolverMethod     = 3; 
  ℕ alephNumberOfCores    = 0;
  Bool option_aleph_dump_matrix = true;     
};

// **************************************************************************
// * Node Variables
// ****************************************************************************
cells{  
  ℝ cU,cP,cT;
  ℝ cp1P, cp1U, cp1T;
  ℝ center;
  ℝ cV,cW;
};


// ****************************************************************************
// * Cell Variables
// ****************************************************************************
nodes{
  ℝ nU,nV,nW,nT;
};


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ℝ δx;
};

// ****************************************************************************
// * Initialization Part @ ]-∞,-0.0[
// ****************************************************************************

void iniGlobals(void) @ -5.0{
  δx=(xmax-xmin)/X_EDGE_ELEMS;
  δt=ε*CFL*δx;
  printf("\n\t\t\33[7m[iniGlobals] δx=%f\33[m", (double)δx);
  printf("\n\t\t\33[7m[iniGlobals] δt=%f\33[m", (double)δt);
  assert(δt>=0.0);
  srand48(0xDEADBEEFul);
}


// ****************************************************************************
// * Compute loop @ ]+0,+∞[
// ****************************************************************************
void dbgLoop(void) @ 1.0 {
  printf("\n\33[7m[Loop] #%d, time=%f\33[m", iteration,time);
}


// ****************************************************************************
// * Test for Quit & Dump Solution Found
// ****************************************************************************
void tstForQuit(void) @ 4.0 {
  printf("\n\t[testForQuit] iteration=%d, time=%f, delta_t=%f",
         iteration, time,(double)δt);
  //if ((time<(option_stoptime-δt))) return;
  exit;
}


