
#include "math.h"


//Test 1 for linear advection (smooth data)
 ℝ U_condlimi(ℝ x,ℝ t){
   return epsilon;    
}

  
// Test 2 for linear  advection (discontinuous data)

ℝ P_condlimi(ℝ x,ℝ t)
{
  return  erf(x/sqrt(2*t));
}
      
     
  
 

ℝ T_condini(ℝ x){
  return 1.5;//;
}
  


  
ℝ P_condini(ℝ x,ℝ t){   
  return 0.5 ;
  
}

ℝ U_condini(ℝ x,ℝ t){
  return epsilon; //(x+1)*exp(-sigma*t);}
}    
  
 
  



ℝ f_sigma(ℝ x){
  return 1;
  // if (x<=0.5-δx*0.5) return 1;
  //if (x>=0.5) return 2;
  // assert(false);// Jamais on doit passer par ici
  // return 0.0;
}


/*ℝ analytics(ℝ t,ℝ x,ℝ y){

 
  
  if (t²-(x-y)²<0.000001)
    return 0.5*Heaviside(t-fabs(x-y))*t*exp(-t);

 
  
  else 
    return t*exp(-t)*BESSI(1,sqrt(t²-(x-y)²))* Heaviside(t-fabs(x-y))/(sqrt(t²-(x-y)²));
}


   



ℝ analytics1(ℝ t,ℝ x,ℝ y)
{
  ℝ S ;
  S=0;
  
 double  w[5], yi[5];
  w[0] =0.5688888888888889;   yi[0]= 0.0000000000000000;
  w[1] =0.4786286704993665;   yi[1]= -0.5384693101056831;
  w[2] =0.4786286704993665;   yi[2]= 0.5384693101056831;
  w[3] = 0.2369268850561891;  yi[3]=-0.9061798459386640;
  w[4] = 0.2369268850561891;  yi[4] = 0.9061798459386640;


  for (int i=1; i<=N; i++)
    {
      for (int k=0; k < 4;k++)
        {
        
          S+=0.5*w[k]*analytics((t*(2.*i-1+ yi[k]))/(2.*N_i),x,y)*(t/N);
        }
        
     
    }
   
    
  return S ;
  }

ℝ analytics2(ℝ t,ℝ x,ℝ y)
{
  return analytics1( t, x, y) + exp(-fabs(x-y))*Heaviside(t-fabs(x-y));

}   

ℝ analytics3(ℝ t,ℝ x)
{
  ℝ S ;
  S=0;
   double  w[5], yi[5];
  w[0] =0.5688888888888889;   yi[0]= 0.0000000000000000;
  w[1] =0.4786286704993665;   yi[1]= -0.5384693101056831;
  w[2] =0.4786286704993665;   yi[2]= 0.5384693101056831;
  w[3] = 0.2369268850561891;  yi[3]=-0.9061798459386640;
  w[4] = 0.2369268850561891;  yi[4] = 0.9061798459386640;



    for (int i=1; i<=N_i; i++)
    {
      for (int k=0; k < 5;k++)
        {
        
          S+=0.5*w[k]*analytics2(t,x,((2*i-1+ yi[k]))/(2.*N_i)+4.5);
        }
      
     
        }
  
    S*=1./N_i;
  return S ;
  }
 




// ****************************************************************************
// * fonction Heaviside
// ****************************************************************************

ℝ Heaviside(ℝ x)
{
  if (x>=0)
    return 1 ;
  else
    return 0;
}
// ****************************************************************************
// * fonction dirac
// ****************************************************************************





ℝ source1(ℝ x)
{
  if (x<5.5 && x>4.5)
    return 1 ;
  else
    return 0;
}


*/
ℝ F_sigma(ℝ x)
{
  
  return x;   
  }
