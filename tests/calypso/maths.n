///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////


// ****************************************************************************
// * Constants
// ****************************************************************************
const ‚Ñù RME = 6367449.0;     // Earth's average meridional radius
const ‚Ñù DEG2RAD = acos(-1.0)/180.0;
const ‚Ñù DEG2M = RME*DEG2RAD; // Coefficient to convert degrees to meters


// ***************************************************************************
// * Conversions
// ***************************************************************************
‚Ñù deg_to_rad(‚Ñù deg){ return deg*DEG2RAD; }

‚Ñù lat_to_m(‚Ñù _dy_lat){ return _dy_lat*DEG2M; }

‚Ñù lon_to_m(‚Ñù _dx_lon, ‚Ñù _y_lat){ return _dx_lon*DEG2M*cos(_y_lat*DEG2RAD); }


// ***************************************************************************
// * Dump
// ***************************************************************************
void dumpIJ(const double *data, const int im, const int iMax, const int jm, const int jMax){
  printf("\n[33m");
  for(int j=jm;j<jMax;j+=1){
    printf("[");
    for(int i=im;i<iMax;i+=1){
      const double value=data[j*X_EDGE_ELEMS+i];
      if (value>=0.0)
        printf(" %.12f",value);
      else
        printf("-%.12f",-value);
    }
    printf("]%c",j!=(jMax-1)?'\n':' ');
  }
  printf("[m");
}

void      dump(const double *data) {dumpIJ(data,0,X_EDGE_ELEMS,0,Y_EDGE_ELEMS);}
void innerDump(const double *data) {dumpIJ(data,1,X_EDGE_ELEMS-1,1,Y_EDGE_ELEMS-1);}


// ***************************************************************************
// * Fill
// ***************************************************************************
void fill(double *m) {
  //printf("\n[1;37mfill!!![m");
  for(int j=1;j<=Y_EDGE_ELEMS;j+=1){
    for(int i=1;i<=X_EDGE_ELEMS;i+=1){
      double data = 0.0;
      data =  i/1.e1+i/1.e2+i/1.e3+i/1.e10+i/1.e11+i/1.e12;
      data += j/1.e4+j/1.e5+j/1.e6+j/1.e7+j/1.e8+j/1.e9;
      //data = -data;
      m[(j-1)*X_EDGE_ELEMS+i-1]=data;
    }
  }
}
