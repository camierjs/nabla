///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñù¬≤,cartesian;

// ****************************************************************************
// * Definitions & Enumerations
// ****************************************************************************
#define MAX_INLET_NB 9201
enum{SOUTH,EAST,NORTH,WEST};

// ****************************************************************************
// * Physical Constants
// ****************************************************************************
const ‚Ñù GZ = 9.81;           // AccelerationDueToGravity is 9.80665 m/s¬≤

// ****************************************************************************
// * Options
// ****************************************************************************
options{
  ‚Ñï NX                    = 64;      // Number of inner X cells
  ‚Ñï NY                    = 48;      // Number of inner Y cells
  ‚Ñù LENGTH                = 1.0;
  ‚Ñï X_EDGE_ELEMS          = NX+2;    // Inner + Fictitious X cells
  ‚Ñï Y_EDGE_ELEMS          = NY+2;    // Inner + Fictitious Y cells
  ‚Ñù option_stoptime       = 60.0;
  ‚Ñï option_max_iterations = 8;
  ‚Ñù option_eps_fp         = 1.0/‚àû;
  ‚Ñù option_epsd           = 1.0e-9;
  ‚Ñù option_time_step      = 0.0025;
  ‚Ñù option_cfl_max        = 0.25;
  ‚Ñæ option_fill           = true;
  ‚Ñæ option_debug          = false;
  ‚Ñæ option_arcane         = false;
};

// ****************************************************************************
// * Cells
// ****************************************************************************
cells{
  ‚Ñù x,dx;
  ‚Ñù y,dy;
  ‚Ñù z,d,d_hn; // depth
  ‚Ñù h,hn,hnp; // height
  ‚Ñù un,unp;   // velocity X
  ‚Ñù vn,vnp;   // velocity Y
  ‚Ñù deqh,deqh_dx,deqh_dy;
  ‚Ñù coef_gradx_h,coef_grady_h;
  ‚Ñù fc;       // Coriolis force
};

faces{
  ‚Ñï fid;
};

// ***************************************************************************
// * Globals
// ***************************************************************************
global{
  //‚Ñï idx;
  ‚Ñù inv_dx,inv_dy;
  ‚Ñù xmin,xmax;
  ‚Ñù ymin,ymax;
  ‚Ñù hmax_bound,hmax,hmax0;
  ‚Ñù dmax,dxmax,inv_dx_max,dymax,inv_dy_max;
  ‚Ñù umax,umin,vmax,vmin;
  ‚Ñù cfl;
  ‚Ñù dx_lon, dy_lat;
  ‚Ñù dxy_min;
  ‚Ñï chkH,chkU,chkV;
};
double inlet[MAX_INLET_NB];


// ***************************************************************************
// * Initialisation part
// ***************************************************************************
//‚àÄ nodes @ -40 if (option_arcane) {info()<<"[33m[ini] node["<<uid<<"] @ "<<coord<<"[m";}
//‚àÄ cells @ -40 if (option_arcane) { x=0; ‚àÄ nodes x += coord.x; x*=¬º;}
//‚àÄ cells @ -40 if (option_arcane) { y=0; ‚àÄ nodes y += coord.y; y*=¬º;}
//‚àÄ cells @ -40 if (option_arcane) { z=-drand48();}
/*‚àÄ faces @ -40 if (option_arcane) {
  fid=uid;
  info()<<"[32m[face_node] face #"<<uid<<"[m";
  ‚àÄ node{
    info()<<"\t[32m[face_node] "<<coord<<"[m";
  }
}*/
/*‚àÄ cells tst @ -40 if (option_arcane) {
  info()<<"[32m[cell_face] cell #"<<uid<<"[m";
  ‚àÄ north face{
    info()<<"\t[32m[face] "<<fid<<", index="<<f.index()<<"[m";
  }
}*/
//‚àÄ outer cells @ -40 { info()<<"[32m[outerCells] cell #"<<uid<<"[m";}
//‚àÄ inner cells innerCells @ -40 { info()<<"[31m[inner] cell #"<<uid<<"[m";}
//‚àÄ inner east cells innerEast @ -40 { info()<<"[35m[inner east] cell #"<<uid<<"[m";}
//‚àÄ inner south cells innerSouth @ -40 { info()<<"[36m[inner south] cell #"<<uid<<"[m";}
//‚àÄ inner north cells innerNorth @ -40 { info()<<"[37m[inner north] cell #"<<uid<<"[m";}

//‚àÄ outer south cells outerSouth @ -40 { info()<<"[31m[outer south] cell #"<<uid<<"[m";}
//‚àÄ outer west cells outerWest @ -40 { info()<<"[35m[outer west] cell #"<<uid<<"[m";}
//‚àÄ outer north cells outerNorth @ -40 { info()<<"[36m[outer north] cell #"<<uid<<"[m";}
//‚àÄ outer east cells outerEast @ -40 { info()<<"[37m[outer east] cell #"<<uid<<"[m";}
//‚àÄ outer ~west cells outerOtherThanWest @ -40 { info()<<"[31m[outer ~west] cell #"<<uid<<"[m";}
//exitHere @ -39 {exit;}

// netcdf @ -20.0

// read_water_inlet @ -20.0

‚àÄ cells @ -19 {d=-z;}

‚àÄ cells xmin <?= x @ -17;
‚àÄ cells xmax >?= x @ -17;
‚àÄ cells ymin <?= y @ -17;
‚àÄ cells ymax >?= y @ -17;

dxLon @ -15 {
  //info()<<"xmax="<<xmax<<", xmin="<<xmin;
  dx_lon = (xmax-xmin)/(NX-1);}
dyLat @ -15 {
  //info()<<"ymax="<<ymax<<", ymin="<<ymin;
  dy_lat = (ymax-ymin)/(NY-1);
}

‚àÄ cells geogr_to_cart_dx @ -13 { dx = lon_to_m(dx_lon,y);}
‚àÄ cells geogr_to_cart_dy @ -13 { dy = lat_to_m(dy_lat);}

‚àÄ cells dxmax >?= dx @ -11;
‚àÄ cells dymax >?= dy @ -11;

‚àÄ cells ini_inv_dx @ -11 { assert(dx>0); inv_dx = 1.0/dx; }
‚àÄ cells ini_inv_dy @ -11 { assert(dy>0); inv_dy = 1.0/dy; }

‚àÄ cells ini_coef_gradx_h @ -11 { coef_gradx_h = option_time_step*GZ/dx; }
‚àÄ cells ini_coef_grady_h @ -11 { coef_grady_h = option_time_step*GZ/dy; }

‚àÄ cells space_scheme_init_coriolis @ -11 {
  const ‚Ñù PI = acos(-1.0);
  const ‚Ñù T_SIDEREAL = 86164.1;
  const ‚Ñù Œ©T = 2.0*PI/T_SIDEREAL;
  const ‚Ñù dŒ©t = 2.0*Œ©T;
  fc = dŒ©t * sin(deg_to_rad(y));
}

time_scheme_cfl @ -7.0 {
  const ‚Ñù cgmax = ‚àö(GZ*(dmax+hmax0));
  const ‚Ñù cumax = fmax(fabs(umax),fabs(umin))+cgmax;
  const ‚Ñù cvmax = fmax(fabs(vmax),fabs(vmin))+cgmax;
  inv_dx_max = 1.0/dxmax;
  inv_dy_max = 1.0/dymax;
  Œ¥t=option_time_step;
  cfl = fmax(Œ¥t*cumax*inv_dx_max, Œ¥t*cvmax*inv_dy_max);
  //info()<< "[33m[time_scheme_cfl] cfl="<<cfl<<"[m";
  /*if (!option_arcane)*/ assert(Œ¥t<cfl);
  dxy_min = 1.0/fmax(inv_dx_max,inv_dy_max);
}


// ***************************************************************************
// * Compute loop
// ***************************************************************************

model_iterate @ 0.0 if (!(iteration%1024)) {
  printf("\n[1;35m[ %d ] t=%.5fs, hmax = %0.11f[m",iteration,time,hmax);
}


// ***************************************************************************
// * Quit test
// ***************************************************************************
quit @ 10.0 if (iteration==option_max_iterations) { exit; }

