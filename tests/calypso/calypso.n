///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñù¬≤,cartesian;

// ****************************************************************************
// * Constants
// ****************************************************************************
#define MAX_INLET_NB 9201
const ‚Ñù DEG2RAD = acos(-1.0)/180.0;
const ‚Ñù RME = 6367449.0; // Earth's average meridional radius
const ‚Ñù DEG2M = RME*DEG2RAD; // Coefficient to convert degrees to meters

// ****************************************************************************
// * Options
// ****************************************************************************
options{
  ‚Ñù LENGTH = 1.0;
  ‚Ñï X_EDGE_ELEMS = 4+2;
  ‚Ñï Y_EDGE_ELEMS = 4+2;
  ‚Ñù option_stoptime = 1.0;
  ‚Ñï option_max_iterations = MAX_INLET_NB;

  // Config
  ‚Ñï verbosity           = 5;
  ‚Ñù time_of_simulation  = 60.0;   // time of simulation
  ‚Ñù start_time          = 0.0;    // start time
  ‚Ñï space_scheme_order  = 1;      // the order of the space scheme (for each grid)
  ‚Ñù time_step_to_output = 60.0;   // time step to output grids
  ‚Ñï number_of_grids     = 1;      // number of grids
  ‚Ñù time_step           = 0.0025; // time step (for each grid)
  ‚Ñù epsd                = -1;     // minimum water depth computed (for each grid)
  ‚Ñù epshd               = 1.0e-9; // minimum water thickness computed (for each grid)
  ‚Ñù dcut                = 0.0;    // depth thresold from which the seabottom is flatten
  ‚Ñï west_bound          = 1;      // code of the west boundary condition
  ‚Ñï east_bound          = 3;      // code of the east boundary condition
  ‚Ñï north_bound         = 3;      // code of the north boundary condition
  ‚Ñï south_bound         = 3;      // code of the south boundary condition
  ‚Ñù time_step_of_gages  = 0.05;   // time step of gages
  ‚Ñù eps_fp              = 0.235853e-152; // 
  ‚Ñù eps_io              = 1.0e-9; // 

  // Configuration
  ‚Ñù GZ = 9.81;                 // standard acceleration due to gravity
  ‚Ñù PI = acos(-1.0);           // pi constant
  ‚Ñù DT_STD_OUT = 2.0;          // time step between two standard output
  ‚Ñù DT_CK_EXP = 2.0;           // time step between two checkings of explosion
  ‚Ñù FILL_VALUE = -999999.0;    // fill value for netcdf files
  ‚Ñù H_MAX = 500.0;             // maximum water height before considering explosion

  // for each grid
  ‚Ñæ do_two_ways_interp = false;
  ‚Ñæ is_runup = false;          // is there run-up ? (for each grid)
  ‚Ñæ is_boussinesq = false;     // is it Boussinesq resolution ? (for each grid)
  ‚Ñæ do_init_source = false;    // do source initialization
  ‚Ñï hldg_grid_id = -1;         // holding grid identification (for each grid)

  // Private attributes
  ‚Ñæ is_output_velocities = false;
  ‚Ñæ output_velocities = false; // deprecated parameter -> use output_types instead
  ‚Ñæ is_master_proc = true;     // is it the master process ?
  ‚Ñæ is_parallel = false;       // is it a parallel run?
  ‚Ñï grid_id=-1;                // grid identification
  ‚Ñï grids_call_init_seism = 0; // list of grids calling initializing with the source
  ‚Ñæ is_forced_bound = true;
  ‚Ñù cfl_max = 0.25; // LEAPFROG_CFL_MAX maximum value of CFL
};

// ****************************************************************************
// * Cells
// ****************************************************************************
cells{
  ‚Ñù x,dx,xg,y,dy,yg,z;
  ‚Ñù hn,hnp; // the water height matrix, h^(n+1) matrix
  ‚Ñù un,unp; // the velocity matrix along the x-axis, u^(n+1) matrix
  ‚Ñù vn,vnp; // the velocity matrix along the y-axis, v^(n+1) matrix
  ‚Ñù d,d_hn;
  ‚Ñù deqh,deqh_dx,deqh_dy;
  ‚Ñù fc; // Coriolis force
  ‚Ñï fictitious;
};

// ***************************************************************************
// * Faces
// ***************************************************************************
faces{
  ‚Ñù bv;
  ‚Ñï ffb;
};

// ***************************************************************************
// * Globals
// ***************************************************************************
global{
  ‚Ñù dt,dt_max,t; // time step, time
  ‚Ñï Nt; // iteration
  ‚Ñù inv_dx,inv_dy;
  ‚Ñù ti; // the initial time
  ‚Ñù tf; // final time
  ‚Ñù xmin,xmax;
  ‚Ñù ymin,ymax;
  ‚Ñù hmax_bound,hmax,hmax0;
  ‚Ñù dmax,dxmax,dymax;
  ‚Ñù umax,umin,vmax,vmin;
  ‚Ñù cfl;
  ‚Ñù dx_lon, dy_lat;
  ‚Ñù dxy_min;
};
double inlet[MAX_INLET_NB];


// ***************************************************************************
// * Initialisation part
// ***************************************************************************
mainStart @ -12.0 { info()<<"[1;33m[main] start[m"; }
calypsoStart @ -11.9 { info()<<"[1;33m[calypso] Read conf_file parameters[m"; }
conf_check @ -11.8 {
//#warning true_int needs to be negated!
  info()<<"[1;34m[conf_check] true_int="<<-(1.>0.)<<"[";
  info()<<"[1;34m[conf_check] fals_int="<<(0.>1.)<<"[";
}
simulation_init @ -11.0 {
  info()<<"[1;35m[simulation_init] Set attributes of a simulation[m";
  ti=start_time;
  info()<<"[1;35m[simulation_init] Start: ti = "<<ti<<" s[m";
  tf=time_of_simulation;
  info()<<"[1;35m[simulation_init] End:   tf = "<<tf<<" s[m";
  t=ti;
  Nt=1;
  info()<<"[1;35m[simulation_init] Number of time steps: "<<Nt<<"[m";
}

// netcdf @ -10.9

‚àÄ cells xmin <?= x @ -10.8;
‚àÄ cells xmax >?= x @ -10.8;
‚àÄ cells ymin <?= y @ -10.8;
‚àÄ cells ymax >?= y @ -10.8;

dxLon @ -10.69 {
  dx_lon = (xmax-xmin)/(X_EDGE_ELEMS-2-1);
  //info()<<"[33m[grid_init] dx_lon="<<dx_lon<<"[m";
}
dyLat @ -10.69 {
  dy_lat = (ymax-ymin)/(Y_EDGE_ELEMS-2-1);
  //info()<<"[33m[grid_init] dy_lat="<<dy_lat<<"[m";
}

// convert dx and dy to linear units [m]
‚àÄ cells geogr_to_cart_dx @ -10.67 {
  dx = lon_to_m(dx_lon,y); // Longitude to meters
  dy = lat_to_m(dy_lat); // Latitude to meters
}
‚àÄ cells ini_inv_dx @ -10.66 { inv_dx = 1.0/dx; }
‚àÄ cells ini_inv_dy @ -10.66 { inv_dy = 1.0/dy; }

‚àÄ cells @ -10.6 {d=-z;}

// read_water_inlet @ -10.2

‚àÄ cells @ -10.1 {fictitious=0;}
‚àÄ faces @ -10.1 {ffb=0;}
‚àÄ outer faces @ -10.09 {fictitious[0]=1;}

‚àÄ inner faces @ -10.08 {
  // On enl√®ve les faces internes qui ne voient aucune maille fictive
  if ((fictitious[frontCell]==0) and (fictitious[backCell]==0)) continue;
  // On enl√®ve les faces internes qui voient 2 mailles fictives
  if ((fictitious[frontCell]==1) and (fictitious[backCell]==1)) continue;
  if (fictitious[frontCell]!=0) {ffb=1;}//info()<<"[33m[inner faces] front #"<<frontCell<<"[m";}
  if (fictitious[backCell]!=0) {ffb=2;}//info()<<"[33m[inner faces] back #"<<backCell<<"[m";}
}
‚àÄ inner faces @ -10.07 {
  if (ffb==0) continue;
  //info()<<"[33m[faces] ffb="<<ffb<<", cells: "<<backCell<<"->"<<frontCell<<"[m";
  if (ffb==1) d[frontCell]=d[backCell];
  if (ffb==2) d[backCell]=d[frontCell];
}

‚àÄ outer cells @ -8.9 {
  if (uid%X_EDGE_ELEMS) continue; // On √©vite les mailles de l'Est
  hn=inlet[Nt-1];
  info()<<"[33m[boundary_force] West #"<<uid<<", Nt="<<Nt-1<<", hn="<<hn<<"[m";
}
//iniHnFill6 @ -8.89 { fill6(hn); }


‚àÄ outer cells @ -8.7 {
  if (uid%X_EDGE_ELEMS) continue; // On √©vite les mailles de l'Est
  if (d==0.0) continue; // on √©vite les corners
  un = hn * sqrt(GZ/d);
}

‚àÄ outer cells @ -8.7 {
  if (uid%X_EDGE_ELEMS) continue;
  if (d==0.0) continue; // on √©vite les corners
  //vn = vn[‚Üì];
}

//‚àÄ cells hmax >?= hn @ -7.0;
iniHMX @ -7.0 { hmax=-‚àû;}
‚àÄ inner cells @ -6.99{
  //info()<<"[1;34m[max H] #"<<uid<<"[m";
  hmax = (hn>hmax)?hn;
}

initialMaximiumWaterHeight @ -6.9 {
  //info()<<"[1;34m[model_init] hmax="<<hmax<<"[m";
  hmax0=max(hmax,hmax_bound);
  info()<<"[1;34m[model_init] hmax0="<<hmax0<<"[m";
  //info()<<"[1;34m[model_init] hmax_bound="<<hmax_bound<<"[m";
}

‚àÄ cells space_scheme_init @ -5.0 { d_hn = d + hn; }

‚àÄ cells space_scheme_init_coriolis @ -5.0 {
  const ‚Ñù T_SIDEREAL = 86164.1;
  const ‚Ñù OMEGA_T = 2.0 * PI / T_SIDEREAL;
  const ‚Ñù d_omega_t = 2.0 * OMEGA_T;
  fc = d_omega_t * sin(deg_to_rad(y));
  //info()<<"[1;38m[space_scheme_init_coriolis] #"<<uid<<": y="<<y<<", fc="<<fc<<"[m";
}


// ***************************************************************************
// * Time Scheme Init
// ***************************************************************************
‚àÄ cells dmax >?= d @ -4.000001; // Les puissance de 2 font des hexa sans point, cf. reduce.c d'arcane

// On est oblig√© de travailler pour reduce que sur les inners
iniUN @ -4.0 { umin=vmin=+‚àû; umax=vmax=-‚àû;}
‚àÄ inner cells timeSchemeInitMax @ -3.9{
  //info()<<"[1;34m[timeSchemeInitMax] #"<<uid<<"[m";
  umin = (un<umin)?un;
  umax = (un>umax)?un;
  vmin = (vn<vmin)?vn;
  vmax = (vn>vmax)?vn;
}

‚àÄ cells dxmax >?= dx @ -3.9;
‚àÄ cells dymax >?= dy @ -3.9;

time_scheme_check_cfl @ -3.8 {
  const ‚Ñù cgmax = sqrt(GZ*(dmax+hmax0));
  const ‚Ñù cumax = max(fabs(umax),fabs(umin)) + cgmax;
  const ‚Ñù cvmax = max(fabs(vmax),fabs(vmin)) + cgmax;
  const ‚Ñù inv_dx_max = 1.0/dxmax;
  //info()<<"[1;31m[time_scheme_check_CFL] dxmax="<<dxmax<<"[m";
  //info()<<"[1;31m[time_scheme_check_CFL] inv_dx_max="<<inv_dx_max<<"[m";
  const ‚Ñù inv_dy_max = 1.0/dymax;
  //info()<<"[1;31m[time_scheme_check_CFL] inv_dy_max="<<inv_dy_max<<"[m";
  //info()<<"[1;31m[time_scheme_check_CFL] dmax="<<dmax<<"[m";
  info()<<"[1;31m[time_scheme_check_CFL] umin="<<umin<<" umax="<<umax<<"[m";
  dt=time_step;
  cfl = max(dt*cumax*inv_dx_max, dt*cvmax*inv_dy_max);
  dxy_min = 1.0/max(inv_dx_max,inv_dy_max);
  if (inv_dy_max < eps_fp)dt_max = cfl_max/(cumax*inv_dx_max);
  else if (inv_dx_max < eps_fp) dt_max = cfl_max/(cvmax*inv_dy_max);
  else dt_max =  min(cfl_max/(cumax*inv_dx_max),cfl_max/(cvmax*inv_dy_max));
  info()<<"[1;31m[time_scheme_check_CFL] - h_max = "<<hmax0<<" m"<<"[m";
  info()<<"[1;31m[time_scheme_check_CFL] - d_max = "<<dmax<<" m"<<"[m";
  info()<<"[1;31m[time_scheme_check_CFL] - dxy_min = "<<dxy_min<<" m"<<"[m";
  info()<<"[1;31m[time_scheme_check_CFL] - c_max = "<<max(cumax,cvmax)<<" m/s"<<"[m";
  info()<<"[1;31m[time_scheme_check_CFL] - dt_max = "<<dt_max<<" s"<<"[m";
  info()<<"[1;31m[time_scheme_check_CFL] - CFL = "<<cfl<<"[m";
}

time_scheme_check_explosion @ -3.7 {}

time_scheme_leapfrog_init @ -3.6 {
  info()<<"[1;31m[leapfrog_init] Euler iteration from time t_0 to t_1/2[m";
}

//hn, un, vn, un, vn, dt/2.0, unp, vnp
euler_iterate_eqvel @ -3.5 {
  info()<<"[1;31m[euler_iterate_eqvel] iterate eqVEL[m";
}

‚àÄ cells nlsw1_eqU @ -3.4 {
  const ‚Ñù tv = ¬º*(vn[‚Üì]+vn[‚Üì]+vn+vn[‚Üí]);// 2nd ‚Üì vs ‚Üò
  const ‚Ñù ul = (un>0.0)?un:un[‚Üí];
  const ‚Ñù ur = (un>0.0)?un[‚Üê]:un;
  const ‚Ñù uu = (un>0.0)?un:un[‚Üë];
  const ‚Ñù ud = (un>0.0)?un[‚Üì]:un;
  const ‚Ñù tu1 = un*(ul-ur); // u*du/dx
  const ‚Ñù tu2 = tv*(uu-ud); // v*du/dy
  const ‚Ñù thu = GZ*(hn[‚Üí]-hn); // g*dh/dx
  const ‚Ñù tfc = -tv*fc; // Coriolis force
  const ‚Ñù dequ = (tu1+thu)*inv_dx + tu2*inv_dy + tfc;
  unp = un - ¬Ω*dt*dequ; // Euler time iteration
}

‚àÄ cells nlsw1_eqV @ -3.4 {
  const ‚Ñù tu = ¬º*(un[‚Üê]+un+un[‚Üë]+un[‚Üë]);// first ‚Üñ vs ‚Üë
  const ‚Ñù vl = (vn>0.0)?vn:vn[‚Üí];
  const ‚Ñù vr = (vn>0.0)?vn[‚Üê]:vn;
  const ‚Ñù vu = (vn>0.0)?vn:vn[‚Üë];
  const ‚Ñù vd = (vn>0.0)?vn[‚Üì]:vn;
  const ‚Ñù tv1 = tu*(vr-vl); // u*dv/dx
  const ‚Ñù tv2 = vn*(vu-vd); // v*dv/dy
  const ‚Ñù thv = GZ*(hn[‚Üë]-hn); // g*dh/dy
  const ‚Ñù tfc = tu*fc; // Coriolis force
  const ‚Ñù deqv = tv1*inv_dx + (tv2+thv)*inv_dy + tfc;
  vnp = vn - ¬Ω*dt*deqv; // Euler time iteration
}
ini_update_un @ -3.3 { un = unp; }
ini_update_vn @ -3.3 { vn = vnp; }

// Gage network to do

// Snapshots initialisation to do

cliona_start @ -1.0 { info()<<"[1;33m[Cliona] Run the simulation[m"; }


// ***************************************************************************
// * Compute loop
// ***************************************************************************
loopHMX @ 0.01 { hmax=-‚àû;}
‚àÄ inner cells @ 0.02 { hmax = (hn>hmax)?hn; }

model_iterate @ 0.1 {
  info()<<"[1;34m[model_iterate] #"<<iteration<<", hmax="<<hmax<<"[m";
}


model_iterate_time_iteration @ 0.2 {
  debug()<< "[1;34m[model_iterate] Time iteration[m";
}

time_scheme_leapfrog_iterate @ 1.0 {}

//d, hn, un, vn, hn, dt, d_hn, hnp
‚àÄ cells eulerIterateEqh @ 1.1 { d_hn = d + hn; }

‚àÄ cells space_scheme_nlsw_1st_order_compute_eqh_X @ 1.2 {
  // Term: d((d+h)u)/dx
  const ‚Ñù dhr=(un>0.0)?d_hn[‚Üí]:d_hn;
  const ‚Ñù dhl=(un[‚Üê]>0.0)?d_hn[‚Üê]:d_hn;
  deqh_dx = (un*dhr-un[‚Üê]*dhl)*inv_dx;
}
‚àÄ cells space_scheme_nlsw_1st_order_compute_eqh_Y @ 1.2 {
  // Term: d((d+h)v)/dy
  const ‚Ñù dhu=(vn>0.0)?d_hn[‚Üë]:d_hn;
  const ‚Ñù dhd=(vn[‚Üì]>0.0)?d_hn[‚Üì]:d_hn;
  deqh_dy = (vn*dhu-vn[‚Üì]*dhd)*inv_dy;
}
‚àÄ cells space_scheme_nlsw_1st_order_compute_eqh_Y_sum @ 1.21 {
  deqh = deqh_dx + deqh_dy;
}
‚àÄ cells space_scheme_nlsw_1st_order_compute_eqh_Y_euler_time_iteration @ 1.22 {
  hnp = hn - dt*deqh; // Euler time iteration
}

‚àÄ cells time_scheme_update_hn @ 1.3 { hn = hnp; }


time_scheme_leapfrog_iterate_p1p4 @ 1.4 {
  debug()<<"[1;31m[time_scheme_leapfrog_iterate]  Time t_n+1/2 to t_n+3/2[m";
}

time_scheme_leapfrog_iterate_p1p5 @ 1.5 {
  debug()<< "[1;31m[time_scheme_leapfrog_iterate] Euler iteration moment[m";
}

// hn, un, vn, un, vn, dt, unp, vnp
‚àÄ inner cells nlsw1_eqU_p2p0 @ 2.0 {
  const ‚Ñù tv = ¬º*(vn[‚Üì]+vn[‚Üì]+vn+vn[‚Üí]);// 2nd ‚Üì vs ‚Üò
  const ‚Ñù ul = (un>0.0)?un:un[‚Üí];
  const ‚Ñù ur = (un>0.0)?un[‚Üê]:un;
  const ‚Ñù uu = (un>0.0)?un:un[‚Üë];
  const ‚Ñù ud = (un>0.0)?un[‚Üì]:un;
  const ‚Ñù tu1 = un*(ul-ur); // u*du/dx
  const ‚Ñù tu2 = tv*(uu-ud); // v*du/dy
  const ‚Ñù thu = GZ*(hn[‚Üí]-hn); // g*dh/dx
  const ‚Ñù tfc = -tv*fc; // Coriolis force
  const ‚Ñù dequ = (tu1+thu)*inv_dx + tu2*inv_dy + tfc;
  unp = un - ¬Ω*dt*dequ; // Euler time iteration
}

‚àÄ cells nlsw1_eqV_p2p0 @ 2.0 {
  const ‚Ñù tu = ¬º*(un[‚Üê]+un+un[‚Üë]+un[‚Üë]);// first ‚Üñ vs ‚Üë
  const ‚Ñù vl = (vn>0.0)?vn:vn[‚Üí];
  const ‚Ñù vr = (vn>0.0)?vn[‚Üê]:vn;
  const ‚Ñù vu = (vn>0.0)?vn:vn[‚Üë];
  const ‚Ñù vd = (vn>0.0)?vn[‚Üì]:vn;
  const ‚Ñù tv1 = tu*(vr-vl); // u*dv/dx
  const ‚Ñù tv2 = vn*(vu-vd); // v*dv/dy
  const ‚Ñù thv = GZ*(hn[‚Üë]-hn); // g*dh/dy
  const ‚Ñù tfc = tu*fc; // Coriolis force
  const ‚Ñù deqv = tv1*inv_dx + (tv2+thv)*inv_dy + tfc;
  vnp = vn - ¬Ω*dt*deqv; // Euler time iteration
}


// time_scheme_leapfrog_iterate: Runup
// time_scheme_leapfrog_iterate: Update temporary matrix
‚àÄ cells time_scheme_leapfrog_iterate_update_temporary_matrix @ 3.0 {
  d_hn = d + hn;
}

// Treatment for velocities
// runup_treat_vel_d_dhn_hn_un_unp @ 1.6;

// time_scheme_leapfrog_iterate update_vel
‚àÄ cells time_scheme_update_vel_u @ 3.1 { un = unp; }
‚àÄ cells time_scheme_update_vel_v @ 3.1 { vn = vnp; }

// Check explosion

model_iterate_time_update @ 4.0 {
  t = t + dt;
  Nt = Nt + 1;
}

//model_iterate_segment_update @ 5.0 { }

model_iterate_boundary_update @ 6.0 {}

boundary_force @ 6.1 {}

boundary_continuative @ 6.2 {}

boundary_reflective @ 6.3 {}

‚àÄ outer cells @ 7.0 {
  if (uid%X_EDGE_ELEMS) continue; // On √©vite les mailles de l'Est
  hn=inlet[Nt-1];
  //info()<<"[33m[boundary_force] West #"<<uid<<", Nt="<<Nt-1<<", hn="<<hn<<"[m";
}
//loopHnFill6 @ 8.0 { fill6(hn); }

//model_iterate_snapshots_update_extreme @ 7.0 { }

//mainFinalize @ 10.0 { info()<<"[1;33m[main] finalize[m"; }
