///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

//iniVnFill6 @ -8.8 if (option_fill) { fill(vn); }

∀ outer cells @ -8.7 { ∀ outer west faces vn=vn[→]; }
∀ outer cells @ -8.7 { ∀ outer east faces vn=vn[←]; }

∀ outer south cells @ -8.7 { vn=0.0; }
∀ outer north cells @ -8.7 { vn=0.0; }
∀ inner north cells @ -8.7 { vn=0.0; }

∀ inner cells nlsw1_eqV @ -3.4 {
  const ℝ tu = ¼*(un[←]+un+un[↖]+un[↑]);
  const ℝ vl = (tu>0)?vn:vn[→];
  const ℝ vr = (tu>0)?vn[←]:vn;
  const ℝ vu = (vn>0)?vn:vn[↑];
  const ℝ vd = (vn>0)?vn[↓]:vn;
  const ℝ tv1 = tu*(vl-vr);
  const ℝ tv2 = vn*(vu-vd);
  const ℝ thv = GZ*(hn[↑]-hn);
  const ℝ tfc = tu*fc;
  const ℝ deqv = tv1*inv_dx + (tv2+thv)*inv_dy + tfc;
  vnp = vn - ½*δt*deqv;
}

∀ inner north cells @ -3.35 { vnp=0.0; }

iniVMinMax @ -4.0 { vmin=+∞; vmax=-∞;}
∀ inner cells @ -3.9{
  vmin = fmin(vn,vmin);
  vmax = fmax(vn,vmax);
}

∀ inner cells ini_update_vn @ -3 { vn = vnp; }


// ***************************************************************************
// * Compute loop
// ***************************************************************************

∀ outer cells @ 2.0 { vnp=0.0; }

∀ inner cells @ 2.0 {
  const ℝ tu = ¼*(un[←]+un+un[↖]+un[↑]);
  const ℝ vl = (tu>0.0)?vn:vn[→];
  const ℝ vr = (tu>0.0)?vn[←]:vn;
  const ℝ vu = (vn>0.0)?vn:vn[↑];
  const ℝ vd = (vn>0.0)?vn[↓]:vn;
  const ℝ tv1 = tu*(vl-vr);
  const ℝ tv2 = vn*(vu-vd);
  const ℝ thv = GZ*(hn[↑]-hn);
  const ℝ tfc = tu*fc;
  const ℝ deqv = tv1*inv_dx + (tv2+thv)*inv_dy + tfc;
  vnp = vn - δt*deqv;
}

//∀ inner north cells @ 2.1 { vnp=0.0; }

∀ inner cells @ 2.2 { // Runup
  const ℝ ε = option_epsd;
  const ℝ coef_grad_h = coef_grady_h;
  const ℾ dorh = d_hn[↑]<ε or hn[↑]<-d;
  const ℾ vorh = vnp<0.0 and hn[↑]>hn;
  vnp=(d_hn<ε and dorh)?0.0:(d_hn<ε and vorh)?vnp-coef_grad_h*(hn+d[↑]):vnp;
  if (d_hn[↑] < ε){
    if (hn < -d[↑]) vnp = 0.0;
    if (vnp>0.0 and hn>hn[↑]) vnp += coef_grad_h*(hn[↑]+d);
    continue;
  }
  if (vnp>0.0){
    if (-d>hn[↑]) vnp += coef_grad_h*(hn[↑]+d);
    if (-d[↑]>hn) vnp -= coef_grad_h*(hn+d[↑]);
  }
}

∀ inner cells @ 3 { vn = vnp; }

// ***************************************************************************
// * VN Boundaries
// ***************************************************************************
∀ outer cells @ 7.2 { ∀ outer west faces vn=vn[→]; }
∀ outer cells @ 7.2 { ∀ outer east faces vn=vn[←]; }

//∀ outer south cells @ 7.2 { vn=0.0; }
∀ outer north cells @ 7.2 { vn=0.0; }
∀ inner north cells @ 7.2 { vn=0.0; }
