#include "netcdf.h"

netcdfReadBath @ -10.9 {
  info()<<"[39m[NetCDF] read info, filename='depth.nc'[m";
  int ncid=0;
  int ndims, nvars, natts, unlimdimid;
  
  if (nc_open("./depth.nc",NC_WRITE,&ncid)!=NC_NOERR) return;

  // inquiring the IDs of dims x and y
  if (nc_inq(ncid, &ndims, &nvars, &natts, &unlimdimid)!=NC_NOERR) return;
  //assert(X_EDGE_ELEMS==4+2);
  //assert(Y_EDGE_ELEMS==4+2);
  //assert(X_EDGE_ELEMS==ndims+2);
  //assert(ndims==4);
  assert(nvars==3);
  assert(natts==0);
  assert(unlimdimid==-1);
  //info()<<"[39m[NetCDF] ndims="<<ndims<<"[m";
  //info()<<"[39m[NetCDF] nvars="<<nvars<<"[m";
  //info()<<"[39m[NetCDF] natts="<<natts<<"[m";
  //info()<<"[39m[NetCDF] unlimdimid="<<unlimdimid<<"[m";

  size_t len=0;
  char name[NC_MAX_NAME];
  for(int i=0;i<ndims;i+=1){
    if (nc_inq_dim(ncid, i, name, &len)!=NC_NOERR) return;
    //assert(len==4);
    info()<<"[39m[NetCDF] dimName="<<name<<", len="<<len<<"[m";
  }

  if (nc_inq_varname(ncid, 0, name)!=NC_NOERR) return;
  //info()<<"[39m[NetCDF] xName="<<name<<"[m";
  assert(name[0]=='x');
  if (nc_get_var_double(ncid,0,x)!=NC_NOERR) return;
  //for(int k=0;k<4;k+=1) info()<<"[39m[NetCDF] x="<<x[k]<<"[m";    

  if (nc_inq_varname(ncid, 1, name)!=NC_NOERR) return;
  //info()<<"[39m[NetCDF] yName="<<name<<"[m";
  assert(name[0]=='y');
  if (nc_get_var_double(ncid, 1, y)!=NC_NOERR) return;
  //for(int k=0;k<4;k+=1) info()<<"[39m[NetCDF] y="<<y[k]<<"[m";    

  if (nc_inq_varname(ncid, 2, name)!=NC_NOERR) return;
  //info()<<"[39m[NetCDF] zName="<<name<<"[m";  
  assert(name[0]=='z');
  if (nc_get_var_double(ncid, 2, z)!=NC_NOERR) return;
  // On refait une passe pour shifter au centre
  for(int k=X_EDGE_ELEMS*Y_EDGE_ELEMS-X_EDGE_ELEMS,i=15;k>X_EDGE_ELEMS;k-=1){
    if (!(k%X_EDGE_ELEMS)) {z[k]=-0.0;continue;}
    if (!((k+1)%X_EDGE_ELEMS)) {z[k]=-0.0;continue;}
    x[k]=x[k%Y_EDGE_ELEMS-1];
    y[k]=y[k/Y_EDGE_ELEMS-1];
    z[k]=z[i];
    i-=1;
  }
  // On flush le reste
  for(int k=X_EDGE_ELEMS;k>=0;k-=1) z[k]=-0.0;
  for(int k=X_EDGE_ELEMS;k>=0;k-=1) x[k]=y[k]=0.0;
  for(int k=X_EDGE_ELEMS-1;k>=0;k-=1) z[X_EDGE_ELEMS*Y_EDGE_ELEMS-1-k]=-0.0;
  
  // Closes the open netCDF dataset
  if (nc_close(ncid)!=NC_NOERR) return;
  info()<<"[39m[NetCDF] done[m";
}

// 0.00000E+00	-1.19000E-05
// 2.50000E-03	-1.13996E-05
// 5.00000E-03	-1.08991E-05
// 7.50000E-03	-1.03987E-05
read_water_inlet @ -10.2 {
  FILE *stream=fopen("inlet.data", "r");
  assert(stream);
  double tm;
  info()<<"[37m[boundary] Water inlet file[m";
  hmax_bound=0.0;
  for(int k=0;k<MAX_INLET_NB;k+=1){
    if (fscanf(stream,"%lf %lf", &tm,&inlet[k])!=2) return;
    hmax_bound=max(hmax_bound,inlet[k]);
  }
  for(int k=0;k<9201;k+=1){
    inlet[k]*=1;
    debug()<<"[39m[read_water_inlet] h="<<inlet[k]<<"[m";
  }
  fclose(stream);
}
