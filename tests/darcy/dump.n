///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 DESROZIERS Sylvain - Sylvain.Dezrosiers@ifpen.fr          //
//                 LELANDAIS Benoit - Benoit.Lelandais@cea.fr                //
//                 OUDOT Marie-Pierre - Marie-Pierre.Oudot@cea.fr            //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

∀ own nodes void dumpNodeCoords(void) {//@ -20.0 if (option_debug){
    info()<<"[dumpNodeCoords] node_coord["<<uid<<"]="<<coord;
}

∀ own cells void dumpInitCellCenter(void) {//@ -9.9 if (option_debug){
    info()<<"[initCellCenters] cell_center["<<uid<<"]="<<cell_center;
}
∀ own cells void dumpInitCellMeasures(void) {//@ -8.9 if (option_debug){
    info()<<"[initCellMeasures] cell_measure["<<uid<<"]="<<cell_measure;
}



∀ own faces void dumpFaceCenters(void) {//@ -8.0 if (option_debug){
    info()<<"[dumpFaceCenters] face_center["<<uid<<"]="<<face_center;
}
∀ own faces void dumpFaceMeasure(void) {//@ -8.0 if (option_debug){
    info()<<"[dumpFaceMeasure] face_measure["<<uid<<"]="<<face_measure;
}
∀ own faces void dumpFaceNormal(void) {//@ -8.0 if (option_debug){
    info()<<"[dumpFaceNormal] face_normal["<<uid<<"]="<<norm(face_normal);
}




∀ outer faces void dumpOuterTransmissivityFaces(void) @ -8.0 if (option_debug){
    info()<<"[dumpOuterTransmissivityFaces] transmissivity["<<uid<<"]="<<transmissivity;
}
∀ inner faces void dumpInnerTransmissivityFaces(void) {//@ -8.0 if (option_debug){
    info()<<"[dumpInnerTransmissivityFaces] transmissivity["<<uid<<"]="<<transmissivity;
}





∀ own cells void dumpTotalMobility(void)  @ 3.02 if (option_debug){
    info()<<"[dumpTotalMobility] total_mobility["<<uid<<"]="<<total_mobility;
}

∀ own cells void dumpPressureRhs(void) @ 4.11 if (option_debug){
  info()<<"[computePressureRhs] rhs addValue pressure["<<uid<<"]";
}

∀ own cells void dumpCellPressure(void) @ 4.51 if (option_debug){
  info()<<"[getCellPressure] pressure["<<uid<<"]="<<pressure;
}

∀ own inner faces void dumpComputeInnerTotalVelocity(void)
  in (face transmissivity, cell total_mobility) @ 5.01 if (option_debug){
    debug()<<"[dumpComputeInnerTotalVelocity]"
           << " transmissivity="<<transmissivity;
    debug()<<"[dumpComputeInnerTotalVelocity] total_velocity="<<total_velocity;
  }

∀ own outer faces void dumpComputeOuterTotalVelocity(void) @ 5.01 if (option_debug){
  if ((face_center.x!=option_bc_Xmin)&&
      (face_center.x!=option_bc_Xmax)) continue;
  debug()<<"[computeOuterTotalVelocity] total_velocity="<<total_velocity;
}

∀ own faces void dumpTotalVelocity(void) @ 5.201 if (option_debug){
  info()<<"[dumpTotalVelocity] total_velocity["<<uid<<"]="<<total_velocity;
}


∀ inner faces void dumpComputeInnerExplicitWaterSaturation(void){
  debug()<< "[computeInnerExplicitWaterSaturation]"
        << " [frontCell]="<<water_saturation_local[frontCell]
        <<", [backCell]="<<water_saturation_local[backCell];
  //debug()<< "\33[35m[computeInnerExplicitWaterSaturation] Face " << backCell->localId()<<"->"<<frontCell->localId()<<"\33[m"; 
}

∀ own outer faces void dumpComputeOuterExplicitWaterSaturation(void){
  if ((face_center.x!=option_bc_Xmin)&&
      (face_center.x!=option_bc_Xmax)) continue;
  //debug()<< "\33[36m[computeOuterExplicitWaterSaturation] Face " <<backCell->localId()<<"->"<<frontCell->localId()<<"\33[m";
}

∀ own cells void dumpWaterSaturation(void) {//@ 7.0 {
  info()<< "[dumpWaterSaturation] water_saturation["<<uid<<"]="<<water_saturation;
}

//void exitHere(void)@6.91{exit;}
