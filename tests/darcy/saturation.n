///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 DESROZIERS Sylvain - Sylvain.Dezrosiers@ifpen.fr          //
//                 LELANDAIS Benoit - Benoit.Lelandais@cea.fr                //
//                 OUDOT Marie-Pierre - Marie-Pierre.Oudot@cea.fr            //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// *************************************
// * Now computeExplicitWaterSaturation
// *************************************
∀ cells void dupWaterSaturationTolocal(void)
  in (cell water_saturation) out (cell water_saturation_local) {
  water_saturation_local=water_saturation;
}

∀ inner faces void computeInnerExplicitWaterSaturation(void)
  in (face total_velocity,
      cell water_mobility,total_mobility)
  out (cell water_saturation_local) {
  const ℝ velocity = total_velocity;
  const ℝ wfrac_flow = (velocity > 0.) ?
    water_mobility[frontCell]/total_mobility[frontCell]:
    water_mobility[backCell]/total_mobility[backCell];
  const ℝ tmp = velocity*wfrac_flow*δt;
  const ℝ tmpf = tmp/(cell_measure[frontCell]*porosity[frontCell]);
  const ℝ tmpb = tmp/(cell_measure[backCell]*porosity[backCell]);
  water_saturation_local[frontCell] -= tmpf;
  water_saturation_local[backCell]  += tmpb;
}

∀ own outer faces void computeOuterExplicitWaterSaturation(void)
  in (face total_velocity,
      cell water_mobility,total_mobility)
  out (cell water_saturation_local) {
  if ((face_center.x!=option_bc_Xmin)&&
      (face_center.x!=option_bc_Xmax)) continue;
  const ℝ velocity = ((this).isSubDomainBoundaryOutside())?total_velocity:-total_velocity;
  const ℝ tmp = velocity * δt / (cell_measure[0] * porosity[0]);
  if (velocity < 0.0) { // Injection d'huile
    const ℝ local_water_mobility = krw(0.0) / water_viscosity[0];
    const ℝ local_oil_mobility = krw(1.0) / oil_viscosity[0];
    const ℝ mobility = local_water_mobility + local_oil_mobility;
    const ℝ wfrac_flow = water_mobility[0] / mobility;
    water_saturation_local[0] += wfrac_flow * tmp;
  } else {
    const ℝ wfrac_flow = water_mobility[0] / total_mobility[0];
    water_saturation_local[0] -= wfrac_flow * tmp;
  }
}

∀ own cells ℕ needSmallerTimeStep(ℕ value) {//@ 6.5{
  if ((water_saturation_local > 1.0) || (water_saturation_local < 0.0)){
    value|=1;
  }
  return value;
}

∀ cells void dupWaterSaturationLocalToTn(void)
  in (cell water_saturation_local)
  out (cell water_saturation) {
  water_saturation = water_saturation_local;
}
  
void computeExplicitWaterSaturation(void) @ 6.0 {
  for(;;){
    dupWaterSaturationTolocal();
    computeInnerExplicitWaterSaturation();
    computeOuterExplicitWaterSaturation();
    const ℕ reduced = mpi_reduce(ReduceMax,needSmallerTimeStep(0));
    if (reduced==0) break;
    info()<< "\33[31m[computeExplicitWaterSaturation] "
          << "Redoing with a smaller time step: "<<δt<<"\33[m";
    δt=½*δt;    
  }
  dupWaterSaturationLocalToTn();
}
