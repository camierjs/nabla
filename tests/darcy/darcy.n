///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 DESROZIERS Sylvain - Sylvain.Dezrosiers@ifpen.fr          //
//                 LELANDAIS Benoit - Benoit.Lelandais@cea.fr                //
//                 OUDOT Marie-Pierre - Marie-Pierre.Oudot@cea.fr            //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñµ;
#include "assert.h"
#define WATER_SATURATION_HLT 6.0


// ****************************************************************************
// * Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÇœÉœÑœÖœÜœáœàœâŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©
// * ‚àÄ ‚Ñù‚Ñï‚Ñ§‚Ñæ ‚àö‚àõ ¬Ω‚Öì¬º‚Öõ ùúï‚Ñµ‚àÇ * ‚ãÖ‚®Ø‚§´‚äó‚®Ç‚äõ ‚àû ‚Å∞¬π¬≤¬≥‚Å±‚Åø‚Å∫‚Åº
// ****************************************************************************

// ****************************************************************************
// * Options
// ****************************************************************************
options{
  // Mesh options
  ‚Ñù LENGTH                    = 1.0;
  ‚Ñï X_EDGE_ELEMS              = 8;
  ‚Ñï Y_EDGE_ELEMS              = 8;
  ‚Ñï Z_EDGE_ELEMS              = 8;
  ‚Ñù Œµ = 1.e-16;
  ‚Ñæ option_debug = false;
  ‚Ñù option_bc_Xmin = 0.0;
  ‚Ñù option_bc_Xmax = 1.0; // A faire concorder avec .arc: <lx nx="100" prx="1.0">100.0</lx>
  ‚Ñù option_bc_Xmin_pressure = 0.0;
  ‚Ñù option_bc_Xmax_pressure = 1.0;
  ‚Ñù option_ini_porosity = 1.0;
  ‚Ñù option_ini_permeability = 1.0;
  ‚Ñù option_ini_oil_density = 1.0;
  ‚Ñù option_ini_water_density = 1.0;
  ‚Ñù option_ini_oil_viscosity = 1.0;
  ‚Ñù option_ini_water_viscosity = 1.0;
  // Yet required options for Okina 
  ‚Ñù option_Œ¥t_initial = 0.001;
  ‚Ñù option_stoptime = 0.0012;
  ‚Ñï option_max_iterations = -1;
  // Options d'Aleph
  // ! l'Œµ a l'air d'√™tre tr√®s sensible
  // Ici, en ramenat en sƒôquentiel
  // ET en r√©ordonnant les lignes 'comme en s√©quentiel',
  // on recale s√©quentiel et parall√®le
  ‚Ñù alephEpsilon = 1.e-16;
  // 0=auto, 1:sloop, 2:hypre, 3:CUDA, 4:trilinos, 5: PETSc
  ‚Ñï alephUnderlyingSolver = 2; // Ici Hypre
  ‚Ñï alephMaxIterations = 1024;
  // DIAGONAL=0, AINV=1, AMG=2, IC=3, POLY=4, ILU=5, ILUp=6,
  // SPAIstat=7, SPAIdyn=8, DDMCriteriaAdaptedSelector=9, NONE=10
  ‚Ñï alephPreconditionerMethod = 2; // Ici AMG
  // PCG=0, BiCGStab=1 , BiCGStab2=2, GMRES=3, SAMG=4, QMR=5, SuperLU=6
  ‚Ñï alephSolverMethod = 0; // PCG
  // Je ram√®ne tout sur un coeur car mon installation d'HYPRE est s√©quentielle
  ‚Ñï alephNumberOfCores = 1;
  ‚Ñæ option_aleph_dump_matrix = false;     
};

// **************************************************************************
// * Cell Variables
// ****************************************************************************
cells{
  ‚Ñï cell_uid;
  ‚Ñù¬≥ cell_center;
  ‚Ñù cell_measure;
  ‚Ñù pressure;
  ‚Ñù water_saturation;
  ‚Ñù water_saturation_local;
  ‚Ñù oil_saturation;
  ‚Ñù oil_saturation_local;
  ‚Ñù water_density;
  ‚Ñù oil_density;
  ‚Ñù water_viscosity;
  ‚Ñù oil_viscosity;
  ‚Ñù water_relative_permeability;
  ‚Ñù oil_relative_permeability;
  ‚Ñù water_mobility;
  ‚Ñù oil_mobility;
  ‚Ñù total_mobility;
  ‚Ñù porosity;
  ‚Ñù¬≥À£¬≥ permeability;
};

// ****************************************************************************
// * Face Variables
// ****************************************************************************
faces{
  ‚Ñù face_uid;
  ‚Ñù face_measure;
  ‚Ñù¬≥ face_center;
  ‚Ñù¬≥ face_normal;
  ‚Ñù transmissivity;
  ‚Ñù total_velocity;
};


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ‚Ñï redo_with_a_smaller_time_step;
  ‚Ñù water_saturation_min;
  ‚Ñù water_saturation_max;
};


// ****************************************************************************
// * Functions
// ****************************************************************************
‚Ñù krw(‚Ñù Sw) { return Sw¬≤;}
‚Ñù kro(‚Ñù So) { return So¬≤;}


// ****************************************************************************
// * Compute loop @ ]+0,+‚àû[
// ****************************************************************************
void infoLoop(void) @ 1.0 {
  //info()<<"\n\33[7m*** ITERATION #"<<iteration<<", TIME "<<time<<", DELTAT "<<deltat<<" ***\33[m";
  printf("\n\33[7m*** ITERATION #%d, TIME %f, DELTAT=%f ***\33[m",iteration,time,deltat);
 
}

‚àÄ cells void computeOilRelativePermeability(void)
  in (cell oil_saturation)
  out (cell oil_relative_permeability) @ 1.0 {
  oil_relative_permeability = kro(oil_saturation);
}

‚àÄ cells void computeWaterRelativePermeability(void)
  in (cell water_saturation)
  out (cell water_relative_permeability) @ 1.0 {
  water_relative_permeability = krw(water_saturation);
}

‚àÄ cells void computeOilMobility(void)
  in (cell oil_relative_permeability, oil_viscosity)
  out (cell oil_mobility) @ 2.0 {
  assert(oil_viscosity>=0.0);
  oil_mobility = oil_relative_permeability/oil_viscosity;
}

‚àÄ cells void computeWaterMobility(void)
  in (cell water_relative_permeability, water_viscosity)
  out (cell water_mobility) @ 2.0 {
  assert(water_viscosity>=0.0);
  water_mobility = water_relative_permeability/water_viscosity;
}

‚àÄ cells void computeTotalMobility(void)
  in (cell water_mobility,
      cell oil_mobility)
  out (cell total_mobility) @ 3.0 {
  total_mobility = water_mobility + oil_mobility;
}

// *******************************************************
// * computePressure in aleph.n inserted here @ [4.0,5.0[
// *******************************************************

‚àÄ own inner faces void computeInnerTotalVelocity(void)
  in (face transmissivity,
      cell total_mobility, pressure)
  out (face total_velocity) @ 5.0 {
  const ‚Ñù mobility = ¬Ω*(total_mobility[backCell]+total_mobility[frontCell]);
  const ‚Ñù diff_pressure = pressure[backCell]-pressure[frontCell];
  const ‚Ñù diff_pressure_unglitched = (fabs(diff_pressure)<Œµ)?0.0:diff_pressure;
  total_velocity = transmissivity*mobility*diff_pressure_unglitched;
}

‚àÄ own outer faces void computeOuterTotalVelocity(void)
  in (face face_center, cell pressure) out (face total_velocity) @ 5.0 {
  if ((face_center.x!=option_bc_Xmin)&&
      (face_center.x!=option_bc_Xmax)) continue;
  const ‚Ñù boundary_pressure =
    (face_center.x==option_bc_Xmin)?option_bc_Xmin_pressure:
    (face_center.x==option_bc_Xmax)?option_bc_Xmax_pressure:-‚àû;
  assert(boundary_pressure>=0.0);
  const ‚Ñù diff_pressure = pressure[0]-boundary_pressure;
  const ‚Ñù diff_pressure_unglitched = (fabs(diff_pressure)<Œµ)?0.0:diff_pressure;
  total_velocity = transmissivity*total_mobility[0]*diff_pressure_unglitched;
  total_velocity *= ((this) is isSubDomainBoundaryOutside) ? 1.0 : -1.0;
}

// *******************************************************
// * computeWaterSaturation inserted here @ WATER_SATURATION_HLT/*
// *******************************************************

‚àÄ cells void computeOilSaturation(void)
  in (cell water_saturation)
  out( cell oil_saturation) @ 7.0 {
  oil_saturation = 1.0 - water_saturation;
}

// ****************************************************************************
// * Test for Quit & adjust time step
// ****************************************************************************
void computeNextTimeStep(void) @ 10.0 {
  //debug()<<"[computeNextTimeStep] iteration="<<iteration <<", time="<<time <<", delta_t="<<deltat;
  const ‚Ñù factor = 1.125;
  deltat = factor*deltat;
  if (time >= option_stoptime) exit;
}
