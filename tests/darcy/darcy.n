///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 DESROZIER Sylvain - Sylvain.Dezrosier@ifpen.fr            //
//                 LELANDAIS Benoit - Benoit.Lelandais@cea.fr                //
//                 OUDOT Marie-Pierre - Marie-Pierre.Oudot@cea.fr            //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñµ;
#include "assert.h"

// ****************************************************************************
// * Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÇœÉœÑœÖœÜœáœàœâŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©
// * ‚àÄ ‚Ñù‚Ñï‚Ñ§ ‚àö‚àõ ¬Ω‚Öì¬º‚Öõ ùúï‚Ñµ‚àÇ
// * ‚ãÖ‚®Ø‚§´‚äó‚®Ç‚äõ
// * ¬≤¬≥‚Åø‚Å∫¬π
// * ‚àû
// ****************************************************************************

// ****************************************************************************
// * Options
// ****************************************************************************
options{
  ‚Ñù Œµ = 1.0e-16;
  ‚Ñù option_boundary_Xmin_pressure = 0.0;
  ‚Ñù option_boundary_Xmax_pressure = 1.0;
  
  ‚Ñù option_ini_porosity = 1.0;
  ‚Ñù option_ini_permeability = 1.0;
  ‚Ñù option_ini_oil_density = 1.0;
  ‚Ñù option_ini_water_density = 1.0;
  ‚Ñù option_ini_oil_viscosity = 1.0;
  ‚Ñù option_ini_water_viscosity = 1.0;
  
  // Yet required options for Okina 
  ‚Ñù option_Œ¥t_initial = 0.001;
  ‚Ñù option_stoptime   = 0.01;

  // Options d'Aleph
  ‚Ñù alephEpsilon             = 1.e-15;
  // 0=auto, 1:sloop, 2:hypre, 3:CUDA, 4:trilinos, 5: PETSc
  ‚Ñï alephUnderlyingSolver    = 2;
  ‚Ñï alephMaxIterations       = 1024;
  // DIAGONAL=0, AINV=1, AMG=2, IC=3, POLY=4, ILU=5, ILUp=6,
  // SPAIstat=7, SPAIdyn=8, DDMCriteriaAdaptedSelector=9, NONE=10
  ‚Ñï alephPreconditionerMethod = 2;
  // PCG=0, BiCGStab=1 , BiCGStab2=2, GMRES=3, SAMG=4, QMR=5, SuperLU=6
  ‚Ñï alephSolverMethod     = 0;
  ‚Ñï alephNumberOfCores    = 0;
  ‚Ñæ option_aleph_dump_matrix = false;     
};


// **************************************************************************
// * Cell Variables
// ****************************************************************************
cells{
  ‚Ñï cell_uid;
  ‚Ñù¬≥ cell_center;
  ‚Ñù cell_measure;
  ‚Ñù pressure;
  ‚Ñù water_saturation;
  ‚Ñù water_saturation_local;
  ‚Ñù oil_saturation;
  ‚Ñù oil_saturation_local;
  ‚Ñù water_density;
  ‚Ñù oil_density;
  ‚Ñù water_viscosity;
  ‚Ñù oil_viscosity;
  ‚Ñù water_relative_permeability;
  ‚Ñù oil_relative_permeability;
  ‚Ñù water_mobility;
  ‚Ñù oil_mobility;
  ‚Ñù total_mobility;
  ‚Ñù porosity;
  ‚Ñù¬≥‚®Ø‚Ñù¬≥ permeability;
};


// ****************************************************************************
// * Face Variables
// ****************************************************************************
faces{
  ‚Ñù¬≥ face_center;
  ‚Ñù face_measure;
  ‚Ñù¬≥ face_normal;
  ‚Ñù transmissivity;
  ‚Ñù total_velocity;
};


// ****************************************************************************
// * Functions
// ****************************************************************************
‚Ñù krw(‚Ñù Sw) { return Sw;}
‚Ñù kro(‚Ñù So) { return So;}


// ****************************************************************************
// * Compute loop @ ]+0,+‚àû[
// ****************************************************************************
void dbgLoop(void) @ 1.0 {
  info()<<"\33[7m[Loop] #"<<GlobalIteration<<", time="<<time<<"\33[m";
}

‚àÄ cells void computeOilRelativePermeability(void)
  in (cell oil_saturation)
  out (cell oil_relative_permeability) @ 1.0 {
  oil_relative_permeability = kro(oil_saturation);
}

‚àÄ cells void computeWaterRelativePermeability(void)
  in (cell water_saturation)
  out (cell water_relative_permeability) @ 1.0 {
  water_relative_permeability = krw(water_saturation);
}

‚àÄ cells void computeOilMobility(void)
  in (cell oil_relative_permeability, oil_viscosity)
  out (cell oil_mobility) @ 2.0 {
  assert(oil_viscosity>0.0);
  oil_mobility = oil_relative_permeability/oil_viscosity;
}

‚àÄ cells void computeWaterMobility(void)
  in (cell water_relative_permeability, water_viscosity)
  out (cell water_mobility) @ 2.0 {
  assert(water_viscosity>0.0);
  water_mobility = water_relative_permeability/water_viscosity;
}

‚àÄ cells void computeTotalMobility(void)
  in (cell water_mobility,
      cell oil_mobility)
  out (cell total_mobility) @ 3.0 {
  total_mobility = water_mobility + oil_mobility;
}

// *******************************************************
// * computePressure in aleph.n inserted here @ [4.0,5.0[
// *******************************************************

‚àÄ inner faces void computeInnerTotalVelocity(void)
  in (face transmissivity,
      cell total_mobility, pressure)
  out (face total_velocity) @ 5.0 {
  if (!(this).isOwn()) continue;
  //debug()<<"[computeInnerTotalVelocity] face @ face_center="<<face_center;
  const ‚Ñù mobility = ¬Ω*(total_mobility[backCell]+total_mobility[frontCell]);
  const ‚Ñù diff_pressure = pressure[backCell]-pressure[frontCell];
  const ‚Ñù diff_pressure_unglitched = (fabs(diff_pressure)<10.0*Œµ)?0.0:diff_pressure;
  debug()<<"[computeInnerTotalVelocity]"
        << " transmissivity="<<transmissivity
        <<", mobility="<<mobility
        <<", diff_pressure_unglitched="<<diff_pressure_unglitched;
  total_velocity = transmissivity*mobility*diff_pressure_unglitched;
  debug()<<"[computeInnerTotalVelocity] total_velocity="<<total_velocity;
}

‚àÄ outer faces void computeOuterTotalVelocity(void) @ 5.0 {
  if (!(this).isOwn()) continue;
  if ((face_center.x!=0.0)&&(face_center.x!=1.0)) continue;
  //debug()<<"[computeOuterTotalVelocity] face @ face_center="<<face_center;
  const ‚Ñù boundary_pressure =
    (face_center.x==0.0)?option_boundary_Xmin_pressure:
    (face_center.x==1.0)?option_boundary_Xmax_pressure:-‚àû;
  assert(boundary_pressure>=0.0);
  const ‚Ñù diff_pressure = pressure[0]-boundary_pressure;
  const ‚Ñù diff_pressure_unglitched = (fabs(diff_pressure)<Œµ)?0.0:diff_pressure;
  debug()<<"[computeOuterTotalVelocity]"
        << " transmissivity="<<transmissivity
        <<", mobility="<<total_mobility[0]
        <<", diff_pressure_unglitched="<<diff_pressure_unglitched;
  total_velocity = transmissivity*total_mobility[0]*diff_pressure_unglitched;
  total_velocity *= ((this).isSubDomainBoundaryOutside()) ? 1.0 : -1.0;
  debug()<<"[computeOuterTotalVelocity] total_velocity="<<total_velocity;
  //debug()<<"[computeOuterTotalVelocity] isSubDomainBoundaryOutside: "<<(this).isSubDomainBoundaryOutside();
}

void syncTotalVelocity(void) @ 5.1 {
  synchronize(total_velocity);
}


// *************************************
// * Now computeExplicitWaterSaturation
// *************************************
‚àÄ cells void dupWaterSaturationTolocal(void)
  in (cell water_saturation) out (cell water_saturation_local) {
  water_saturation_local=water_saturation;
}

‚àÄ inner faces void computeInnerExplicitWaterSaturation(void)
  in (face total_velocity,
      cell water_mobility,total_mobility)
  out (cell water_saturation_local) {
  const ‚Ñù velocity = total_velocity;
  const ‚Ñù wfrac_flow = (velocity > 0.) ?
    water_mobility[frontCell]/total_mobility[frontCell]:
    water_mobility[backCell]/total_mobility[backCell];
  const ‚Ñù dt=Œ¥t;
  const ‚Ñù tmp = velocity * wfrac_flow * Œ¥t;
  const ‚Ñù tmpf = tmp/(cell_measure[frontCell]*porosity[frontCell]);
  const ‚Ñù tmpb = tmp/(cell_measure[backCell]*porosity[backCell]);
  debug()<< "velocity="<<velocity<<", wfrac_flow="<<wfrac_flow<<", deltat="<<dt;
  debug()<< "[computeInnerExplicitWaterSaturation]"
        << " [frontCell]="<<water_saturation_local[frontCell]
        <<", [backCell]="<<water_saturation_local[backCell];
  debug()<< "[computeInnerExplicitWaterSaturation]"
        << " tmp="<<tmp << ", tmpf="<<tmpf << ", tmpb="<<tmpb;
  water_saturation_local[frontCell] -= tmpf;
  water_saturation_local[backCell]  += tmpb;
  debug()<< "[computeInnerExplicitWaterSaturation]"
        << " [frontCell]="<<water_saturation_local[frontCell]
        <<", [backCell]="<<water_saturation_local[backCell];
  debug()<< "\33[35m[computeInnerExplicitWaterSaturation] Face "<<backCell->localId()<<"->"<<frontCell->localId()<<"\33[m";
      
}

‚àÄ own outer faces void computeOuterExplicitWaterSaturation(void)
  in (face total_velocity,
      cell water_mobility,total_mobility)
  out (cell water_saturation_local) {
  //if (!(this).isOwn()) continue;
  if ((face_center.x!=0.0)&&(face_center.x!=1.0)) continue;
  const ‚Ñù velocity = ((this).isSubDomainBoundaryOutside())?total_velocity:-total_velocity;
  const ‚Ñù tmp = velocity * Œ¥t / (cell_measure[0] * porosity[0]);
  debug()<< "\33[36m[computeOuterExplicitWaterSaturation] Face "<<backCell->localId()<<"->"<<frontCell->localId()<<" velocity="<<velocity<<"\33[m";
  //debug()<< "[computeOuterExplicitWaterSaturation] water_saturation["<<uid<<"]="<<water_saturation;
  if (velocity < 0.0) {
    // Injection d'huile
    debug()<< "\33[36m[computeOuterExplicitWaterSaturation] Injection d'huile\33[m";
    const ‚Ñù local_water_mobility = krw(0.) / water_viscosity[0];
    const ‚Ñù local_oil_mobility = krw(1.) / oil_viscosity[0];
    const ‚Ñù mobility = local_water_mobility + local_oil_mobility;
    const ‚Ñù wfrac_flow = water_mobility[0] / mobility;
    #warning += vs -= for water_saturation_local in computeOuterExplicitWaterSaturation
    water_saturation_local[0] += wfrac_flow * tmp;
  } else {
    debug()<< "\33[36m[computeOuterExplicitWaterSaturation] Injection d'?\33[m";
    const ‚Ñù wfrac_flow = water_mobility[0] / total_mobility[0];
    water_saturation_local[0] -= wfrac_flow * tmp;
  }
}

‚àÄ cells void dumpWaterSaturation(void){
  info()<< "[dumpWaterSaturation] water_saturation_local["<<uid<<"]="<<water_saturation_local;
}

‚àÄ cells ‚Ñæ needSmallerTimeStep(‚Ñæ value) {//@ 6.5{
  if ((water_saturation_local > 1.0) || (water_saturation_local < 0.0)){
    //warning()<< "[needSmallerTimeStep] water_saturation["<<uid<<"]="<<water_saturation_local;
    //printf(".");
    value|=true;
  }
  return value;
}

‚àÄ cells void dupWaterSaturationLocalToTn(void)
  in (cell water_saturation_local)
  out (cell water_saturation) {
  water_saturation = water_saturation_local;
}
  
void computeExplicitWaterSaturation(void) @ 6.0 {
  for(int i=0;;i+=1){
    dupWaterSaturationTolocal();
    computeInnerExplicitWaterSaturation();
    computeOuterExplicitWaterSaturation();
    //dumpWaterSaturation();
    if (needSmallerTimeStep(false)){
      info()<< "\33[31m[computeExplicitWaterSaturation] Redoing with a smaller time step: "<<Œ¥t<<"\33[m";
      Œ¥t=Œ¥t/2.;
    }else{
      //info()<< "\33[31m[computeExplicitWaterSaturation] ok\33[m";
      break;
    }
  }
  dupWaterSaturationLocalToTn();
}

void syncWaterSaturation(void) @ 6.9 {
  synchronize(water_saturation);
}

‚àÄ cells void computeOilSaturation(void)
  in (cell water_saturation)
  out( cell oil_saturation) @ 7.0 {
  oil_saturation = 1. - water_saturation;
}



// ****************************************************************************
// * Test for Quit & adjust time step
// ****************************************************************************
void computeNextTimeStep(void) @ 10.0 {
  debug()<<"[computeNextTimeStep] GlobalIteration="<<GlobalIteration
        <<", time="<<time
        <<", delta_t="<<Œ¥t;
  const ‚Ñù factor = 1.125;
  Œ¥t = max(1., min(1.5, factor))*Œ¥t;
  if (time >= option_stoptime) exit;
}

// entry-point exit
