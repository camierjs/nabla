///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// *************************************************************
// * Timestep
// *************************************************************

// Describe the evolution of the timestep with iterations of the algorithm
dtⁿ⁼⁰ = option_δt_initial;
dtⁿ⁺¹ = dt_nextⁿ;

// Accumulate the simulation time
sim_timeⁿ⁼⁰ = 0.0;
sim_timeⁿ⁺¹ = sim_timeⁿ + dtⁿ;

// Compute the stable timestep constraint
// /*unit*/ dt_stable =  1e20;

// Apply CFL constraint
/*apply*/ // $rule apply(dt_stable<-option_qqc,arealg,ss,vdov)[Loci::Minimum] {
∀ cells {
  ℝ dtf = ss*ss;
  ℝ qqc2 = 64.*option_qqc*option_qqc;
  if(vdov < 0.0) dtf = dtf + qqc2*arealg*arealg*vdov*vdov;
  dtf = SQRT(dtf);
  dtf = 0.5*arealg/dtf;
  if(vdov != 0.0) dt_stable=minⱼ(dtf); //join($dt_stable,dtf);
}

// Apply Hydro Constraint
//$rule apply(dt_stable<-vdov,option_dvovmax)[Loci::Minimum] {
∀ cells {
  if(vdov != 0.0) {
    ℝ dtdvov = option_dvovmax/(FABS($vdov)+1e-20);
    dtdvov *= 2./3.;
    dt_stable=minⱼ(dtdvov);//join($dt_stable,dtdvov);
  }
}

// Compute dt for next iteration
//$rule singleton(dt_next<-dt,dt_stable,stop_time,sim_time,option_dtfixed,option_dtmax,
//                option_δt_mult_lower_b,option_δt_mult_upper_b) {
//computDtForNxtIteration{
{
  ℝ newdt = option_dtfixed;
  if(option_dtfixed < 0.0) {
    newdt = dt_stable;
    ℝ ratio = 0.0;
    if(dt > 0.0) ratio = newdt/dt;
    if(ratio >= 1.0) {
      if(ratio < option_δt_mult_lower_b)
        newdt = dt;
      else if( ratio > option_δt_mult_upper_b) {
        newdt = dt*option_δt_mult_upper_b;
      }
    }
    if(newdt > option_dtmax) newdt = option_dtmax;
  }
  if(sim_time == 0.0) newdt = dt;
  ℝ targetdt = stop_time-sim_time;
  if(targetdt > newdt && targetdt < (4.0*newdt/3.0))
    targetdt = 2.0*newdt/3.0;
  if(targetdt < newdt) newdt = max(targetdt,0.0);
  dt_next = newdt;
}

// Compute termination condition
endSimulation = (n > maxsteps);
endSimulation = (dt < 1e-16);


