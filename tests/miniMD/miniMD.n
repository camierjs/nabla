with particles;


// ****************************************************************************
// * DEFINES
// ****************************************************************************
#define FACTOR 0.999
#define SMALL 1.0e-6
#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define MAX(a,b) ((a) > (b) ? (a) : (b))


// ****************************************************************************
// * OPTIONS - Options from Lennard-Jones input file for miniMD
// ****************************************************************************
options{
  Integer  in_units         = 0;      // set units (lj:0 or metal:1)
  Integer  in_forcetype     = 0;      // force style (lj:0 or eam:1)
  Integer  in_datafile      = 0;      // data file (0 or filename)
  Integer  in_nx            = 32;     // size of problem
  Integer  in_ny            = 32;
  Integer  in_nz            = 32;
  /*





























   */
  Integer  in_ntimes        = 100;    // timesteps
  Real     in_dt            = 0.005;  // timestep size
  Real     in_t_request     = 1.44;   // initial temperature
  Real     in_rho           = 0.8442; // density
  Integer  in_neigh_every   = 20;     // reneighboring every this many steps
  Real     in_force_cut     = 2.5;    // force cutoff
  Real     in_neigh_cut     = 2.8;    // neighbor skin
  Integer  in_thermo_nstat  = 100;    // thermo calculation every this many steps
  Integer  in_halfneigh     = 1;      // use half neighborlists (default 1)
                                      //            0: full neighborlist
                                      //            1: half neighborlist
  Integer  in_ghost_newton  = 1;      // set usage of newtons third law for ghost atoms
                                      // (only applicable with half neighborlists)
};


// ****************************************************************************
// * ITEMS
// ****************************************************************************
// alias 'bins'//cells{};
particles{
  Real3 r; // Used by lib particles, but should be x here
  Real3 x;
  Real3 v;
  /*

















   */
  Real3 f;
  Real3 xold;
  Real virial;
  Real mass;
  Real dtforce;
};


global{
  // Atom *************************
  Integer atom_natoms;
  Integer atom_nlocal;
  Integer atom_nghost;
  Integer atom_nmax;
  Real    atom_mass;
  // Atom Box *********************
  Real atom_box_prd_x;
  Real atom_box_prd_y;
  Real atom_box_prd_z;
  Real atom_box_lo_x;
  Real atom_box_lo_y;
  Real atom_box_lo_z;
  Real atom_box_hi_x;
  Real atom_box_hi_y;
  Real atom_box_hi_z;
  // Force ************************
  Real force_cutforce;
  Real force_cutforcesq;
  Real force_eng_vdwl;
  Real  force_mass;
  Integer force_evflag;
  Real force_virial;
  Integer force_reneigh;
  // Integrate ********************
  Real integrate_dt;
  Integer integrate_ntimes;
  Integer integrate_nlocal;
  Integer integrate_nmax;
  // Thermo ***********************
  Integer thermo_nstat;
  Integer thermo_mstat;
  Integer thermo_ntimes;
  Integer thermo_steparr;
  Real thermo_tmparr;
  Real thermo_engarr;
  Real thermo_prsarr;
  Real thermo_t_act;
  Real thermo_p_act;
  Real thermo_e_act;
  Real thermo_t_scale;
  Real thermo_e_scale;
  Real thermo_p_scale;
  Real thermo_mvv2e;
  Real thermo_dof_boltz;
  Real thermo_rho;
  // Neighbor *********************
  Integer neighbor_every;                               // re-neighbor every this often
  Integer neighbor_nbinx;
  Integer neighbor_nbiny;
  Integer neighbor_nbinz; // # of global bins
  Real neighbor_cutneigh;                               // neighbor cutoff
  Real neighbor_cutneighsq;                             // neighbor cutoff squared
  Integer neighbor_ncalls;                              // # of times build has been called
  Integer neighbor_max_totalneigh;                      // largest # of neighbors ever stored
  Integer neighbor_numneigh;                            // # of neighbors for each atom
  Integer neighbor_neighbors;                           // array of neighbors of each atom
  Integer neighbor_maxneighs;				                 // max number of neighbors per atom
  Integer neighbor_halfneigh;
  Integer neighbor_ghost_newton;
  Integer neighbor_count;
  Real neighbor_prd_x;             // box size
  Real neighbor_prd_y;
  Real neighbor_prd_z;
  Integer neighbor_nmax;                                // max size of atom arrays in neighbor
  Integer neighbor_bincount;                            // ptr to 1st atom in each bin
  Integer neighbor_bins;                                // ptr to next atom in each bin
  Integer neighbor_atoms_per_bin;
  Integer neighbor_nstencil;                            // # of bins in stencil
  Integer neighbor_stencil;                             // stencil list of bin offsets
  Integer neighbor_mbins;                               // binning parameters
  Integer neighbor_mbinx;
  Integer neighbor_mbiny;
  Integer neighbor_mbinz;
  Integer neighbor_mbinxlo;
  Integer neighbor_mbinylo;
  Integer neighbor_mbinzlo;
  Real neighbor_binsize_x;
  Real neighbor_binsize_y;
  Real neighbor_binsize_z;
  Real neighbor_bininv_x;
  Real neighbor_bininv_y;
  Real neighbor_bininv_z;
};


// ****************************************************************************
// * Forward declarations
// ****************************************************************************
double random(int*);
void atom_addatom(Real x_in, Real y_in, Real z_in,
                  Real vx_in, Real vy_in, Real vz_in){
  #warning atom_addatom needs to be linked to particleAddToCell
}
inline int coord2bin(Real x, Real y, Real z);
Real bindist(int i, int j, int k);


// ****************************************************************************
// * Partie d'initialisation ]-âˆž,-0[
// ****************************************************************************
void input(void) @ -10.0 {
  const Real neighscale = (5.0/6.0);
  
  neighbor_ghost_newton = in_ghost_newton;
  neighbor_halfneigh = in_halfneigh;

  neighbor_nbinx = neighscale * in_nx;
  neighbor_nbiny = neighscale * in_ny;
  neighbor_nbinz = neighscale * in_ny;
  
  integrate_ntimes = in_ntimes;
  integrate_dt = in_dt;
  neighbor_every = in_neigh_every;
  neighbor_cutneigh = in_neigh_cut;
  force_cutforce = in_force_cut;
  thermo_nstat = in_thermo_nstat;

  atom_mass = 1.0;
}


void create_box(void) @ -9.0 {
  double lattice = pow((4.0 / in_rho), (1.0 / 3.0));
  atom_box_prd_x = in_nx * lattice;
  atom_box_prd_y = in_ny * lattice;
  atom_box_prd_z = in_nz * lattice;
}


void neighbor_setup(void) @ -8.0 {
  Real neighbor_coord;
  int mbinxhi, mbinyhi, mbinzhi;
  int nextx, nexty, nextz;

  neighbor_cutneighsq=neighbor_cutneigh*neighbor_cutneigh;
  neighbor_prd_x = atom_box_prd_x;
  neighbor_prd_y = atom_box_prd_y;
  neighbor_prd_z = atom_box_prd_z;
  
  neighbor_binsize_x = neighbor_prd_x / neighbor_nbinx;
  neighbor_binsize_y = neighbor_prd_y / neighbor_nbiny;
  neighbor_binsize_z = neighbor_prd_z / neighbor_nbinz;
  neighbor_bininv_x = 1.0 / neighbor_binsize_x;
  neighbor_bininv_y = 1.0 / neighbor_binsize_y;
  neighbor_bininv_z = 1.0 / neighbor_binsize_z;
 
  neighbor_coord = atom_box_lo_x - neighbor_cutneigh - SMALL * neighbor_prd_x;
  neighbor_mbinxlo = (Integer)(neighbor_coord * neighbor_bininv_x);
  if(neighbor_coord < 0.0) neighbor_mbinxlo = neighbor_mbinxlo - 1;
  neighbor_coord = atom_box_hi_x + neighbor_cutneigh + SMALL * neighbor_prd_x;
  mbinxhi = (Integer)(neighbor_coord * neighbor_bininv_x);
  
  neighbor_coord = atom_box_lo_y - neighbor_cutneigh - SMALL * neighbor_prd_y;
  neighbor_mbinylo = (Integer)(neighbor_coord * neighbor_bininv_y);
  if(neighbor_coord < 0.0) neighbor_mbinylo = neighbor_mbinylo - 1;
  neighbor_coord = atom_box_hi_y + neighbor_cutneigh + SMALL * neighbor_prd_y;
  mbinyhi = (Integer)(neighbor_coord * neighbor_bininv_y);
  
  neighbor_coord = atom_box_lo_z - neighbor_cutneigh - SMALL * neighbor_prd_z;
  neighbor_mbinzlo = (Integer)(neighbor_coord * neighbor_bininv_z);
  if(neighbor_coord < 0.0) neighbor_mbinzlo = neighbor_mbinzlo - 1;
  neighbor_coord = atom_box_hi_z + neighbor_cutneigh + SMALL * neighbor_prd_z;
  mbinzhi = (Integer)(neighbor_coord * neighbor_bininv_z);

  /* extend bins by 1 in each direction to insure stencil coverage */

  neighbor_mbinxlo = neighbor_mbinxlo - 1;
  mbinxhi = mbinxhi + 1;
  neighbor_mbinx = mbinxhi - neighbor_mbinxlo + 1;

  neighbor_mbinylo = neighbor_mbinylo - 1;
  mbinyhi = mbinyhi + 1;
  neighbor_mbiny = mbinyhi - neighbor_mbinylo + 1;

  neighbor_mbinzlo = neighbor_mbinzlo - 1;
  mbinzhi = mbinzhi + 1;
  neighbor_mbinz = mbinzhi - neighbor_mbinzlo + 1;

  /*
    compute bin stencil of all bins whose closest corner to central bin
    is within neighbor cutoff
    for partial Newton (newton = 0),
    stencil is all surrounding bins including self
    for full Newton (newton = 1),
    stencil is bins to the "upper right" of central bin, does NOT include self
    next(xyz) = how far the stencil could possibly extend
    factor < 1.0 for special case of LJ benchmark so code will create
    correct-size stencil when there are 3 bins for every 5 lattice spacings
  */

  nextx = (int)(neighbor_cutneigh * neighbor_bininv_x);
  if(nextx * neighbor_binsize_x < FACTOR * neighbor_cutneigh) nextx++;
  nexty = (int)(neighbor_cutneigh * neighbor_bininv_y);
  if(nexty * neighbor_binsize_y < FACTOR * neighbor_cutneigh) nexty++;
  nextz = (int)(neighbor_cutneigh * neighbor_bininv_z);
  if(nextz * neighbor_binsize_z < FACTOR * neighbor_cutneigh) nextz++;
  neighbor_nmax = (2 * nextz + 1) * (2 * nexty + 1) * (2 * nextx + 1);

#warning neighbor_setup stencil stuff ...
}


particles void integrate_setup(void) @ -8.0 {
  dtforce = 0.5 * integrate_dt;
}


void force_constructor(void) @ -8.0{
  force_cutforce = 0.0;
  force_cutforcesq = 0.0;
  force_reneigh = 0;
}


void force_setup(void) @ -7.0{
  force_cutforcesq = force_cutforce * force_cutforce;
}



// initialize atoms on fcc lattice in parallel fashion
int create_atoms(void) @ -6.0 {
  const double alat=pow((4.0 / in_rho), (1.0 / 3.0));
  /* determine loop bounds of lattice subsection that overlaps my sub-box
     insure loop bounds do not exceed nx,ny,nz */
  Integer ilo = (Integer)(atom_box_lo_x / (0.5 * alat) - 1);
  Integer ihi = (Integer)(atom_box_hi_x / (0.5 * alat) + 1);
  Integer jlo = (Integer)(atom_box_lo_y / (0.5 * alat) - 1);
  Integer jhi = (Integer)(atom_box_hi_y / (0.5 * alat) + 1);
  Integer klo = (Integer)(atom_box_lo_z / (0.5 * alat) - 1);
  Integer khi = (Integer)(atom_box_hi_z / (0.5 * alat) + 1);
  double xtmp, ytmp, ztmp, vx, vy, vz;
  Integer i, j, k, m, n;
  Integer sx=0,sy=0,sz=0;
  Integer ox=0,oy=0,oz=0;
  Integer subboxdim = 8;
  Integer iflag=0,iflagall,natoms;

  atom_natoms = 4 * in_nx * in_ny * in_nz;
  atom_nlocal = 0;
  ilo = MAX(ilo, 0);
  ihi = MIN(ihi, 2 * in_nx - 1);
  jlo = MAX(jlo, 0);
  jhi = MIN(jhi, 2 * in_ny - 1);
  klo = MAX(klo, 0);
  khi = MIN(khi, 2 * in_nz - 1);
  for(;oz * subboxdim <= khi;){
    k = oz * subboxdim + sz;
    j = oy * subboxdim + sy;
    i = ox * subboxdim + sx;
    if(iflag) continue;
    if(((i + j + k) % 2 == 0) &&
        (i >= ilo) && (i <= ihi) &&
        (j >= jlo) && (j <= jhi) &&
        (k >= klo) && (k <= khi)) {
      xtmp = 0.5 * alat * i;
      ytmp = 0.5 * alat * j;
      ztmp = 0.5 * alat * k;
      if(xtmp >= atom_box_lo_x && xtmp < atom_box_hi_x &&
          ytmp >= atom_box_lo_y && ytmp < atom_box_hi_y &&
          ztmp >= atom_box_lo_z && ztmp < atom_box_hi_z) {
        n = k * (2 * in_ny) * (2 * in_nx) + j * (2 * in_nx) + i + 1;
        for(m = 0; m < 5; m++) random(&n);
        vx = random(&n);
        for(m = 0; m < 5; m++) random(&n);
        vy = random(&n);
        for(m = 0; m < 5; m++) random(&n);
        vz = random(&n);
        atom_addatom(xtmp, ytmp, ztmp, vx, vy, vz);
      }
    }
    sx++;
    if(sx == subboxdim) { sx=0; sy++; }
    if(sy == subboxdim) { sy=0; sz++; }
    if(sz == subboxdim) { sz=0; ox++; }
    if(ox * subboxdim > ihi) { ox=0; oy++; }
    if(oy * subboxdim > jhi) { oy=0; oz++; }
  }
  // check for overflows on any proc
  iflagall=mpi_reduce(ReduceMax,iflag);
  if(iflagall) {
    info()<<"No memory for atoms";
    return 1;
  }
  // check that correct # of atoms were created
  natoms=mpi_reduce(ReduceSum, atom_nlocal);
  if(natoms != atom_natoms) {
    info()<<"Created incorrect # of atoms\n";
    return 1;
  }
  return 0;
}


void thermo_setup(void) @ -5.5{
  //Integer maxstat;

  thermo_rho = in_rho;
  thermo_ntimes = integrate_ntimes;
  //if(thermo_nstat == 0) maxstat = 2;
  //else maxstat = thermo_ntimes / thermo_nstat + 2;
  //thermo_steparr = (MMD_int*) malloc(maxstat * sizeof(MMD_int));
  //thermo_tmparr = (MMD_float*) malloc(maxstat * sizeof(MMD_float));
  //thermo_engarr = (MMD_float*) malloc(maxstat * sizeof(MMD_float));
  //thermo_prsarr = (MMD_float*) malloc(maxstat * sizeof(MMD_float));

  thermo_mvv2e = 1.0;
  thermo_dof_boltz = (atom_natoms * 3 - 3);
  thermo_t_scale = thermo_mvv2e / thermo_dof_boltz;
  thermo_p_scale = 1.0 / 3 / atom_box_prd_x / atom_box_prd_y / atom_box_prd_z;
  thermo_e_scale = 0.5;
}


particles void iniParticles(void) @ -5.4{
  v=0.0;
}


particles Real3 sumTotVParticles(Real3 totv){
  totv+=v;
  return totv;
}
particles void adjustVParticles(Real3 totv){
  v-=totv;
}
particles void applyFactorVParticles(Real factor){
  v*=factor;
}
// adjust initial velocities to give desired temperature
void create_velocity(void) @ -5.3{
  Real3 vtot;  // zero center-of-mass motion
  double t, factor;
  
  vtot=0.0;
  vtot=sumTotVParticles(vtot);
  vtot = mpi_reduce(ReduceSum,vtot);
  vtot /= atom_natoms;
  adjustVParticles(vtot);
  // rescale velocities, including old ones
  thermo_t_act = 0;
  t = thermo_temperature();
  factor = sqrt(in_t_request / t);
  applyFactorVParticles(factor);
}

void system_parameters(void) @ -5.0{
  info() << "# Systemparameters: ";
  info() << "\t# ForceStyle: LJ";
  info() << "\t# Units: LJ";
  info() << "\t# Atoms: " << atom_natoms;
  info() << "\t# System size: "
         << atom_box_prd_x<<"x"<< atom_box_prd_y<<"x"<< atom_box_prd_z << " "
         << in_nx << "x" << in_ny << "x" << in_nz;
  info() << "\t# Density: "<< in_rho;
  info() << "\t# Force cutoff: "<< force_cutforce;
  info() << "\t# Neigh cutoff: "<< neighbor_cutneigh;
  info() << "\t# Half neighborlists: "<< neighbor_halfneigh;
  info() << "\t# Neighbor bins: "<< neighbor_nbinx<<"x"<< neighbor_nbiny<<"x"<< neighbor_nbinz;
  info() << "\t# Neighbor frequency: "<< neighbor_every;
  info() << "\t# Timestep size: "<< integrate_dt;
  info() << "\t# Thermo frequency: "<< thermo_nstat;
  info() << "\t# Ghost Newton: "<< neighbor_ghost_newton;
}


/*
  comm.exchange(atom);
  move atoms to correct proc boxes
  send out atoms that have left my box, receive ones entering my box
  this routine called before every reneighboring
  atoms exchanged with all 6 stencil neighbors
*/


/*
  comm.borders(atom);
  make lists of nearby atoms to send to neighboring procs at every timestep
  one list is created for every swap that will be made
  as list is made, actually do swaps
  this does equivalent of a communicate (so don't need to explicitly
  call communicate routine on reneighboring timestep)
  this routine is called before every reneighboring
*/


/*
  neighbor.build(atom);
  binned neighbor list construction with full Newton's 3rd law
  every pair stored exactly once by some processor
  each owned atom i checks its own bin and other bins in Newton stencil
*/


void forceEvflag(void) @ -4.0{
  force_evflag=1;
}


particles void flushForce(void) @ -4.0{
  f=0.0;
}
// force->compute(atom, neighbor, comm, me);
void ForceLJ_compute_original(Cell i, Cell j){
  //int nlocal,nall;//nall, numneigh;
  Real3 tmp;
  Real3 del;
  Real rsq;
  Real sr2, sr6, force;
  //int* neighs;
  //Real x, f;

  //nlocal = atom_nlocal;
  //nall = atom_nlocal + atom_nghost;
  //x = atom_x;
  //f = atom_f;

  force_eng_vdwl = 0;
  force_virial = 0;
  
  // loop over all neighbors of my atoms
  // store force on both atoms i and j
  foreach i particle{
    //neighs = &neighbor_neighbors[i * neighbor_maxneighs];
    //numneigh = neighbor_numneigh[i];
    tmp = x[pi];
    foreach j particle{
      del = tmp - x[pj];
      rsq = dot(del,del);
      if(rsq < force_cutforcesq) {
        sr2 = 1.0 / rsq;
        sr6 = sr2 * sr2 * sr2;
        force = 48.0 * sr6 * (sr6 - 0.5) * sr2;
        f[pi] += del * force;
        f[pj] -= del * force;
        if(force_evflag) {
          force_eng_vdwl = force_eng_vdwl+(4.0 * sr6 * (sr6 - 1.0));
          force_virial = force_virial + rsq * force;
        }
      }
    }
  }
}
// loop over all boxes in system via pairs
own cells void cellsComputeForceViaPairs(void) @ -3.8,2.5 {
  ForceLJ_compute_original(*this,*this);            // itself
  foreach cell ForceLJ_compute_original(*this,*c);  // neighbors
}


// * reduced pressure from virial
Real thermo_pressure(Real t){
  Real virial = 0;
  thermo_p_act = force_virial;
  virial=mpi_reduce(ReduceSum,thermo_p_act);
  //printf("Pres: %e %e %e %e\n",t,dof_boltz,virial,p_scale);
  return (t * thermo_dof_boltz + virial) * thermo_p_scale;
}

// * reduced potential energy
Real thermo_energy(void){
  Real eng;
  thermo_e_act = force_eng_vdwl;
  if(neighbor_halfneigh) 
    thermo_e_act = thermo_e_act*2.0;
  thermo_e_act = thermo_e_act*thermo_e_scale;
  eng=mpi_reduce(ReduceSum,thermo_e_act);
  return eng / atom_natoms;
}

// *  reduced temperature
particles Real particle_thermo_temperature(Real t){
  t+=dot(v,v)*mass;
  return t;
}
Real thermo_temperature(void){
  Real t = 0.0;
  thermo_t_act = 0;
  particle_thermo_temperature(t);
  thermo_t_act = thermo_t_act+t;
  t=mpi_reduce(ReduceSum, thermo_t_act);
  return t * thermo_t_scale;
}

void thermo_compute(Integer iflag) {
  Integer istep;
  Real t, eng, p;
  if(iflag > 0 && iflag % thermo_nstat) return;
  if(iflag == -1 && thermo_nstat > 0 && thermo_ntimes % thermo_nstat == 0) return;
  thermo_t_act = 0;
  thermo_e_act = 0;
  thermo_p_act = 0;
  t = thermo_temperature();
  istep = iflag;
  eng = thermo_energy();
  p = thermo_pressure(t);
  if(iflag == -1) istep = thermo_ntimes;
  if(iflag == 0) thermo_mstat = 0;
  //steparr[thermo_mstat] = istep;
  //tmparr[thermo_mstat] = t;
  //engarr[thermo_mstat] = eng;
  //prsarr[thermo_mstat] = p;
  thermo_mstat = thermo_mstat+1;
}

// thermo.compute(0, atom, neighbor, force, timer, comm);
void ini_thermo_compute(void) @ -3.0{
  thermo_compute(0);
}


particles void integrate_init(void) @ -2.0{
  mass = atom_mass;
  dtforce /= mass;
}


// ****************************************************************************
// * Partie de calcul ]+0,+âˆž[ 
// ****************************************************************************

particles void integrate_initialIntegrate(void) @ 1.0{
  v += dtforce * f;
  x += in_dt * v;
}


// * integrate.run(atom, force, neighbor, comm, thermo, timer);
particles void integrate_run_1(void) @ 2.0{
  Integer n = GlobalIteration;
  if((n + 1) % neighbor_every) {
    //comm.communicate(atom);
  }  
  force_evflag = (n + 1) % thermo_nstat == 0;
}

//own cells void cellsComputeForceViaPairs(void) @ 2.5

particles void integrate_run_2(void) @ 3.0{
  if(neighbor_halfneigh && neighbor_ghost_newton){
    //comm_reverse_communicate(atom);
  }
  //nlocal = atom_nlocal;
}

particles void integrate_finalIntegrate(void) @ 4.0{
  v += dtforce * f;
}

void integrate_thermo_compute(void) @ 5.0{
  if(thermo_nstat)
    thermo_compute(GlobalIteration + 1);
}


 
/* Park/Miller RNG w/out MASKING, so as to be like f90s version */
#define IA 16807
#define IM 2147483647
#define AM (1.0/IM)
#define IQ 127773
#define IR 2836
#define MASK 123459876
double random(int *idum){
  int k;
  double ans;

  k = (*idum) / IQ;
  *idum = IA * (*idum - k * IQ) - IR * k;

  if(*idum < 0) *idum += IM;

  ans = AM * (*idum);
  return ans;
}
#undef IA
#undef IM
#undef AM
#undef IQ
#undef IR
#undef MASK



/* convert xyz atom coords into local bin #
   take special care to insure ghost atoms with
   coord >= prd or coord < 0.0 are put in correct bins */
inline int coord2bin(Real _x, Real _y, Real _z){
  int ix, iy, iz;
  if(_x >= neighbor_prd_x)
    ix = (int)((_x - neighbor_prd_x) * neighbor_bininv_x) + neighbor_nbinx - neighbor_mbinxlo;
  else if(_x >= 0.0) ix = (int)(_x * neighbor_bininv_x) - neighbor_mbinxlo;
  else ix = (int)(_x * neighbor_bininv_x) - neighbor_mbinxlo - 1;
  if(_y >= neighbor_prd_y)
    iy = (int)((_y - neighbor_prd_y) * neighbor_bininv_y) + neighbor_nbiny - neighbor_mbinylo;
  else if(_y >= 0.0) iy = (int)(_y * neighbor_bininv_y) - neighbor_mbinylo;
  else iy = (int)(_y * neighbor_bininv_y) - neighbor_mbinylo - 1;
  if(_z >= neighbor_prd_z)
    iz = (int)((_z - neighbor_prd_z) * neighbor_bininv_z) + neighbor_nbinz - neighbor_mbinzlo;
  else if(_z >= 0.0) iz = (int)(_z * neighbor_bininv_z) - neighbor_mbinzlo;
  else iz = (int)(_z * neighbor_bininv_z) - neighbor_mbinzlo - 1;
  return (iz * neighbor_mbiny * neighbor_mbinx + iy * neighbor_mbinx + ix + 1);
}


/* compute closest distance between central bin (0,0,0) and bin (i,j,k) */
Real bindist(int i, int j, int k){
  Real delx, dely, delz;
  if(i > 0) delx = (i - 1) * neighbor_binsize_x;
  else if(i == 0) delx = 0.0;
  else delx = (i + 1) * neighbor_binsize_x;
  if(j > 0) dely = (j - 1) * neighbor_binsize_y;
  else if(j == 0) dely = 0.0;
  else dely = (j + 1) * neighbor_binsize_y;
  if(k > 0) delz = (k - 1) * neighbor_binsize_z;
  else if(k == 0) delz = 0.0;
  else delz = (k + 1) * neighbor_binsize_z;
  return (delx * delx + dely * dely + delz * delz);
}
