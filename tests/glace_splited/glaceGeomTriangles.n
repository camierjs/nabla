// Calcul des aires orientées des faces
cells void geom_computeSurfaceAndVolume_Triangle(void) @ -20.0,23.0 if (option_triangles){
  const Real3 fst_edge = coord[2]-coord[0];
  const Real3 snd_edge = coord[0]-coord[1];
  V=½*cross2D(fst_edge,snd_edge);
}


// Calcul des résultantes aux sommets des mailles
cells void geom_computeNormal_Triangle(void) @ -20.0,24.0 if (option_triangles){
  const Real3 s0=coord[0];
  const Real3 s1=coord[1];
  const Real3 s2=coord[2];
  const Real3 c0 = ½*(s0+s1);
  const Real3 c1 = ½*(s1+s2);
  const Real3 c2 = ½*(s2+s0);
  const Real3 c3 = s0;
  const Real3 length20 = ½*(c2-c0);
  const Real3 length31 = ½*(c3-c1);
  CQs[0].x = -(2.0*length20.y);
  CQs[0].y =  (2.0*length20.x);
  CQs[0].z = 0.0;
  absCQs[0]=CQs[0].abs();
  CQs[1].x = -(length31.y-length20.y);
  CQs[1].y =  (length31.x-length20.x); 
  CQs[1].z = 0.0;
  absCQs[1]=CQs[1].abs();
  CQs[2].x = -(-length31.y-length20.y);
  CQs[2].y =  (-length31.x-length20.x); 
  CQs[2].z = 0.0;
  absCQs[2]=CQs[2].abs();
}

