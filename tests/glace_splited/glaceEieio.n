/*void hydroInit(void) @ -25.0{
  const Integer maxNodePerCell=mesh()->cellFamily()->maxNodePerItem();
  CQs.resize(maxNodePerCell);
  absCQs.resize(maxNodePerCell);
  AQs.resize(maxNodePerCell);
  reconstructed_u.resize(maxNodePerCell);
  reconstructed_p.resize(maxNodePerCell);
  δt=option_δt_ini;
  assert(option_triangles^option_quads);
}
*/
//void eieioM(void)@ -18.9{synchronize(m);}
//void eieioρΕc(void)@ -17.9{synchronize(ρΕ);synchronize(c);}


/*outer faces void applyBoundaryConditionsSymmetries(void) @ 13.1{
  const Real Y_MIN = option_y_min;
  const Real Y_MAX = option_y_max;
  const Real3x3 I = math::matrix3x3Id();
  //const Real3 vector = (coord[1]-coord[0])/(coord[1]-coord[0]).abs();
  foreach node{
    if ((coord.y==Y_MIN)||(coord.y==Y_MAX)){
      //|| (coord.x==X_MIN)||(coord.x==X_MAX))) continue;
      //const Real orientation = (coord[1].abs()>coord[0].abs())?-1.0:1.0;
      const Real orientation = (coord.y==Y_MIN)?-1.0:1.0;
      //const Real3 normal = orientation*Real3(-vector.y,vector.x,0.);
      const Real3 normal = orientation*Real3(0.0,1.0,0.0);
      const Real3x3 nxn = normal⊗normal;
      const Real3x3 P = I-nxn;
      node_u_matrix = node_u_matrix ⊛ P; 
      node_u_matrix = P ⊛ node_u_matrix;
      node_u_matrix += nxn*(node_u_matrix.x.x +
                            node_u_matrix.y.y +
                            node_u_matrix.z.z );
      node_u_second_member = P ⨂ node_u_second_member;
    }
  }
  }*/
//void eieio(void)@ 14.1{synchronize(node_u);}
