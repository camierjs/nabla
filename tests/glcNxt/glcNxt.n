///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LELANDAIS Benoit - benoit.lelandais@cea.fr                //
//                 OUDOT Marie-Pierre - marie-pierre.oudot@cea.fr            //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                 DEL PINO Stephane - stephane.delpino@cea.fr               //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñù¬≤;

options {
  ‚Ñæ DEBUG = false;
  ‚Ñï X_EDGE_ELEMS = 8;
  ‚Ñï Y_EDGE_ELEMS = 8;
  ‚Ñï Z_EDGE_ELEMS = 1;
  
  ‚Ñù LENGTH = 1.0;
  ‚Ñù option_x_interface = 0.5;

  ‚Ñù option_stoptime = 0.1;
  ‚Ñï option_max_iterations = 48;
  
  ‚Ñù Œ≥ = 1.4;
  ‚Ñù option_p_ini_zg = 1.0;
  ‚Ñù option_œÅ_ini_zg = 1.0;
  
  ‚Ñù option_p_ini_zd = 0.1;
  ‚Ñù option_œÅ_ini_zd = 0.125;
  
  ‚Ñù option_Œ¥t_ini = 1.0e-4;
  ‚Ñù option_Œ¥t_min = 1.e-12;
  ‚Ñù option_Œ¥t_max = 0.01;
  ‚Ñù option_Œ¥t_cfl = 0.1;
  ‚Ñù option_Œ¥t_min_variation = 0.9;
  ‚Ñù option_Œ¥t_max_variation = 0.1;
};

cells {
  ‚Ñù p,p_ic;
  ‚Ñù œÅ,œÅ_ic;
  ‚Ñù¬≥ center;
  ‚Ñù absC [nodes];
  ‚Ñù¬≥ C_ic[nodes],C[nodes],F[nodes];
  ‚Ñù V_ic,V;
  ‚Ñù¬≥À£¬≥ A[nodes];
  ‚Ñù Œ¥tj;
  ‚Ñù¬≥ u, u_n_plus_1;
  ‚Ñù m, c, e, E, E_n_plus_1;
};

nodes {
	‚Ñù¬≥ X_ic,X,X_n_plus_1;
	‚Ñù¬≥À£¬≥ M,Mt;
	‚Ñù¬≥ u_node;
	‚Ñù¬≥ b,bt;
};

global {
  ‚Ñù Œ¥t_n_plus_1;
  ‚Ñù t,t_n_plus_1;
  ‚Ñù Œ¥tmin;
  ‚Ñï chkC,chkU,chkV;
};

‚àÄ nodes @ -40 { X_ic = coord; }

‚àÄ cells @ -10 { u = 0.0; }

iniT @ -10 { t = 0.0; }

‚àÄ cells IniCenter @ -9 {
  ‚Ñù¬≥ tmp = 0;
  ‚àÄ nodes tmp += X_ic;
  center = ¬º * tmp;
}

‚àÄ cells ComputeCjrIc @ -9 {
  ‚àÄ nodes C_ic = ¬Ω * perp(X_ic[#-1], X_ic[#+1]);
}

‚àÄ nodes @ -9 {	X = X_ic;  }

iniDeltaT@ -9 {  Œ¥t = option_Œ¥t_ini; }

‚àÄ cells IniIcTrue @ -7 {
  if (center.x < option_x_interface) {
    œÅ_ic = option_œÅ_ini_zg;
    p_ic = option_p_ini_zg;
  }
}

‚àÄ cells IniIcFalse @ -7 {
  if (!(center.x < option_x_interface)) {
    œÅ_ic = option_œÅ_ini_zd;
    p_ic = option_p_ini_zd;
  }
}

‚àÄ cells IniVIc @ -7 {
  ‚Ñù tmp = 0;
  ‚àÄ nodes tmp += X_ic‚ãÖC_ic;
  V_ic = ¬Ω*fabs(tmp);
}


‚àÄ cells IniM @ -5 { m = œÅ_ic * V_ic; }

‚àÄ cells @ -5 { E = p_ic / ((Œ≥ - 1.0) * œÅ_ic); }


// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+‚àû[ 
// ****************************************************************************
computeLoop @ 0.0 { printf("\n[37m[#%d] %f[0m",iteration, time);}

‚àÄ cells ComputeCjr @ 5 { ‚àÄ nodes C = ¬Ω * perp(X[#-1], X[#+1]); }

‚àÄ cells ComputeAbsjr @ 7 { ‚àÄ nodes absC = norm(C); }

‚àÄ cells ComputeV @ 7 {
  ‚Ñù tmp = 0;
  ‚àÄ nodes tmp += X‚ãÖC;
  V = ¬Ω * fabs(tmp);
}

‚àÄ cells ComputeDensity @ 9 { assert(V>0.0); œÅ = m / V; }

‚àÄ cells ComputeInternalEngergy @ 9 { e = E - ¬Ω*(u‚ãÖu); }

‚àÄ cells ComputeEOSp @ 11 {	p = (Œ≥ - 1.0) * œÅ * e; }

‚àÄ cells ComputeEOSc @ 13 { assert(œÅ>0.0); c = ‚àö(Œ≥ * p / œÅ);}

‚àÄ cells ComputeŒ¥tj @ 15 {
  ‚Ñù tmp = 0;
  ‚àÄ nodes tmp += absC;
  assert(tmp>0.0);
  Œ¥tj = 2.0 * V / (c * tmp);
}

‚àÄ cells ComputeAjr @ 15 { ‚àÄ nodes A = œÅ*c*(C‚äóC)/absC; }

‚àÄ nodes ComputeMr @ 17 {
  ‚Ñù¬≥À£¬≥ tmp; tmp.z = ‚Ñù¬≥(0.0,0.0,1.0);
  ‚àÄ cells tmp += A;
  M = tmp;
}

‚àÄ nodes ComputeBr @ 17 {
  ‚Ñù¬≥ tmp = 0;
  ‚àÄ cells tmp += C*p + A‚®Çu;
  b = tmp;
}

‚àÄ cells Œ¥tmin <?= Œ¥tj @ 15.1;

hydroTimeStepCtrl @ 17.0{
  ‚Ñù new_Œ¥t=option_Œ¥t_cfl*Œ¥tmin;
  const ‚Ñù max_time_step = (1.0+option_Œ¥t_max_variation)*Œ¥t;
  const ‚Ñù min_time_step = (1.0-option_Œ¥t_min_variation)*Œ¥t;
  if (new_Œ¥t > max_time_step) new_Œ¥t=max_time_step;
  if (new_Œ¥t < min_time_step) new_Œ¥t=min_time_step;
  new_Œ¥t = fmin(new_Œ¥t, option_Œ¥t_max);
  new_Œ¥t = fmax(new_Œ¥t, option_Œ¥t_min);
  Œ¥t_n_plus_1 = new_Œ¥t;
}

‚àÄ /*inner*/ nodes ComputeMt @ 19 { Mt = M; }

‚àÄ /*inner*/ nodes ComputeBt @ 19 { bt = b; }

‚àÄ outer faces OuterFacesComputations @ 19.1{
  ‚Ñù Y_MIN = 0.0; 
  ‚Ñù Y_MAX = LENGTH;
  ‚Ñù¬≥À£¬≥ I = matrix3x3Id();
  ‚Ñù¬≥ nY={0.0,1.0,0.0};
  ‚àÄ node{
    if ((X.y==Y_MIN)||(X.y==Y_MAX)){
      ‚Ñù sign = (X.y==Y_MIN)?-1.0:1.0;
      ‚Ñù¬≥ n = sign*nY;
      ‚Ñù¬≥À£¬≥ nxn = n‚äón;
      ‚Ñù¬≥À£¬≥ P = I-nxn;
      Mt = M‚äõP;
      Mt = P‚äõMt;
      Mt += nxn*(Mt.x.x+Mt.y.y+Mt.z.z);
      bt = P‚®Çb;
    }
  }
}
‚àÄ outer faces @ 19.2 {
  ‚Ñù X_MIN = 0.0;
  ‚Ñù X_MAX = LENGTH;
  ‚Ñù¬≥À£¬≥ I = matrix3x3Id();
  ‚àÄ node{
    if (!((fabs(X.x-X_MIN)<1.e-10) ||
          ((fabs(X.x-X_MAX)<1.e-10)))) continue;
    Mt = I;
    bt = 0.0;
  }
}

calc_t_n_plus_1 @ 19 { t_n_plus_1 = t + Œ¥t_n_plus_1; }

‚àÄ nodes ComputeU @ 21 {
  const ‚Ñù det = matrixDeterminant(Mt);
  if (det==0.0){
    printf("\n[ComputeU] node %d: matrixDeterminant NULL!",uid);
    assert(det!=0.0);
  }
  u_node = inverseMatrix(Mt,det) ‚®Ç bt;
  u_node.z=0.0;
}

‚àÄ cells ComputeFjr @ 23 { ‚àÄ nodes F = p*C + A ‚®Ç (u-u_node); }

‚àÄ nodes @ 23 {	X_n_plus_1 = X + Œ¥t * u_node; }

‚àÄ cells @ 25 {
  ‚Ñù¬≥ tmp = 0;
  ‚àÄ nodes tmp += F;
  u_n_plus_1 = u - Œ¥t * tmp / m;
}

‚àÄ cells @ 25 {
  ‚Ñù tmp = 0;
  ‚àÄ nodes tmp += F‚ãÖu_node;
  E_n_plus_1 = E - Œ¥t * tmp / m;
}


// *************************************************************
// * Recopies
// *************************************************************
‚àÄ cells @ 30 {u = u_n_plus_1;}
‚àÄ cells @ 30 {E = E_n_plus_1;}
‚àÄ nodes @ 30 {X = X_n_plus_1;}
  loopT @ 30 {t = t_n_plus_1;}
 loopDT @ 30 {Œ¥t=Œ¥t_n_plus_1;}


// ***************************************************************************
// * Checksum on velocity
// ***************************************************************************
chkIni @ 31.0 if (iteration==(option_max_iterations-1)) { chkC=chkU=chkV=0; }
‚àÄ inner cells @ 31.1 if (iteration==(option_max_iterations-1)) {
  const long int chl=*(long int*)&c;
  chkC ^= (int)(chl>>32);
  chkC |= (int)(chl&((1l<<32)-1));
}
‚àÄ inner cells @ 31.1 if (iteration==(option_max_iterations-1)) {
  const long int uhl=*(long int*)&u;
  chkU ^= (int)(uhl>>32);
  chkU |= (int)(uhl&((1l<<32)-1));
}
‚àÄ inner cells @ 31.1 if (iteration==(option_max_iterations-1)) {
  const long int vhl=*(long int*)&V;
  chkV ^= (int)(vhl>>32);
  chkV |= (int)(vhl&((1l<<32)-1));
}
chk8x8x1 @ 31.2 if (iteration==(option_max_iterations-1) &&
                      X_EDGE_ELEMS==8 && Y_EDGE_ELEMS==8 && Z_EDGE_ELEMS==1 &&
                      LENGTH==1.0 && option_x_interface==0.5 &&
                      option_stoptime==0.1 && option_max_iterations==48 &&
                      option_p_ini_zg==1.0 && option_œÅ_ini_zg==1.0 &&
                      option_p_ini_zd==0.1 && option_œÅ_ini_zd==0.125 &&
                      option_Œ¥t_ini==1.e-4 && option_Œ¥t_min==1.e-12 &&
                      option_Œ¥t_max==0.01 && option_Œ¥t_cfl==0.1 &&
                      option_Œ¥t_min_variation==0.9 && option_Œ¥t_max_variation==0.1) {
  assert((unsigned int)chkC==0xD77F6A77u &&
         (unsigned int)chkU==0xFDB1F8BFu &&
         (unsigned int)chkV==0xF57FF3F7u);
  printf("\n[1;32m[checked] 0x%X,0x%X,0x%X ![m",chkC,chkU,chkV);
}

// *************************************************************
// * Fonctions
// *************************************************************
‚Ñù¬≥ perp(‚Ñù¬≥ Œ±, ‚Ñù¬≥ Œ≤){ return ‚Ñù¬≥(Œ≤.y-Œ±.y,-Œ≤.x+Œ±.x,0.0);}
