
// ****************************************************************************
// * integrateStressForElems (2/3): sumElemFaceNormal
// ****************************************************************************
inline void sumElemFaceNormal(Real *_B0x,Real *_B0y,Real *_B0z,
                              Real *_B1x,Real *_B1y,Real *_B1z,
                              Real *_B2x,Real *_B2y,Real *_B2z,
                              Real *_B3x,Real *_B3y,Real *_B3z,
                              const int ia,const int ib,const int ic,const int id,
                              const Real* restrict x,
                              const Real* restrict y,
                              const Real* restrict z){
  const Real bisect0x = ½*(x[id]+x[ic]-x[ib]-x[ia]);
  const Real bisect0y = ½*(y[id]+y[ic]-y[ib]-y[ia]);
  const Real bisect0z = ½*(z[id]+z[ic]-z[ib]-z[ia]);
  
  const Real bisect1x = ½*(x[ic]+x[ib]-x[id]-x[ia]);
  const Real bisect1y = ½*(y[ic]+y[ib]-y[id]-y[ia]);
  const Real bisect1z = ½*(z[ic]+z[ib]-z[id]-z[ia]);
  
  const Real _areax = ¼*(bisect0y * bisect1z - bisect0z * bisect1y);//(bisect0⨯bisect1);
  const Real _areay = ¼*(bisect0z * bisect1x - bisect0x * bisect1z);//(bisect0⨯bisect1);
  const Real _areaz = ¼*(bisect0x * bisect1y - bisect0y * bisect1x);//(bisect0⨯bisect1);

  *_B0x += _areax;
  *_B1x += _areax;
  *_B2x += _areax;
  *_B3x += _areax;

  *_B0y += _areay;
  *_B1y += _areay;
  *_B2y += _areay;
  *_B3y += _areay;

  *_B0z += _areaz;
  *_B1z += _areaz;
  *_B2z += _areaz;
  *_B3z += _areaz;
}



// ****************************************************************************
// * compute the hourglass modes
// ****************************************************************************
inline void _computeHourglassModes(const int i1,
                                   const Real _determ,
                                   const Real *_dvdx,
                                   const Real *_dvdy,
                                   const Real *_dvdz,
                                   const Real gamma[4][8],
                                   const Real *x8n,
                                   const Real *y8n,
                                   const Real *z8n,
                                   Real* restrict hourgam0, Real* restrict hourgam1,
                                   Real* restrict hourgam2, Real* restrict hourgam3,
                                   Real* restrict hourgam4, Real* restrict hourgam5,
                                   Real* restrict hourgam6, Real* restrict hourgam7){
  const Real volinv=1.0/_determ;
  const Real hourmodx =
    x8n[0]*gamma[i1][0] + x8n[1]*gamma[i1][1] +
    x8n[2]*gamma[i1][2] + x8n[3]*gamma[i1][3] +
    x8n[4]*gamma[i1][4] + x8n[5]*gamma[i1][5] +
    x8n[6]*gamma[i1][6] + x8n[7]*gamma[i1][7];
  const Real hourmody =
    y8n[0]*gamma[i1][0] + y8n[1]*gamma[i1][1] +
    y8n[2]*gamma[i1][2] + y8n[3]*gamma[i1][3] +
    y8n[4]*gamma[i1][4] + y8n[5]*gamma[i1][5] +
    y8n[6]*gamma[i1][6] + y8n[7]*gamma[i1][7];
  const Real hourmodz =
    z8n[0]*gamma[i1][0] + z8n[1]*gamma[i1][1] +
    z8n[2]*gamma[i1][2] + z8n[3]*gamma[i1][3] +
    z8n[4]*gamma[i1][4] + z8n[5]*gamma[i1][5] +
    z8n[6]*gamma[i1][6] + z8n[7]*gamma[i1][7];
  hourgam0[i1] = gamma[i1][0]-volinv*((_dvdx[0]*hourmodx)+(_dvdy[0]*hourmody)+(_dvdz[0]*hourmodz));
  hourgam1[i1] = gamma[i1][1]-volinv*((_dvdx[1]*hourmodx)+(_dvdy[1]*hourmody)+(_dvdz[1]*hourmodz));
  hourgam2[i1] = gamma[i1][2]-volinv*((_dvdx[2]*hourmodx)+(_dvdy[2]*hourmody)+(_dvdz[2]*hourmodz));
  hourgam3[i1] = gamma[i1][3]-volinv*((_dvdx[3]*hourmodx)+(_dvdy[3]*hourmody)+(_dvdz[3]*hourmodz));
  hourgam4[i1] = gamma[i1][4]-volinv*((_dvdx[4]*hourmodx)+(_dvdy[4]*hourmody)+(_dvdz[4]*hourmodz));
  hourgam5[i1] = gamma[i1][5]-volinv*((_dvdx[5]*hourmodx)+(_dvdy[5]*hourmody)+(_dvdz[5]*hourmodz));
  hourgam6[i1] = gamma[i1][6]-volinv*((_dvdx[6]*hourmodx)+(_dvdy[6]*hourmody)+(_dvdz[6]*hourmodz));
  hourgam7[i1] = gamma[i1][7]-volinv*((_dvdx[7]*hourmodx)+(_dvdy[7]*hourmody)+(_dvdz[7]*hourmodz));
}

// ****************************************************************************
// * calcElemFBHourglassForce
// ****************************************************************************
inline void calcElemFBHourglassForce(const Real* xd,
                                     const Real* yd,
                                     const Real* zd,
                                     const Real* hourgam0,
                                     const Real* hourgam1,
                                     const Real* hourgam2,
                                     const Real* hourgam3,
                                     const Real* hourgam4,
                                     const Real* hourgam5,
                                     const Real* hourgam6,
                                     const Real* hourgam7,
                                     const Real coefficient,
                                     Real* restrict hgfx,
                                     Real* restrict hgfy,
                                     Real* restrict hgfz){
  const register Real h00x =
    hourgam0[0]*xd[0] + hourgam1[0]*xd[1] + hourgam2[0]*xd[2] + hourgam3[0]*xd[3]  + 
    hourgam4[0]*xd[4] + hourgam5[0]*xd[5] + hourgam6[0]*xd[6] + hourgam7[0]*xd[7];
  const register Real h01x =
    hourgam0[1]*xd[0] + hourgam1[1]*xd[1] + hourgam2[1]*xd[2] + hourgam3[1]*xd[3]  + 
    hourgam4[1]*xd[4] + hourgam5[1]*xd[5] + hourgam6[1]*xd[6] + hourgam7[1]*xd[7];
  const register Real h02x =
    hourgam0[2]*xd[0] + hourgam1[2]*xd[1] + hourgam2[2]*xd[2] + hourgam3[2]*xd[3] + 
    hourgam4[2]*xd[4] + hourgam5[2]*xd[5] + hourgam6[2]*xd[6] + hourgam7[2]*xd[7];
  const register Real h03x =
    hourgam0[3]*xd[0] + hourgam1[3]*xd[1] + hourgam2[3]*xd[2] + hourgam3[3]*xd[3]  + 
    hourgam4[3]*xd[4] + hourgam5[3]*xd[5] + hourgam6[3]*xd[6] + hourgam7[3]*xd[7];
  
  const register Real h00y =
    hourgam0[0]*yd[0] + hourgam1[0]*yd[1] + hourgam2[0]*yd[2] + hourgam3[0]*yd[3]  + 
    hourgam4[0]*yd[4] + hourgam5[0]*yd[5] + hourgam6[0]*yd[6] + hourgam7[0]*yd[7];
  const register Real h01y =
    hourgam0[1]*yd[0] + hourgam1[1]*yd[1] + hourgam2[1]*yd[2] + hourgam3[1]*yd[3]  + 
    hourgam4[1]*yd[4] + hourgam5[1]*yd[5] + hourgam6[1]*yd[6] + hourgam7[1]*yd[7];
  const register Real h02y =
    hourgam0[2]*yd[0] + hourgam1[2]*yd[1] + hourgam2[2]*yd[2] + hourgam3[2]*yd[3] + 
    hourgam4[2]*yd[4] + hourgam5[2]*yd[5] + hourgam6[2]*yd[6] + hourgam7[2]*yd[7];
  const register Real h03y =
    hourgam0[3]*yd[0] + hourgam1[3]*yd[1] + hourgam2[3]*yd[2] + hourgam3[3]*yd[3]  + 
    hourgam4[3]*yd[4] + hourgam5[3]*yd[5] + hourgam6[3]*yd[6] + hourgam7[3]*yd[7];

  const register Real h00z =
    hourgam0[0]*zd[0] + hourgam1[0]*zd[1] + hourgam2[0]*zd[2] + hourgam3[0]*zd[3]  + 
    hourgam4[0]*zd[4] + hourgam5[0]*zd[5] + hourgam6[0]*zd[6] + hourgam7[0]*zd[7];
  const register Real h01z =
    hourgam0[1]*zd[0] + hourgam1[1]*zd[1] + hourgam2[1]*zd[2] + hourgam3[1]*zd[3]  + 
    hourgam4[1]*zd[4] + hourgam5[1]*zd[5] + hourgam6[1]*zd[6] + hourgam7[1]*zd[7];
  const register Real h02z =
    hourgam0[2]*zd[0] + hourgam1[2]*zd[1] + hourgam2[2]*zd[2] + hourgam3[2]*zd[3] + 
    hourgam4[2]*zd[4] + hourgam5[2]*zd[5] + hourgam6[2]*zd[6] + hourgam7[2]*zd[7];
  const register Real h03z =
    hourgam0[3]*zd[0] + hourgam1[3]*zd[1] + hourgam2[3]*zd[2] + hourgam3[3]*zd[3]  + 
    hourgam4[3]*zd[4] + hourgam5[3]*zd[5] + hourgam6[3]*zd[6] + hourgam7[3]*zd[7];
  
  hgfx[0] = coefficient*(hourgam0[0]*h00x + hourgam0[1]*h01x + hourgam0[2]*h02x + hourgam0[3]*h03x);
  hgfx[1] = coefficient*(hourgam1[0]*h00x + hourgam1[1]*h01x + hourgam1[2]*h02x + hourgam1[3]*h03x);
  hgfx[2] = coefficient*(hourgam2[0]*h00x + hourgam2[1]*h01x + hourgam2[2]*h02x + hourgam2[3]*h03x);
  hgfx[3] = coefficient*(hourgam3[0]*h00x + hourgam3[1]*h01x + hourgam3[2]*h02x + hourgam3[3]*h03x);
  hgfx[4] = coefficient*(hourgam4[0]*h00x + hourgam4[1]*h01x + hourgam4[2]*h02x + hourgam4[3]*h03x);
  hgfx[5] = coefficient*(hourgam5[0]*h00x + hourgam5[1]*h01x + hourgam5[2]*h02x + hourgam5[3]*h03x);
  hgfx[6] = coefficient*(hourgam6[0]*h00x + hourgam6[1]*h01x + hourgam6[2]*h02x + hourgam6[3]*h03x);
  hgfx[7] = coefficient*(hourgam7[0]*h00x + hourgam7[1]*h01x + hourgam7[2]*h02x + hourgam7[3]*h03x);

  hgfy[0] = coefficient*(hourgam0[0]*h00y + hourgam0[1]*h01y + hourgam0[2]*h02y + hourgam0[3]*h03y);
  hgfy[1] = coefficient*(hourgam1[0]*h00y + hourgam1[1]*h01y + hourgam1[2]*h02y + hourgam1[3]*h03y);
  hgfy[2] = coefficient*(hourgam2[0]*h00y + hourgam2[1]*h01y + hourgam2[2]*h02y + hourgam2[3]*h03y);
  hgfy[3] = coefficient*(hourgam3[0]*h00y + hourgam3[1]*h01y + hourgam3[2]*h02y + hourgam3[3]*h03y);
  hgfy[4] = coefficient*(hourgam4[0]*h00y + hourgam4[1]*h01y + hourgam4[2]*h02y + hourgam4[3]*h03y);
  hgfy[5] = coefficient*(hourgam5[0]*h00y + hourgam5[1]*h01y + hourgam5[2]*h02y + hourgam5[3]*h03y);
  hgfy[6] = coefficient*(hourgam6[0]*h00y + hourgam6[1]*h01y + hourgam6[2]*h02y + hourgam6[3]*h03y);
  hgfy[7] = coefficient*(hourgam7[0]*h00y + hourgam7[1]*h01y + hourgam7[2]*h02y + hourgam7[3]*h03y);

  hgfz[0] = coefficient*(hourgam0[0]*h00z + hourgam0[1]*h01z + hourgam0[2]*h02z + hourgam0[3]*h03z);
  hgfz[1] = coefficient*(hourgam1[0]*h00z + hourgam1[1]*h01z + hourgam1[2]*h02z + hourgam1[3]*h03z);
  hgfz[2] = coefficient*(hourgam2[0]*h00z + hourgam2[1]*h01z + hourgam2[2]*h02z + hourgam2[3]*h03z);
  hgfz[3] = coefficient*(hourgam3[0]*h00z + hourgam3[1]*h01z + hourgam3[2]*h02z + hourgam3[3]*h03z);
  hgfz[4] = coefficient*(hourgam4[0]*h00z + hourgam4[1]*h01z + hourgam4[2]*h02z + hourgam4[3]*h03z);
  hgfz[5] = coefficient*(hourgam5[0]*h00z + hourgam5[1]*h01z + hourgam5[2]*h02z + hourgam5[3]*h03z);
  hgfz[6] = coefficient*(hourgam6[0]*h00z + hourgam6[1]*h01z + hourgam6[2]*h02z + hourgam6[3]*h03z);
  hgfz[7] = coefficient*(hourgam7[0]*h00z + hourgam7[1]*h01z + hourgam7[2]*h02z + hourgam7[3]*h03z);
}



// ****************************************************************************
// * calcElemVolume
// ****************************************************************************
inline Real _calcElemVolume(const Real x0, const Real x1,
                            const Real x2, const Real x3,
                            const Real x4, const Real x5,
                            const Real x6, const Real x7,
                            const Real y0, const Real y1,
                            const Real y2, const Real y3,
                            const Real y4, const Real y5,
                            const Real y6, const Real y7,
                            const Real z0, const Real z1,
                            const Real z2, const Real z3,
                            const Real z4, const Real z5,
                            const Real z6, const Real z7){
  const Real twelveth = 1.0/12.0;
  const Real dx61 = x6-x1;
  const Real dy61 = y6-y1;
  const Real dz61 = z6-z1;
  const Real dx70 = x7-x0;
  const Real dy70 = y7-y0;
  const Real dz70 = z7-z0;
  const Real dx63 = x6-x3;
  const Real dy63 = y6-y3;
  const Real dz63 = z6-z3;
  const Real dx20 = x2-x0;
  const Real dy20 = y2-y0;
  const Real dz20 = z2-z0;
  const Real dx50 = x5-x0;
  const Real dy50 = y5-y0;
  const Real dz50 = z5-z0;
  const Real dx64 = x6-x4;
  const Real dy64 = y6-y4;
  const Real dz64 = z6-z4;
  const Real dx31 = x3-x1;
  const Real dy31 = y3-y1;
  const Real dz31 = z3-z1;
  const Real dx72 = x7-x2;
  const Real dy72 = y7-y2;
  const Real dz72 = z7-z2;
  const Real dx43 = x4-x3;
  const Real dy43 = y4-y3;
  const Real dz43 = z4-z3;
  const Real dx57 = x5-x7;
  const Real dy57 = y5-y7;
  const Real dz57 = z5-z7;
  const Real dx14 = x1-x4;
  const Real dy14 = y1-y4;
  const Real dz14 = z1-z4;
  const Real dx25 = x2-x5;
  const Real dy25 = y2-y5;
  const Real dz25 = z2-z5;
  const Real tp1 = tripleProduct((dx31+dx72), dx63, dx20,
                                 (dy31+dy72), dy63, dy20,
                                 (dz31+dz72), dz63, dz20);
  const Real tp2 = tripleProduct((dx43+dx57), dx64, dx70,
                                 (dy43+dy57), dy64, dy70,
                                 (dz43+dz57), dz64, dz70);
  const Real tp3 = tripleProduct((dx14+dx25), dx61, dx50,
                                 (dy14+dy25), dy61, dy50,
                                 (dz14+dz25), dz61, dz50);
  return twelveth*(tp1+tp2+tp3);
}


// ****************************************************************************
// * AreaFace
// ****************************************************************************
inline Real AreaFace(const Real x0, const Real x1,
                     const Real x2, const Real x3,
                     const Real y0, const Real y1,
                     const Real y2, const Real y3,
                     const Real z0, const Real z1,
                     const Real z2, const Real z3){
  const Real fx = (x2-x0)-(x3-x1);
  const Real fy = (y2-y0)-(y3-y1);
  const Real fz = (z2-z0)-(z3-z1);
  const Real gx = (x2-x0)+(x3-x1);
  const Real gy = (y2-y0)+(y3-y1);
  const Real gz = (z2-z0)+(z3-z1);
  return (fx*fx + fy*fy + fz*fz) * (gx*gx + gy*gy + gz*gz) -
         (fx*gx + fy*gy + fz*gz) * (fx*gx + fy*gy + fz*gz);
}


// ****************************************************************************
// * calcElemCharacteristicLength
// ****************************************************************************
inline Real calcElemCharacteristicLength(const Real x[8],
                                         const Real y[8],
                                         const Real z[8],
                                         const Real _volume){
  Real a, charLength = 0.0;
  a = AreaFace(x[0],x[1],x[2],x[3],
               y[0],y[1],y[2],y[3],
               z[0],z[1],z[2],z[3]) ;
  charLength = max(a,charLength) ;
  a = AreaFace(x[4],x[5],x[6],x[7],
               y[4],y[5],y[6],y[7],
               z[4],z[5],z[6],z[7]) ;
  charLength = max(a,charLength) ;
  a = AreaFace(x[0],x[1],x[5],x[4],
               y[0],y[1],y[5],y[4],
               z[0],z[1],z[5],z[4]) ;
  charLength = max(a,charLength) ;
  a = AreaFace(x[1],x[2],x[6],x[5],
               y[1],y[2],y[6],y[5],
               z[1],z[2],z[6],z[5]) ;
  charLength = max(a,charLength) ;
  a = AreaFace(x[2],x[3],x[7],x[6],
               y[2],y[3],y[7],y[6],
               z[2],z[3],z[7],z[6]) ;
  charLength = max(a,charLength) ;
  a = AreaFace(x[3],x[0],x[4],x[7],
               y[3],y[0],y[4],y[7],
               z[3],z[0],z[4],z[7]) ;
  charLength = max(a,charLength) ;
  return 4.0 * _volume/√(charLength);
}



// ****************************************************************************
// * IntegrateStressForElems (1/3)
// * Volume calculation involves extra work for numerical consistency.
// ****************************************************************************
inline void calcElemShapeFunctionDerivatives(const Real* restrict x,
                                             const Real* restrict y,
                                             const Real* restrict z,
                                             Real* restrict _Bx,
                                             Real* restrict _By,
                                             Real* restrict _Bz,
                                             Real *rtn){
  const Real fjxxi = ⅛*((x[6]-x[0])+(x[5]-x[3])-(x[7]-x[1])-(x[4]-x[2]));
  const Real fjyxi = ⅛*((x[6]-x[0])+(x[5]-x[3])-(x[7]-x[1])-(x[4]-x[2]));
  const Real fjzxi = ⅛*((x[6]-x[0])+(x[5]-x[3])-(x[7]-x[1])-(x[4]-x[2]));
  const Real fjxet = ⅛*((y[6]-y[0])-(y[5]-y[3])+(y[7]-y[1])-(y[4]-y[2]));
  const Real fjyet = ⅛*((y[6]-y[0])-(y[5]-y[3])+(y[7]-y[1])-(y[4]-y[2]));
  const Real fjzet = ⅛*((y[6]-y[0])-(y[5]-y[3])+(y[7]-y[1])-(y[4]-y[2]));
  const Real fjxze = ⅛*((z[6]-z[0])+(z[5]-z[3])+(z[7]-z[1])+(z[4]-z[2]));
  const Real fjyze = ⅛*((z[6]-z[0])+(z[5]-z[3])+(z[7]-z[1])+(z[4]-z[2]));
  const Real fjzze = ⅛*((z[6]-z[0])+(z[5]-z[3])+(z[7]-z[1])+(z[4]-z[2]));
  // compute cofactors
  const Real cjxxi =   (fjyet * fjzze) - (fjzet * fjyze);//(fjetx ⨯ fjzex);
  const Real cjyxi = - (fjxet * fjzze) + (fjzet * fjxze);//(fjety ⨯ fjzey);
  const Real cjzxi =   (fjxet * fjyze) - (fjyet * fjxze);//(fjetz ⨯ fjzez);
  const Real cjxet = - (fjyxi * fjzze) + (fjzxi * fjyze);//-(fjxix ⨯ fjzex);
  const Real cjyet =   (fjxxi * fjzze) - (fjzxi * fjxze);//-(fjxiy ⨯ fjzey);
  const Real cjzet = - (fjxxi * fjyze) + (fjyxi * fjxze);//-(fjxiz ⨯ fjzez);
  const Real cjxze =   (fjyxi * fjzet) - (fjzxi * fjyet);//(fjxix ⨯ fjetx);
  const Real cjyze = - (fjxxi * fjzet) + (fjzxi * fjxet);//(fjxiy ⨯ fjety);
  const Real cjzze =   (fjxxi * fjyet) - (fjyxi * fjxet);//(fjxiz ⨯ fjetz);
  // calculate partials: this need only be done for 0,1,2,3
  // since, by symmetry, (6,7,4,5) = - (0,1,2,3)
  _Bx[0] = - cjxxi-cjxet-cjxze;
  _Bx[1] =   cjxxi-cjxet-cjxze;
  _Bx[2] =   cjxxi+cjxet-cjxze;
  _Bx[3] = - cjxxi+cjxet-cjxze;
  _Bx[4] = -_Bx[2];
  _Bx[5] = -_Bx[3];
  _Bx[6] = -_Bx[0];
  _Bx[7] = -_Bx[1];
  _By[0] = - cjyxi-cjyet-cjyze;
  _By[1] =   cjyxi-cjyet-cjyze;
  _By[2] =   cjyxi+cjyet-cjyze;
  _By[3] = - cjyxi+cjyet-cjyze;
  _By[4] = -_By[2];
  _By[5] = -_By[3];
  _By[6] = -_By[0];
  _By[7] = -_By[1];
  _Bz[0] = - cjzxi-cjzet-cjzze;
  _Bz[1] =   cjzxi-cjzet-cjzze;
  _Bz[2] =   cjzxi+cjzet-cjzze;
  _Bz[3] = - cjzxi+cjzet-cjzze;
  _Bz[4] = -_Bz[2];
  _Bz[5] = -_Bz[3];
  _Bz[6] = -_Bz[0];
  _Bz[7] = -_Bz[1];
  *rtn = 8.0*(fjxet*cjxet + fjyet*cjyet + fjzet*cjzet);
}

inline void CalcElemVelocityGradient( const Real* const xvel,
                                      const Real* const yvel,
                                      const Real* const zvel,
                                      const Real b[][8],
                                      const Real detJ,
                                      Real* const d ){
  const Real inv_detJ = Real(1.0) / detJ ;
  Real dyddx, dxddy, dzddx, dxddz, dzddy, dyddz;
  const Real* const pfx = b[0];
  const Real* const pfy = b[1];
  const Real* const pfz = b[2];
  d[0] = inv_detJ * ( pfx[0] * (xvel[0]-xvel[6])
                     + pfx[1] * (xvel[1]-xvel[7])
                     + pfx[2] * (xvel[2]-xvel[4])
                     + pfx[3] * (xvel[3]-xvel[5]) );
  d[1] = inv_detJ * ( pfy[0] * (yvel[0]-yvel[6])
                     + pfy[1] * (yvel[1]-yvel[7])
                     + pfy[2] * (yvel[2]-yvel[4])
                     + pfy[3] * (yvel[3]-yvel[5]) );
  d[2] = inv_detJ * ( pfz[0] * (zvel[0]-zvel[6])
                     + pfz[1] * (zvel[1]-zvel[7])
                     + pfz[2] * (zvel[2]-zvel[4])
                     + pfz[3] * (zvel[3]-zvel[5]) );
  dyddx  = inv_detJ * ( pfx[0] * (yvel[0]-yvel[6])
                      + pfx[1] * (yvel[1]-yvel[7])
                      + pfx[2] * (yvel[2]-yvel[4])
                      + pfx[3] * (yvel[3]-yvel[5]) );
  dxddy  = inv_detJ * ( pfy[0] * (xvel[0]-xvel[6])
                      + pfy[1] * (xvel[1]-xvel[7])
                      + pfy[2] * (xvel[2]-xvel[4])
                      + pfy[3] * (xvel[3]-xvel[5]) );
  dzddx  = inv_detJ * ( pfx[0] * (zvel[0]-zvel[6])
                      + pfx[1] * (zvel[1]-zvel[7])
                      + pfx[2] * (zvel[2]-zvel[4])
                      + pfx[3] * (zvel[3]-zvel[5]) );
  dxddz  = inv_detJ * ( pfz[0] * (xvel[0]-xvel[6])
                      + pfz[1] * (xvel[1]-xvel[7])
                      + pfz[2] * (xvel[2]-xvel[4])
                      + pfz[3] * (xvel[3]-xvel[5]) );
  dzddy  = inv_detJ * ( pfy[0] * (zvel[0]-zvel[6])
                      + pfy[1] * (zvel[1]-zvel[7])
                      + pfy[2] * (zvel[2]-zvel[4])
                      + pfy[3] * (zvel[3]-zvel[5]) );
  dyddz  = inv_detJ * ( pfz[0] * (yvel[0]-yvel[6])
                      + pfz[1] * (yvel[1]-yvel[7])
                      + pfz[2] * (yvel[2]-yvel[4])
                      + pfz[3] * (yvel[3]-yvel[5]) );
  d[5]  =  .5 * ( dxddy + dyddx );
  d[4]  =  .5 * ( dxddz + dzddx );
  d[3]  =  .5 * ( dzddy + dyddz );
}

