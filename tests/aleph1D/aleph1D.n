///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// ****************************************************************************
// αβγδεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ ℵ
// ∀ ℝℕℤ ²³√½⅓¼⅛
// ****************************************************************************
with ℝ, ℵ;



// ****************************************************************************
// * Options
// ****************************************************************************
options{
  // Mesh options
  ℝ LENGTH                    = 1.125;
  ℕ X_EDGE_ELEMS              = 8;
  ℕ Y_EDGE_ELEMS              = 1;
  ℕ Z_EDGE_ELEMS              = 1;
  ℝ Χmin = 0.0;
  ℝ Χmax = 1.125;
  // Numerical options
  ℝ σ=3.0;
  ℝ ε=2.0;
  ℝ β=1.0;
  ℝ α=0.5;
  // Yet required options for Okina
  ℝ option_δt_initial = 0.1;
  ℝ option_stoptime = 0.4;
  ℕ option_max_iterations = 32768;   // ! utilisé en dur dans les backends
  // Options d'Aleph
  ℝ alephEpsilon             = 1.e-10;
  ℕ alephUnderlyingSolver    = 2;
  ℕ alephMaxIterations       = 16384;
  // DIAGONAL=0, AINV=1, AMG=2, IC=3, POLY=4, ILU=5, ILUp=6,
  // SPAIstat=7, SPAIdyn=8, DDMCriteriaAdaptedSelector=9, NONE=10
  ℕ alephPreconditionerMethod = 2;
  // PCG=0, BiCGStab=1 , BiCGStab2=2, GMRES=3, SAMG=4, QMR=5, SuperLU=6
  ℕ alephSolverMethod     = 0; 
  ℕ alephNumberOfCores    = 0;
  ℾ option_aleph_dump_matrix = false;
};


// **************************************************************************
// * Cell Variables
// ****************************************************************************
cells{
  ℝ Ω,Δ,λ;
};


// ****************************************************************************
// * Node Variables
// ****************************************************************************
nodes{
  ℝ Φω;
};


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ℝ δx;
};


// ****************************************************************************
// * Analytics Functions
// ****************************************************************************
ℝ αIniΩ(ℝ t, ℝ x){ return α*exp(x-t); }


// ****************************************************************************
// * Initialization Part @ ]-∞,-0.0[
// ****************************************************************************

void iniGlobals(void) @ -5.0{
  δx=(Χmax-Χmin)/X_EDGE_ELEMS;
  δt=option_δt_initial;
  printf("\n\t\t\33[7m[iniGlobals] δx=%f\33[m", (double)δx);
  printf("\n\t\t\33[7m[iniGlobals] δt=%f\33[m", (double)δt);
}



// ****************************************************************************
// * iniCell[Δ&Ω]
// ****************************************************************************
∀ cells void iniCellΔ(void) out (/*node coord,*/ cell Δ) @ -5.0 {
  Δ=0.0;
  ∀ node Δ+=coord;
  Δ*=½;
}
∀ cells void iniCellλ(void) out (/*node coord,*/ cell λ) @ -5.0 {
  λ=1.0;
  ∀ node λ+=(λ>0.0)?-λ-coord:coord;
  //info()<<" L"<<c<<"="<<λ;
}

∀ cells void iniCellΩ(void) in (cell Δ) out (cell Ω) @ -4.0 {
  Ω=αIniΩ(0.0,Δ);
}

∀ nodes void iniNodeΦω(void) in (cell Δ) out (node Φω) @ -4.0 {
  Φω=1.0;
}


// ****************************************************************************
// * Compute loop @ ]+0,+∞[
// ****************************************************************************
void dbgLoop(void) @ 1.0 {
  printf("\n\t\t\33[7m[Loop] #%d, time=%f\33[m", iteration,time);
}


void rhsInit(void) @ 1.0{
  ℵ rhs reset;
  ℵ lhs reset;
}


∀ cells void addRhsCellValues(void) in (cell Ω) @ 1.1{
  const ℝ value=Ω;
  ℵ rhs addValue(Ω,this,value);
}


∀ nodes void setRhsNodeValues(void) in (/*cell Ω,*/node Φω) @ 1.2{
  const ℝ value = δt*Φω;
  //info()<<"[setRhsNodeValues] n="<<n;
  ∀ cell{
    if (cell(#)<0) continue; // C'est qu'on accède à une maille inexistante
    info()<<"\t[setRhsNodeValues] c="<<c<<", node_cell="<< cell(#);//node_cell[nc];
    //info()<<"[setRhsNodeValues] xs_node_cell(c)="<<xs_node_cell(c);
    //info()<<"\t[setRhsNodeValues] xs_node_cell(c)="<<xs_node_cell(c);
    ℵ rhs addValue(Ω, cell(#), value);
  }
}


// ********************************************************
// * Initialisation ℵ
// * Could be done as: 'alephInitialize @ 2;'
// ********************************************************
void iniAleph(void) @ 2.0 { alephInitialize(); }


// ****************************************************************************
// * Compute Flux
// ****************************************************************************
∀ nodes void computeFluxU(void) /*in (cell U,Δ)*/ out (node Φω) @ 1.5{
  Φω=0;
  ∀ cell Φω = (Δ>coord)?Ω;
}


// ****************************************************************************
// * Fill our matrix
// ****************************************************************************
∀ nodes void setInnerNodesValues(void) in (/*cell Ω,*/ node Φω) @ 2.1{
  const ℝ value=Φω*δt²;
  if (cell(0)<0) continue;
  if (cell(1)<0) continue;
  ℵ matrix setValue(Ω, cell(0), Ω, cell(1), value);
}

∀ cells void setCellsValues(void) in (cell Ω/*, node Φω*/) @ 2.2{
  ℝ diagonalTerme=0.0;
  ∀ node diagonalTerme += Φω;
  diagonalTerme*=δt;
  diagonalTerme+=1.0;
  ℵ matrix setValue(Ω,this, Ω,this, diagonalTerme);
}


// ****************************************************************************
// * Aleph Solve
// ****************************************************************************
void assembleAndSolve(void) @ 4.0 { ℵ solve; }


// ****************************************************************************
// * Récupération des résultats
// ****************************************************************************
∀ own cells void getCellResults(void) out (cell Ω) @ 4.1{
  Ω=ℵ lhs getValue(Ω, this);
}


// ****************************************************************************
// * Test for Quit
// ****************************************************************************
void tstForQuit(void) @ 4.0 {
  info()<<"\n\t[testForQuit] Iteration ="<<iteration
        <<", time="<<time
        <<", delta_t="<<δt;
  if ((time<(option_stoptime-δt))) return;
  exit;
}

