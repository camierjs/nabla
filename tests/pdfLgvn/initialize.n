///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 DUCLOUS Roland - Roland.Duclous@cea.fr                    //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
/*
//initialise(my_proc,nb_proc,nx,nvx,nvy,nvz,nc,reynolds_xx_dirac,xb,vb,cb,fe0,dissipation_rate0);
void initialise(void) @ -9.0{
  Lx = xmax-xmin;
  kx = 2.*pi/Lx;
}


void init_inhomogeneous_grid_turbulence_01(void){
  zmt_halfsize2 = zmt_highbound*zmt_highbound;
  mvx = 0.;
  mvx_dirac = 0.;
  mc = 0.;
  mc_dirac = 0.;
}

∀ cells @ -8.0 {
  x = xmin +(uid+0.5)*dx;
  reynolds_xx_profile = reynolds_xx*DMAX(reynolds_xx_dirac, (1.-x*x/zmt_halfsize2));
}

∀ vx @ -8.0 {
  vx = vxmin + (ivx+0.5)*dvx;
  mvx += exp(-0.5*(vx-mean_vx)*(vx-mean_vx)/reynolds_xx)/(sqrt(2*pi*reynolds_xx));
}
∀ c @ -8.0 if (ctransport_H){
  conc = cmin + (ic+0.5)*dc;
  mc += exp(-0.5*(conc-mean_c)*(conc-mean_c)/c_variance)/(sqrt(2*pi*c_variance));
}
∀ c @ -8.0 if (ctransport_H){
  conc = cmin + (ic+0.5)*dc;
  mc_dirac += exp(-0.5*conc*conc/c_variance_dirac)/(sqrt(2*pi*c_variance_dirac));
}

void init_inhomogeneous_grid_turbulence_02(void){
  mvx *= dvx;
  mvx_dirac *= dvx;
  if (ctransport_H) mc *= dc;
  if (ctransport_H) mc_dirac *= dc;
}


int l(int ivx,int nvx,
      int ivy,int nvy,
      int ivz,int nvz){
  return ivx + ivy*nvx + ivz*nvx*nvy;
}

∀ cells {
  x = xmin + (uid+0.5)*dx;
  if ( x>zmt_lowbound and x<zmt_highbound) continue;
  double mvx_profile = 0.0;
  ∀ l{
    //∀ vz{∀ vy{∀ vx{
    //l  = ivx + ivy*nvx + ivz*nvx*nvy;
    vx = vxmin + (ivx+0.5)*dvx;
    ∀ c in [1..nc]{
      mvx_profile += exp(-0.5*(vx-mean_vx)*(vx-mean_vx)/reynolds_xx_profile)/(sqrt(2.0*pi*reynolds_xx_profile));
    }
    //}}}
  }
  mvx_profile *= dvx*dvy*dvy*dc;
  ∀ l{
//  ∀ vz{    ∀ vy{      ∀ vx{
    vx = vxmin + (ivx+0.5)*dvx;
    //l  = ivx + ivy*nvx + ivz*nvx*nvy;
    ∀ c{
      conc = cmin + (ic+0.5)*dc;
      f = exp(-0.5*(vx-mean_vx)*(vx-mean_vx)/reynolds_xx_profile[ix])
        /(sqrt(2*pi*reynolds_xx_profile[ix]))/mvx_profile;
      if ( ctransport_H)
        f[ix][l][ic] *= exp(-0.5*(conc-mean_c)*(conc-mean_c)/c_variance)
          /(sqrt(2*pi*c_variance))/mc;	      
    }
  }// }}
  //pour respecter le fait que la fréquence turbulente soit indépendante de l'espace
  dissipation_rate0[ix] = reynolds_xx_profile[ix]*omega0;
}


∀ cells {
  x = xmin + (uid+0.5)*dx;
  if (!(x>zmt_lowbound and x<zmt_highbound)) continue;
  //dirac numerique
  ∀ l{
//  ∀ vz{    ∀ vy{      ∀ vx{
    vx = vxmin + (ivx+0.5)*dvx;
    //l  = ivx + ivy*nvx + ivz*nvx*nvy;
        ∀ c{
          conc = cmin + (ic+0.5)*dc;	    
          f[ix][l][ic] =
            exp(-0.5*vx*vx/reynolds_xx_dirac)
            /(sqrt(2*pi*reynolds_xx_dirac))/mvx_dirac;
          if ( ctransport_H)
            f[ix][l][ic] *= exp(-0.5*conc*conc/c_variance_dirac)
              /(sqrt(2*pi*c_variance_dirac))/mc_dirac;
        }
      }
    }
  }	      
  dissipation_rate0[ix] = 0.; // pas de turbulence hors zmt
}
*/
