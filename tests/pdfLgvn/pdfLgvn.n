///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 DUCLOUS Roland - Roland.Duclous@cea.fr                    //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ℝ;
//∀ x,vx,vy,vz,c;


// ****************************************************************************
// * Options
// ****************************************************************************
options{
  // Mesh options
  ℝ LENGTH                   = 1.0;
  ℕ X_EDGE_ELEMS             = 8;
  ℕ Y_EDGE_ELEMS             = 1;
  ℕ Z_EDGE_ELEMS             = 1;
  
  // Time options
  ℝ option_stoptime          = 1.0;
  
  // Iterations options
  ℕ option_max_iterations    = 8;
  
  ℕ option_steps_p_period    = 200;   // NumberOfIterationsPerPeriod
  ℝ option_nb_period         = 5.0;   // NumberOfPeriod
  ℝ option_frequence         = 0.01;  // TimeFrequencyOfDiagnostics
  
  ℕ option_nx                = 128;   // NumberOfPointsInX
  ℝ option_xmin              = -60.0; // MinimumValueOfX
  ℝ option_xmax              = +60.0; // MaximumValueOfX
  
  ℕ option_nvx               = 128;   // NumberOfPointsInVX
  ℝ option_vxmin             = -8.0;  // MinimumValueOfVX
  ℝ option_vxmax             = +8.0;  // MaximumValueOfVX
  
  ℕ option_nvy               = 1;     // NumberOfPointsInVY
  ℝ option_vymin             = -0.5;  // MinimumValueOfVY
  ℝ option_vymax             = +0.5;  // MaximumValueOfVY
  
  ℕ option_nvz               = 1;     // NumberOPointsInVZ
  ℝ option_vzmin             = -0.5;  // MinimumValueOfVZ
  ℝ option_vzmax             = +0.5;  // MaximumValueOfVZ
  
  ℕ option_nc                = 1;     // NumberOfPointsInConc
  ℝ option_cmin              = -0.5;  // MinimumValueOfConc
  ℝ option_cmax              = +0.5;  // MaximumValueOfConc
  //
  ℕ option_my_proc           = 0;     // rank of process
  ℕ option_nb_proc           = 1;     // number of processes
  //
  ℝ option_C1                = 2.73;
  ℝ option_Cc                = 3.;
  ℝ option_C0                = 1.73;
  ℝ option_Cc0               = 0.;
  ℝ option_Cepsilon          = 1.;
  ℝ option_Comega            = 0.9;
  ℝ option_reynolds_xx       = 1.;
  ℝ option_reynolds_yy       = 1.;
  ℝ option_mean_vx           = 0.;
  ℝ option_mean_vy           = 0.;
  ℝ option_c_variance        = 0.5;
  ℝ option_mean_c            = 0.;
  ℝ option_zmt_lowbound      = -10.;
  ℝ option_zmt_highbound     =  10.;
  ℝ option_reynolds_xx_dirac = 0.001;
  ℝ option_reynolds_yy_dirac = 0.01;
  ℝ option_c_variance_dirac  = 0.01;
  //
  ℝ option_pi                = 3.14159265359;
  ℝ option_Ck                = 6./(3.*option_C1+2.*option_Comega-4.);
  ℝ option_beta              = (2.*(1.+option_Comega)-3.)/(3.*option_Comega);
  ℝ option_dissipation_rate  = sqrt(2.*option_Ck/(option_beta*option_Comega))*sqrt(option_reynolds_xx)*option_reynolds_xx/option_zmt_highbound;
  ℝ option_tau0              = option_reynolds_xx/(option_Comega*option_dissipation_rate);
  //frequence turbulente initiale, independante de l'espace
  ℝ option_omega0            = 1./(option_tau0*option_Comega); 
};

//N{1..nvx}
//nvx + nvy*nvx + nvz*nvx*nvy;

// ****************************************************************************
// * Element Variables
// ****************************************************************************
cells{
  ℝ^{l(nvx,nvy,nvz),nc} fe0;
  ℝ^{l(nvx,nvy,nvz),nc} fe1;
  
  ℝ initial_kinetic_energy0;
  ℝ initial_variance;
  ℝ kinetic_energy0;
  ℝ vx_skewness;
  ℝ dissipation_rate0;
  ℝ turbulent_frequency0;
  ℝ c_variance0;
  
  ℝ kinetic_energy1;
  ℝ dissipation_rate1;
  ℝ turbulent_frequency1;
  ℝ c_variance1;
  
  ℝ³ˣ³ phi;
  ℝ vx_correlation_gradient;
  ℝ uc_correlation_gradient;
  
  // vxdiffusion_H
  ℝ matAvx[2];
  ℝ matAvy[2];
  ℝ matAc[2];

  ℝ reynolds_xx_profile;
};

// ****************************************************************************
// * Global Variables
// ****************************************************************************
#warning No global arrays
global{
  ℕ global_piece_x;
  ℕ global_ix_start, global_ix_end;
  ℕ global_nx_max;
  ℝ global_xb_min,global_xb_max;
  ℝ global_dx;
  ℕ global_nvtot;
  ℝ global_vb_xmin,global_vb_xmax;
  ℝ global_vb_ymin,global_vb_ymax;
  ℝ global_vb_zmin,global_vb_zmax;
  ℝ global_dvx,global_dvy,global_dvz;
  ℝ global_cb_min,global_cb_max;
  ℝ global_dc;
  ℝ global_vbcol_xmin,global_vbcol_xmax;
  ℝ global_vbcol_ymin,global_vbcol_ymax;
  ℝ global_vbcol_zmin,global_vbcol_zmax;

  ℕ global_bsize;
  ℕ global_l1,global_l2;
  
  ℝ global_velocity_diffusion_coeff;
  ℝ global_c_diffusion_coeff;
  
  // diffusion_H
  ℕ global_sizeAvx,global_sizeAvy,global_sizeAc;

  // Initialize
  ℝ global_kx,global_Lx;
  ℝ global_zmt_halfsize2;

  // Temporaries
  ℝ tmp_mvx;
};

// ****************************************************************************
// * Initialization Part @ ]-∞,-0.0[
// ****************************************************************************
void ini(void) @ -10.0{
  global_piece_x  = (option_nx-1 + option_nb_proc)/option_nb_proc;
  global_ix_start = option_my_proc*global_piece_x;
  global_ix_end   = min(option_nx-1,global_ix_start+global_piece_x-1);
  global_nx_max = global_piece_x*option_nb_proc;
  
  assert((option_nb_proc-1)*global_piece_x<=option_nx-1);
  // Minimum number of points per processor
  assert(global_ix_end-global_ix_start+1>=2);

  global_xb_min = option_xmin;
  global_xb_max = option_xmax;
  global_dx = (option_xmax-option_xmin)/(option_nx);
  global_nvtot = option_nvx*option_nvy*option_nvz;
  
  // Grid intended for finite volume treatement of advection
  // vxmin is located at the interface
  global_vb_xmin = option_vxmin; global_vb_xmax = option_vxmax;
  global_vb_ymin = option_vymin; global_vb_ymax = option_vymax;
  global_vb_zmin = option_vzmin; global_vb_zmax = option_vzmax;
  
  global_dvx = (option_vxmax-option_vxmin)/(option_nvx);
  global_dvy = (option_vymax-option_vymin)/(option_nvy);
  global_dvz = (option_vzmax-option_vzmin)/(option_nvz);

  global_cb_min = option_cmin;  global_cb_max = option_cmax;
  global_dc = (option_cmax-option_cmin)/(option_nc);
  
  // Grid intended for finite difference treatement of collisions
  // vxmin is now a grid point
  global_vbcol_xmin = option_vxmin+0.5*global_dvx;
  global_vbcol_xmax = option_vxmax-0.5*global_dvx;
  global_vbcol_ymin = option_vymin+0.5*global_dvy;
  global_vbcol_ymax = option_vymax-0.5*global_dvy;
  global_vbcol_zmin = option_vzmin+0.5*global_dvz;
  global_vbcol_zmax = option_vzmax-0.5*global_dvz;

  global_bsize = 2;//vlasov.buffer_size();
  global_l1 = global_ix_start - global_bsize;
  global_l2 = global_ix_start + global_piece_x - 1 + global_bsize;
  
  global_sizeAvx = option_nvx*2;
  global_sizeAvy = option_nvy*2;
  global_sizeAc = option_nc*2; 
}


// Start of the Simulation

// mise a zero de matAvx
// mise à zéro de matAvy
// mise a zero de matAc


// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+∞[ 
// ****************************************************************************
∀ cells @ 1.0 { initial_kinetic_energy0=0.0; }

void end(void) @ 2.0 {global_piece_x=0;}
