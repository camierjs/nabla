///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// *****************************************************************************
// Si on a des quads et que l'on souhaite un Randomly distorted quadrilateral mesh
// *****************************************************************************
nodes void randomDistortedQuads(void) @ -20.0 if (option_rdq and option_quads) {
  const Real α=option_rdq_α;
  const Real ρ1=drand48()+drand48()-1.0;
  const Real ρ2=drand48()+drand48()-1.0;
  if (coord.x == 0.0 || coord.x == 1.0) continue;
  if (coord.y == 0.0 || coord.y == 1.0) continue;
  //info()<<"\33[33m[rdq] node #"<<this->uniqueId().asInteger()<<"@"<<coord<<"\33[m";
  coord.x+=α*ρ1*Δl;
  coord.y+=α*ρ2*Δl;
  //debug()<<"\t\33[33m[rdq] => "<<coord<<"\33[m";
}

void eieioCoordsForRDQ(void) @ -19.0{
  if (option_rdq && option_quads)
    synchronize(coord);
}


// *****************************************************************************
// *
// *****************************************************************************
nodes void randomDistortedTriangles(void) @ -20.0 if (option_rdq and option_triangles) {
  const Real α=option_rdq_α;
  const Real ρ1=drand48()+drand48()-1.0;
  const Real ρ2=drand48()+drand48()-1.0;
  if (coord.x == 0.0 || coord.x == 1.0) continue;
  if (coord.y == 0.0 || coord.y == 1.0) continue;
  //info()<<"\33[33m[rdq] node #"<<this->uniqueId().asInteger()<<"@"<<coord<<"\33[m";
  coord.x+=α*ρ1*Δl;
  coord.y+=α*ρ2*Δl;
  //debug()<<"\t\33[33m[rdq] => "<<coord<<"\33[m";
}

void eieioCoordsForRDTriangles(void) @ -19.0{
  if (option_rdq && option_triangles)
    synchronize(coord);
}


// *****************************************************************************
// *
// *****************************************************************************
nodes void stronglyNonConvexQuads(void) @ -20.0 if (option_sncq and option_quads){
  const Integer nid=uid+1;
  const Integer nbNodesPerLine=sqrtl(globalNbNodes);
  const Real θ=M_PI*option_sncq_θ;
  const Real Δborders=Δl*(1.0+cos(θ))/2.0;
  Real Δ=1.5*Δl;
  // On saute un noeud sur deux
  if (!(nid%2)) continue;
  // On saute la dernière colonne
  if ((nid%nbNodesPerLine)==0) continue;
  // On saute la première colonne
  if (((nid-1)%nbNodesPerLine)==0) continue;
  // On saute la première et dernière ligne
  if ((((nid-1)/nbNodesPerLine)==0)) continue;
  if ((((nid-1)/nbNodesPerLine)==(nbNodesPerLine-1))) continue;
  // A l'avant dernière colonne, on change les valeures
  if (((nid+1)%nbNodesPerLine)==0) Δ=Δborders;
  // A l'avant dernière ligne, on change les valeures
  if ((((nid-1)/nbNodesPerLine)==(nbNodesPerLine-2))) Δ=Δborders;
  debug()<<"\t\t\33[33m[sncq] !! #"<<nid<<" !!\33[m";
  coord.x+=Δ;
  coord.y+=Δ;
}


// *****************************************************************************
// * Maillage de Kershaw
// *****************************************************************************
ℕ zone(const ℝ x, const ℝ y){
  if (x<=0.2 && y<=0.5) return 1;
  if (x<=0.4 && y<=0.5) return 2;
  if (x<=0.6 && y<=0.5) return 3;
  if (x<=0.8 && y<=0.5) return 4;
  if (x<=1.0 && y<=0.5) return 5;

  if (x<=0.2 && y>0.5) return 6;
  if (x<=0.4 && y>0.5) return 7;
  if (x<=0.6 && y>0.5) return 8;
  if (x<=0.8 && y>0.5) return 9;
  if (x<=1.0 && y>0.5) return 10;
  return 0;
}

ℝ affine(ℝ a, ℝ x) {return a*x;}
ℝ constant(ℝ a) {return a;}

ℝ zDownUp(ℕ z, ℕ j, ℕ half_n, ℝ origine, Bool cst, ℝ a, ℝ x, const ℕ color){
  const ℝ std_height = 0.5;
  const ℝ new_height = std_height+((cst)?0.1*constant(a):affine(a,x-origine));
  const ℝ height_each = new_height/half_n;
  const ℝ Δ = ((ℝ)j)*height_each;
  debug()<<"\t\t\t\33["<<color<<"m[kershaw] Zone"<<z<<" x="<<x
        <<", new_height here="<<new_height
        <<", height_each="<<height_each
        <<", delta="<<Δ<<"\33[m";
  return Δ;
}

nodes void kershaw(void) @ -18.0 if (option_kershaw and option_quads){
  const ℝ x=coord.x;
  const ℝ y=coord.y;
  const ℕ z=zone(x,y);
  const ℕ nid=uid+1;
  const ℕ n=sqrtl(globalNbNodes);
  const ℕ half_n=½*(n-1);
  const ℕ j=uid/n;
  const ℕ i=uid%n;

  debug()<<"\t\t\33[33m[kershaw] #"<<nid<<" @"<<coord
        <<" is ["<<i<<","<<j<<"] "
        << "in zone"<<z<<"\33[m";
  
  if (z==1) coord.y=zDownUp(z,j,half_n,0.1,false,3.0,coord.x,35);
  if (z==2) coord.y=zDownUp(z,j,half_n,0.3,true,3.0,coord.x,32);
  if (z==3) coord.y=zDownUp(z,j,half_n,0.5,false,-3.0,coord.x,31);
  if (z==4) coord.y=zDownUp(z,j,half_n,0.7,false,3.0,coord.x,35);
  if (z==5) coord.y=zDownUp(z,j,half_n,0.9,false,-3.0,coord.x,31);

  if (z==6) coord.y=1.0-zDownUp(z,half_n-j+half_n,half_n,0.1,false,-3.0,coord.x,35);
  if (z==7) coord.y=1.0-zDownUp(z,half_n-j+half_n,half_n,0.3,true,-3.0,coord.x,32);
  if (z==8) coord.y=1.0-zDownUp(z,half_n-j+half_n,half_n,0.5,false,3.0,coord.x,31);
  if (z==9) coord.y=1.0-zDownUp(z,half_n-j+half_n,half_n,0.7,false,-3.0,coord.x,35);
  if (z==10)coord.y=1.0-zDownUp(z,half_n-j+half_n,half_n,0.9,false,3.0,coord.x,31);
 
 }
