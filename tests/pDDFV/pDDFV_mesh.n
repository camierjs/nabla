
// *****************************************************************************
// Si on a des quads et que l'on souhaite un Randomly distorted quadrilateral mesh
// *****************************************************************************
nodes void randomDistortedQuads(void) @ -20.0 if (option_rdq and option_quads) {
  const Real α=option_rdq_α;
  const Real ρ1=drand48()+drand48()-1.0;
  const Real ρ2=drand48()+drand48()-1.0;
  if (coord.x == 0.0 || coord.x == 1.0) continue;
  if (coord.y == 0.0 || coord.y == 1.0) continue;
  //info()<<"\33[33m[rdq] node #"<<this->uniqueId().asInteger()<<"@"<<coord<<"\33[m";
  coord.x+=α*ρ1*Δl;
  coord.y+=α*ρ2*Δl;
  //debug()<<"\t\33[33m[rdq] => "<<coord<<"\33[m";
}

void eieioCoordsForRDQ(void) @ -19.0{
  if (option_rdq && option_quads)
    synchronize(coord);
}


// *****************************************************************************
// *
// *****************************************************************************
nodes void randomDistortedTriangles(void) @ -20.0 if (option_rdq and option_triangles) {
  const Real α=option_rdq_α;
  const Real ρ1=drand48()+drand48()-1.0;
  const Real ρ2=drand48()+drand48()-1.0;
  if (coord.x == 0.0 || coord.x == 1.0) continue;
  if (coord.y == 0.0 || coord.y == 1.0) continue;
  //info()<<"\33[33m[rdq] node #"<<this->uniqueId().asInteger()<<"@"<<coord<<"\33[m";
  coord.x+=α*ρ1*Δl;
  coord.y+=α*ρ2*Δl;
  //debug()<<"\t\33[33m[rdq] => "<<coord<<"\33[m";
}

void eieioCoordsForRDTriangles(void) @ -19.0{
  if (option_rdq && option_triangles)
    synchronize(coord);
}


// *****************************************************************************
// *
// *****************************************************************************
nodes void stronglyNonConvexQuads(void) @ -20.0 if (option_sncq and option_quads){
  const Integer nid=uid+1;
  const Integer nbNodesPerLine=sqrtl(globalNbNodes);
  const Real θ=M_PI*option_sncq_θ;
  const Real Δborders=Δl*(1.0+cos(θ))/2.0;
  Real Δ=1.5*Δl;
  // On saute un noeud sur deux
  if (!(nid%2)) continue;
  // On saute la dernière colonne
  if ((nid%nbNodesPerLine)==0) continue;
  // On saute la première colonne
  if (((nid-1)%nbNodesPerLine)==0) continue;
  // On saute la première et dernière ligne
  if ((((nid-1)/nbNodesPerLine)==0)) continue;
  if ((((nid-1)/nbNodesPerLine)==(nbNodesPerLine-1))) continue;
  // A l'avant dernière colonne, on change les valeures
  if (((nid+1)%nbNodesPerLine)==0) Δ=Δborders;
  // A l'avant dernière ligne, on change les valeures
  if ((((nid-1)/nbNodesPerLine)==(nbNodesPerLine-2))) Δ=Δborders;
  debug()<<"\t\t\33[33m[sncq] !! #"<<nid<<" !!\33[m";
  coord.x+=Δ;
  coord.y+=Δ;
}
