///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// ****************************************************************************
// * Dump de la géométrie
// ****************************************************************************
∀ nodes void dumpNodeGeometry(void) @ -0.5 if (option_debug_geometry){
  info()<<"\tnode #"<<1+uid<<" owned by #"<< this->owner()<<" (isOwn:"<<this->isOwn()<<") @"<<coord;
}

∀ faces void dumpGeometry(void) @ -0.5 if (option_debug_geometry){
  info()<<"Face #"<<1+uid<<" has nodes";
  foreach node{
    info()<<"\tnode #"<<1+uid<<" @"<<coord;
    info()<<"\tnode #"<<1+uid<<" area="<<node_area;
  }
  info()<<"backCell #"<<backCell->uniqueId()<<", frontCell #"<<frontCell->uniqueId();
  info()<<"cell(0) #"<<cell(0)->uniqueId();
  info()<<"cell(0)_area ="<<m_cell_cell_area[0];//cell(0)
  if (nbCell==1) continue;
  info()<<"cell(1) #"<<cell(1)->uniqueId();
  info()<<"cell(1)_area ="<<m_cell_cell_area[cell(1)];
}


// ****************************************************************************
// * Dump des solutions exactes
// ****************************************************************************
∀ cells void debugIniCells(void) @ -9.5 if (option_debug_solutions){
  info()<<"[iniCells] cell_exact_solution #"<<1+uid<<"="<<cell_exact_solution;
}

∀ nodes void debugIniNodes(void) @ -9.5 if (option_debug_solutions){
  info()<<"[iniNodes] node_exact_solution #"<<1+uid<<"="<<node_exact_solution;
}


// ****************************************************************************
// * Debug des variables solutions d'Aleph
// ****************************************************************************
∀ own cells void debugGetFinalCellResults(void) @ 31.0 if (option_debug_aleph_sol){
  info()<<"\t\t[getFinalCellResults] Cell #"<<1+uid<<", cell_θ="<<cell_θ
        <<", cell_θ-cell_exact_solution="<<cell_θ-cell_exact_solution;
}
∀ own nodes void debugGetFinalNodeResults(void) @ 31.0 if (option_debug_aleph_sol){
  info()<<"\t\t[getFinalNodeResults] Node #"<<1+uid<<", node_θ="<<node_θ
        <<", node_θ-node_exact_solution="<<node_θ-node_exact_solution;
}


// ****************************************************************************
// * Debug des erreurs
// ****************************************************************************
void debugRelativeError(void) @ 48.0 {
  if(!option_debug_errors) return;
  info()<<"\t[relativeError] eh2="<<eh2;
}
