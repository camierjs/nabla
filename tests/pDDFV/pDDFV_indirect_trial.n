// ****************************************************************************
// * Parties qui s'occupe des inconnues aux faces introduites.
// * Cette façon de faire est générique au sens où la matrice
// * aux faces est construite comme prolongement du DDFV.
// ****************************************************************************



// ****************************************************************************
// * Boucle pour trouver la bonne face associée en vis-à-vis
// ****************************************************************************
Face iLoopOnThisNodeToFindForeHeadFace(Bool dbg, Face f, Node n, Cell c){
  const Integer nidf0 = 1+f->node(0)->uniqueId().asInteger();
  const Integer nidf1 = 1+f->node(1)->uniqueId().asInteger();
  if (dbg) info()<<"\t\t\t\t\t\33[33m[iLoopOnThisNodeToFindForeHeadFace] Base is "<<nidf0<<"->"<<nidf1<<"\33[m";
  foreach n face{
    const Integer nidfn0 = 1+fn->node(0)->uniqueId().asInteger();
    const Integer nidfn1 = 1+fn->node(1)->uniqueId().asInteger();
    if (f==*fn) continue;
    if (dbg) info()<<"\t\t\t\t\t\t\33[33m[iLoopOnThisNodeToFindForeHeadFace] Trying "<<nidfn0<<"->"<<nidfn1<<"\33[m";
    // Si c'est une face de bord
    if (fn->nbCell()==1){
      // et que la maille associée est celle passée en argument
      if (fn->cell(0).uniqueId() == c->uniqueId()){
        if (dbg) info()<<"\t\t\t\t\t\t\33[33m[iLoopOnThisNodeToFindForeHeadFace] Hit!\33[m";
        return *fn; // C'est que c'est la bonne
      }
      //continue;     // Sinon on continue à chercher
    }else{
      // Si c'est une face interne, on teste les deux cas
      if (fn->backCell().uniqueId() == c->uniqueId()){
        if (dbg) info()<<"\t\t\t\t\t\t\33[33m[iLoopOnThisNodeToFindForeHeadFace] Hit!\33[m";
        return *fn;
      }
      if (fn->frontCell().uniqueId() == c->uniqueId()){
        if (dbg) info()<<"\t\t\t\t\t\t\33[33m[iLoopOnThisNodeToFindForeHeadFace] Hit!\33[m";
        return *fn;
      }
    }
    //continue;    
  }
  fatal("iLoopOnThisNodeToFindForeHeadFace");
}


// ****************************************************************************
// * Fonction Inner de test du secteur soumis
// ****************************************************************************
Bool iInnerTrialLoop(Bool dbg, Face f, Real3x3 kappa, Real3 νs,
                     Real *pj, Real *pk, Real *α, Real *β, Real *Aire,
                     Face *face_ahead){
  const Real3 D=coord[f->node(0)];
  const Real3 E=coord[f->node(1)];
  const Real3 S=½*(D+E);
  const Real3 P=cell_mass_center[f->backCell()];
  const Real3 Q=cell_mass_center[f->frontCell()];
  const Integer nid0 = 1+f->node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+f->node(1)->uniqueId().asInteger();
  Real3 J,K;
  //const Real ε=1.0;//__DBL_EPSILON__;

  if (dbg) info()<<"\t\t\33[36m[iInnerTrialLoop] Inner Looping on face "<<nid0<<"->"<<nid1<<"\33[m";

  // Quart QE
  J=Q;
  K=E;
  *α=n(S,K)⋅(kappa⨂νs);
  *β=n(J,S)⋅(kappa⨂νs);
  if (dbg) info()<<"\t\t\t\33[36m[iInnerTrialLoop] ? QE alpha="<<*α<<", beta="<<*β<<"\33[m";
  if (*α>=0.0 && *β>=0.0){
    *pj=cell_θ[f->frontCell()];
    *pk=node_θ[f->node(1)];
    *Aire=geomComputeTriangleArea(S,J,K);
    *face_ahead=iLoopOnThisNodeToFindForeHeadFace(dbg, f, f->node(1), f->frontCell());
    return true;
  }

  // Quart DQ
  J=D;
  K=Q;
  *α=n(S,K)⋅(kappa⨂νs);
  *β=n(J,S)⋅(kappa⨂νs);
  if (dbg) info()<<"\t\t\t\33[36m[iInnerTrialLoop] ? DQ alpha="<<*α<<", beta="<<*β<<"\33[m";
  if (*α>=0.0 && *β>=0.0){
    *pj=node_θ[f->node(0)];
    *pk=cell_θ[f->frontCell()];
    *Aire=geomComputeTriangleArea(S,J,K);
    *face_ahead=iLoopOnThisNodeToFindForeHeadFace(dbg, f, f->node(0), f->frontCell());
    return true;
  }

  // Quart PD
  J=P;
  K=D;
  *α=n(S,K)⋅(kappa⨂νs);
  *β=n(J,S)⋅(kappa⨂νs);
  if (dbg) info()<<"\t\t\t\33[36m[iInnerTrialLoop] ? PD alpha="<<*α<<", beta="<<*β<<"\33[m";
  if (*α>=0.0 && *β>=0.0){
    *pj=cell_θ[f->backCell()];
    *pk=node_θ[f->node(0)];
    *Aire=geomComputeTriangleArea(S,J,K);
    *face_ahead=iLoopOnThisNodeToFindForeHeadFace(dbg, f, f->node(0), f->backCell());
    return true;
  }
  
  // Quart EP
  J=E;
  K=P;
  *α=n(S,K)⋅(kappa⨂νs);
  *β=n(J,S)⋅(kappa⨂νs);
  if (dbg) info()<<"\t\t\t\33[36m[iInnerTrialLoop] ? EP alpha="<<*α<<", beta="<<*β<<"\33[m";
  if (*α>=0.0 && *β>=0.0){
    *pj=node_θ[f->node(1)];
    *pk=cell_θ[f->backCell()];
    *Aire=geomComputeTriangleArea(S,J,K);
    *face_ahead=iLoopOnThisNodeToFindForeHeadFace(dbg, f, f->node(1), f->backCell());
    return true;
  }

  return false;
}



// ****************************************************************************
// * Fonction Outer de test du secteur soumis
// ****************************************************************************
Bool iOuterTrialLoop(Bool dbg, Face f, Real3x3 kappa, Real3 νs,
                     Real *pj, Real *pk, Real *α, Real *β, Real *Aire,
                     Face *face_ahead){
  const Real3 D=coord[f->node(0)];
  const Real3 E=coord[f->node(1)];
  const Real3 S=½*(D+E);
  const Real3 P=cell_mass_center[f->cell(0)];
  const Integer nid0 = 1+f->node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+f->node(1)->uniqueId().asInteger();
  Real3 J,K;
  // Ré-orientation de la normale s'il le faut
  const Bool swap=((S-P)⋅n(D,E))<0.0;
  νs=swap?-νs:νs;

  if (dbg) info()<<"\t\t\33[36m[iOuterTrialLoop] Outer "
                 <<(swap?"\33[31mSwaped\33[32m ":"")
                 <<"Looping on face "<<nid0<<"->"<<nid1<<"\33[m";

  // Quart PD
  J=P;
  K=D;
  *α=n(S,K)⋅(kappa⨂νs);
  *β=n(J,S)⋅(kappa⨂νs);
  if (dbg) info()<<"\t\t\t\33[36m[iOuterTrialLoop] ? PD alpha="<<*α<<", beta="<<*β<<"\33[m";
  if (*α>=0.0 && *β>=0.0){
    *pj=cell_θ[f->cell(0)];
    *pk=node_θ[f->node(0)];
    *Aire=geomComputeTriangleArea(S,J,K);
    *face_ahead=iLoopOnThisNodeToFindForeHeadFace(dbg, f, f->node(0), f->cell(0));
    return true;
  }
  
  // Quart EP
  J=E;
  K=P;
  *α=n(S,K)⋅(kappa⨂νs);
  *β=n(J,S)⋅(kappa⨂νs);
  if (dbg) info()<<"\t\t\t\33[36m[iOuterTrialLoop] ? EP alpha="<<*α<<", beta="<<*β<<"\33[m";
  if (*α>=0.0 && *β>=0.0){
    *pj=node_θ[f->node(1)];
    *pk=cell_θ[f->cell(0)];
    *Aire=geomComputeTriangleArea(S,J,K);
    *face_ahead=iLoopOnThisNodeToFindForeHeadFace(dbg, f, f->node(1), f->cell(0));
    return true;
  }
  
  return false;
}



// ****************************************************************************
// * Switch Inner/Outer avant la fonction de test du secteur soumis
// ****************************************************************************
Bool iTrialLoop(Bool dbg, Face f, Real3x3 kappa, Real3 νs,
                Real *pj, Real *pk, Real *α, Real *β, Real *Aire,
                Face *face_ahead){
  if (f->nbCell()==2) return iInnerTrialLoop(dbg,f,kappa,νs,pj,pk,α,β,Aire,face_ahead);
  return iOuterTrialLoop(dbg,f,kappa,νs,pj,pk,α,β,Aire,face_ahead);
}



// ****************************************************************************
// Pour les faces internes, tout est bien déterminé, pas de ré-orientation à prévoir
// ****************************************************************************
own inner faces void iInnerTrial(void) @ 1.0 if (option_trial &&
                                                 option_indirect){
  const Real3 D=coord[0];
  const Real3 E=coord[1];
  const Real3 P=cell_mass_center[backCell];
  const Real3 Q=cell_mass_center[frontCell];
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  Real apQE,bpQE,ApQE,pfQE,pgQE;
  Real aqQE,bqQE,AqQE,phQE,piQE;
  Real apDQ,bpDQ,ApDQ,pfDQ,pgDQ;
  Real aqDQ,bqDQ,AqDQ,phDQ,piDQ;
  Real apPD,bpPD,ApPD,pfPD,pgPD;
  Real aqPD,bqPD,AqPD,phPD,piPD;
  Real apEP,bpEP,ApEP,pfEP,pgEP;
  Real aqEP,bqEP,AqEP,phEP,piEP;
  Bool dbg=option_debug_trial;
  Bool okQETail,okQEHead;
  Bool okDQTail,okDQHead;
  Bool okPDTail,okPDHead;
  Bool okEPTail,okEPHead;
  Face face_ahead;

  #warning Ne fait-on pas deux fois le boulot? Appel x2 et vis-à-vis Tail+Head fait au sein de la fonction?
  // Pour chaque face en vis-à-vis, on calcul les contributions des diamants
  // Les quatres possibles pour quads sont QE, DQ, PD ou EP
  if (dbg) info()<<"\33[37m[iInnerTrial] Face \33[7m"<<nid0<<"\33[0;37m->"<<nid1<<", QE\33[m";
  okQETail=iTrialLoop(dbg, *this,      κ,  n(Q,E), &pfQE, &pgQE, &apQE, &bpQE, &ApQE, &face_ahead);
  if (dbg) info()<<"\33[37m[iInnerTrial] Face "<<nid0<<"->\33[7m"<<nid1<<"\33[0;37m, QE\33[m";
  okQEHead=iTrialLoop(dbg, face_ahead, κ, -n(Q,E), &phQE, &piQE, &aqQE, &bqQE, &AqQE, &face_ahead);
  
  if (dbg) info()<<"\33[37m[iInnerTrial] Face \33[7m"<<nid0<<"\33[0;37m->"<<nid1<<", DQ\33[m";
  okDQTail=iTrialLoop(dbg, *this,      κ,  n(D,Q), &pfDQ, &pgDQ, &apDQ, &bpDQ, &ApDQ, &face_ahead);
  if (dbg) info()<<"\33[37m[iInnerTrial] Face "<<nid0<<"->\33[7m"<<nid1<<"\33[0;37m, DQ\33[m";
  okDQHead=iTrialLoop(dbg, face_ahead, κ, -n(D,Q), &phDQ, &piDQ, &aqDQ, &bqDQ, &AqDQ, &face_ahead);
  
  if (dbg) info()<<"\33[37m[iInnerTrial] Face \33[7m"<<nid0<<"\33[0;37m->"<<nid1<<", PD\33[m";
  okPDTail=iTrialLoop(dbg, *this,      κ,  n(P,D), &pfPD, &pgPD, &apPD, &bpPD, &ApPD, &face_ahead);
  if (dbg) info()<<"\33[37m[iInnerTrial] Face "<<nid0<<"->\33[7m"<<nid1<<"\33[0;37m, PD\33[m";
  okPDHead=iTrialLoop(dbg, face_ahead, κ, -n(P,D), &phPD, &piPD, &aqPD, &bqPD, &AqPD, &face_ahead);
  
  if (dbg) info()<<"\33[37m[iInnerTrial] Face \33[7m"<<nid0<<"\33[0;37m->"<<nid1<<", EP\33[m";
  okEPTail=iTrialLoop(dbg, *this,      κ,  n(E,P), &pfEP, &pgEP, &apEP, &bpEP, &ApEP, &face_ahead);
  if (dbg) info()<<"\33[37m[iInnerTrial] Face "<<nid0<<"->\33[7m"<<nid1<<"\33[0;37m, EP\33[m";
  okEPHead=iTrialLoop(dbg, face_ahead, κ, -n(E,P), &phEP, &piEP, &aqEP, &bqEP, &AqEP, &face_ahead);

  // On vérifie que tout va bien
  assert(okQETail && okDQTail && okPDTail && okEPTail);
  assert(okQEHead && okDQHead && okPDHead && okEPHead);
  
  if (okQETail && okQEHead){
    const Real Ap=ApQE;
    const Real Aq=AqQE;
    const Real λsp_num=aqQE*phQE+bqQE*piQE;
    const Real λsq_num=apQE*pfQE+bpQE*pgQE;
    const Real λs_denum=AqQE*(apQE*pfQE+bpQE*pgQE)+ApQE*(aqQE*phQE+bqQE*piQE);
    const Bool null=(λs_denum==0.0);
    const Real λsp=null?½:λsp_num;
    const Real λsq=null?½:λsq_num;
    const Real λsp_denum=null?Ap:λs_denum;
    const Real λsq_denum=null?Aq:λs_denum;
    interior_trial_s[0] = ½*(apQE+bpQE)*λsp/λsp_denum;
    interior_trial_q[0] = ½*(aqQE+bqQE)*λsq/λsq_denum;
    assert(interior_trial_s[0]>=0.0 && interior_trial_q[0]>=0.0);
  }else{
    if (okQETail){
       info()<<"\33[7;37m[iInnerTrial] Face #"<<uid<<":\33[0m\33[32m "
            <<nid0<<"-"<<nid1<<": \t\33[33m okQETail \33[m";
      interior_trial_tail[0] = true;
      interior_trial_s[0] = ½*(apQE+bpQE)/ApQE;
      interior_trial_e[0] = ½*apQE/ApQE;
      interior_trial_q[0] = ½*bpQE/ApQE;
   }
    if (okQEHead){
      info()<<"\33[7;37m[iInnerTrial] Face #"<<uid<<":\33[0m\33[32m "
            <<nid0<<"-"<<nid1<<": \t\33[33m okQEHead \33[m";
      interior_trial_head[0] = true;
      interior_trial_s[0] = ½*(aqQE+bqQE)/AqQE;
      interior_trial_e[0] = ½*aqQE/AqQE;
      interior_trial_q[0] = ½*bqQE/AqQE;
    }
  }

  if (okDQTail && okDQHead){
    const Real Ap=ApDQ;
    const Real Aq=AqDQ;
    const Real λsp_num=aqDQ*phDQ+bqDQ*piDQ;
    const Real λsq_num=apDQ*pfDQ+bpDQ*pgDQ;
    const Real λs_denum=AqDQ*(apDQ*pfDQ+bpDQ*pgDQ)+ApDQ*(aqDQ*phDQ+bqDQ*piDQ);
    const Bool null=(λs_denum==0.0);
    const Real λsp=null?½:λsp_num;
    const Real λsq=null?½:λsq_num;
    const Real λsp_denum=null?Ap:λs_denum;
    const Real λsq_denum=null?Aq:λs_denum;
    interior_trial_s[1] = ½*(apDQ+bpDQ)*λsp/λsp_denum;
    interior_trial_q[1] = ½*(aqDQ+bqDQ)*λsq/λsq_denum;
    assert(interior_trial_s[1]>=0.0 && interior_trial_q[1]>=0.0);
  }else{
    if (okDQTail){
      info()<<"\33[7;37m[iInnerTrial] Face #"<<uid<<":\33[0m\33[32m "
            <<nid0<<"-"<<nid1<<": \t\33[33m okDQTail \33[m";
      interior_trial_tail[1] = true;
      interior_trial_s[1] = ½*(apDQ+bpDQ)/ApDQ;
      interior_trial_e[1] = ½*apDQ/ApDQ;
      interior_trial_q[1] = ½*bpDQ/ApDQ;
    }
    if (okDQHead){
      info()<<"\33[7;37m[iInnerTrial] Face #"<<uid<<":\33[0m\33[32m "
            <<nid0<<"-"<<nid1<<": \t\33[33m okDQHead \33[m";
      interior_trial_head[1] = true;
      interior_trial_s[1] = ½*(aqDQ+bqDQ)/AqDQ;
      interior_trial_e[1] = ½*aqDQ/AqDQ;
      interior_trial_q[1] = ½*bqDQ/AqDQ;
    }
  }
  
  if (okPDTail && okPDHead){
    const Real Ap=ApPD;
    const Real Aq=AqPD;
    const Real λsp_num=aqPD*phPD+bqPD*piPD;
    const Real λsq_num=apPD*pfPD+bpPD*pgPD;
    const Real λs_denum=AqPD*(apPD*pfPD+bpPD*pgPD)+ApPD*(aqPD*phPD+bqPD*piPD);
    const Bool null=(λs_denum==0.0);
    const Real λsp=null?½:λsp_num;
    const Real λsq=null?½:λsq_num;
    const Real λsp_denum=null?Ap:λs_denum;
    const Real λsq_denum=null?Aq:λs_denum;
    interior_trial_s[2] = ½*(apPD+bpPD)*λsp/λsp_denum;
    interior_trial_q[2] = ½*(aqPD+bqPD)*λsq/λsq_denum;
    assert(interior_trial_s[2]>=0.0 && interior_trial_q[2]>=0.0);
  }else{
    if (okPDTail){
       info()<<"\33[7;37m[iInnerTrial] Face #"<<uid<<":\33[0m\33[32m "
            <<nid0<<"-"<<nid1<<": \t\33[33m okPDTail \33[m";
      interior_trial_tail[2] = true;
      interior_trial_s[2] = ½*(apPD+bpPD)/ApPD;
      interior_trial_e[2] = ½*apPD/ApPD;
      interior_trial_q[2] = ½*bpPD/ApPD;
    }
    if (okPDHead){
      info()<<"\33[7;37m[iInnerTrial] Face #"<<uid<<":\33[0m\33[32m "
            <<nid0<<"-"<<nid1<<": \t\33[33m okPDHead \33[m";
      interior_trial_head[2] = true;
      interior_trial_s[2] = ½*(aqPD+bqPD)/AqPD;
      interior_trial_e[2] = ½*aqPD/AqPD;
      interior_trial_q[2] = ½*bqPD/AqPD;
    }
  }
  
  if (okEPTail && okEPHead){
    const Real Ap=ApEP;
    const Real Aq=AqEP;
    const Real λsp_num=aqEP*phEP+bqEP*piEP;
    const Real λsq_num=apEP*pfEP+bpEP*pgEP;
    const Real λs_denum=AqEP*(apEP*pfEP+bpEP*pgEP)+ApEP*(aqEP*phEP+bqEP*piEP);
    const Bool null=(λs_denum==0.0);
    const Real λsp=null?½:λsp_num;
    const Real λsq=null?½:λsq_num;
    const Real λsp_denum=null?Ap:λs_denum;
    const Real λsq_denum=null?Aq:λs_denum;
    interior_trial_s[3] = ½*(apEP+bpEP)*λsp/λsp_denum;
    interior_trial_q[3] = ½*(aqEP+bqEP)*λsq/λsq_denum;
    assert(interior_trial_s[3]>=0.0 && interior_trial_q[3]>=0.0);
  }else{
    if (okEPTail){
       info()<<"\33[7;37m[iInnerTrial] Face #"<<uid<<":\33[0m\33[32m "
            <<nid0<<"-"<<nid1<<": \t\33[33m okEPTail \33[m";
      interior_trial_tail[3] = true;
      interior_trial_s[3] = ½*(apEP+bpEP)/ApEP;
      interior_trial_e[3] = ½*apEP/ApEP;
      interior_trial_q[3] = ½*bpEP/ApEP;
   }
    if (okEPHead){
      info()<<"\33[7;37m[iInnerTrial] Face #"<<uid<<":\33[0m\33[32m "
            <<nid0<<"-"<<nid1<<": \t\33[33m okEPHead \33[m";
      interior_trial_head[3] = true;
      interior_trial_s[3] = ½*(aqEP+bqEP)/AqEP;
      interior_trial_e[3] = ½*aqEP/AqEP;
      interior_trial_q[3] = ½*bqEP/AqEP;
    }
  }
}



// ****************************************************************************
// * Second membre, coté Trial
// ****************************************************************************
own inner faces void iInnerTrialRhs(void) @ 13.1 if (option_trial &&
                                                     option_indirect){
  const Real3 D=coord[0];
  const Real3 E=coord[1];
  const Real3 S=½*(D+E);
  const Real3 P=cell_mass_center[backCell];
  const Real3 Q=cell_mass_center[frontCell];
  const Real face_area = geomComputeTriangleArea(D,Q,E)+geomComputeTriangleArea(D,E,P);
  const Real h=face_area*f(S);
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  if (option_debug_trial)
    info()<<"\33[36m[iInnerTrialRhs] Aleph RHS Trial Inner face "<<nid0<<"->"<<nid1<<"\33[m";
  ℵ rhs addValue(face_θ,this, h);
}

own outer faces void iOuterTrialRhs(void) @ 13.1 if (option_trial &&
                                                     option_indirect ){
  const Real3 D=coord[0];
  const Real3 E=coord[1];
  const Real3 S=½*(D+E);
  const Real h=g(S);
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  if (option_debug_trial)
    info()<<"\33[36m[iOuterTrialRhs] Aleph RHS Trial Outer face "<<nid0<<"->"<<nid1<<"\33[m";
  ℵ rhs addValue(face_θ,this, h);
 }


// ****************************************************************************
// * Remplissage matriciel, coté Trial, Tail
// ****************************************************************************
inner faces void iTrialMtxTail(void) @ 16.4 if (option_trial &&
                                                option_indirect){
  Face f;
  const Real s0value = interior_trial_s[0];
  const Real q0value = interior_trial_q[0];
  const Real e0value = interior_trial_e[0];
  const Real s1value = interior_trial_s[1];
  const Real q1value = interior_trial_q[1];
  const Real e1value = interior_trial_e[1];
  const Real s2value = interior_trial_s[2];
  const Real q2value = interior_trial_q[2];
  const Real e2value = interior_trial_e[2];
  const Real s3value = interior_trial_s[3];
  const Real q3value = interior_trial_q[3];
  const Real e3value = interior_trial_e[3];
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  
  if (option_debug_trial)
    info()<<"\t\t\t\33[36m[iTrialMtxTail] Aleph Matrix Trial filling Tail face "
          <<nid0<<"->"<<nid1<<"\33[m";

  // Contributions diagonales
  ℵ matrix addValue(face_θ,this, face_θ,this, s0value);
  ℵ matrix addValue(face_θ,this, face_θ,this, s1value);
  ℵ matrix addValue(face_θ,this, face_θ,this, s2value);
  ℵ matrix addValue(face_θ,this, face_θ,this, s3value);

  // Quart QE
  if (option_debug_trial)
    info()<<"\t\t\t\t\33[36m[iTrialMtxTail] Aleph Matrix Trial Quart QE\33[m";
  f=iLoopOnThisNodeToFindForeHeadFace(false,*this,node(1),frontCell);
  if (interior_trial_tail[0]){
      fatal("Not yet here");
    ℵ matrix addValue(face_θ,this, cell_θ,frontCell, -q0value);
    ℵ matrix addValue(face_θ,this, node_θ,node(1),   -e0value);
  }else{
    ℵ matrix addValue(face_θ,this, face_θ,f, -q0value);
  }
  
  // Quart DQ
  if (option_debug_trial)
    info()<<"\t\t\t\t\33[36m[iTrialMtxTail] Aleph Matrix Trial Quart DQ\33[m";
  f=iLoopOnThisNodeToFindForeHeadFace(false,*this,node(0),frontCell);
  if (interior_trial_tail[1]){
      fatal("Not yet here");
    ℵ matrix addValue(face_θ,this, node_θ,node(0),   -q1value);
    ℵ matrix addValue(face_θ,this, cell_θ,frontCell, -e1value);
  }else{
    ℵ matrix addValue(face_θ,this, face_θ,f, -q1value);
  }
  
  // Quart PD
  if (option_debug_trial)
    info()<<"\t\t\t\t\33[36m[iTrialMtxTail] Aleph Matrix Trial Quart PD\33[m";
  f=iLoopOnThisNodeToFindForeHeadFace(false,*this,node(0),backCell);
  if (interior_trial_tail[2]){
      fatal("Not yet here");
    ℵ matrix addValue(face_θ,this, cell_θ,backCell, -q2value);
    ℵ matrix addValue(face_θ,this, node_θ,node(0),  -e2value);
  }else{
    ℵ matrix addValue(face_θ,this, face_θ,f, -q2value);
  }
  
  // Quart EP
  if (option_debug_trial)
    info()<<"\t\t\t\t\33[36m[iTrialMtxTail] Aleph Matrix Trial Quart EP\33[m";
  f=iLoopOnThisNodeToFindForeHeadFace(false,*this,node(1),backCell);
  if (interior_trial_tail[3]){
      fatal("Not yet here");
    ℵ matrix addValue(face_θ,this, node_θ,node(1),  -q3value);
    ℵ matrix addValue(face_θ,this, cell_θ,backCell, -e3value);
  }else{
    ℵ matrix addValue(face_θ,this, face_θ,f, -q3value);
  }
}

Integer fNbCells(Face f){ return f.nbCell();}
Integer fnid0(Face f){ return 1+f.node(0).uniqueId().asInteger();}
Integer fnid1(Face f){ return 1+f.node(1).uniqueId().asInteger();}



// ****************************************************************************
// * Remplissage matriciel, coté Trial, Head
// ****************************************************************************
inner faces void iTrialMtxHead(void) @ 16.5 if (option_trial &&
                                                option_indirect){
  Face f;
  const Real s0value = interior_trial_s[0];
  const Real q0value = interior_trial_q[0];
  const Real e0value = interior_trial_e[0];
  const Real s1value = interior_trial_s[1];
  const Real q1value = interior_trial_q[1];
  const Real e1value = interior_trial_e[1];
  const Real s2value = interior_trial_s[2];
  const Real q2value = interior_trial_q[2];
  const Real e2value = interior_trial_e[2];
  const Real s3value = interior_trial_s[3];
  const Real q3value = interior_trial_q[3];
  const Real e3value = interior_trial_e[3];
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  
  if (option_debug_trial)
    info()<<"\t\t\t\33[36m[iTrialMtxHead] Aleph Matrix Trial filling Head face "
          <<nid0<<"->"<<nid1<<"\33[m";

  // Quart QE
  if (option_debug_trial)
    info()<<"\t\t\t\t\33[36m[iTrialMtxHead] Aleph Matrix Trial Quart QE\33[m";
  f=iLoopOnThisNodeToFindForeHeadFace(false,*this,node(1),frontCell);
  if (fNbCells(f)==2){
    ℵ matrix addValue(face_θ,f, face_θ,f, q0value);
    if (interior_trial_head[0]){
      fatal("Not yet here");
      ℵ matrix addValue(face_θ,f, cell_θ,frontCell, -q0value);
      ℵ matrix addValue(face_θ,f, node_θ,node(1),   -e0value);
    }else{
      ℵ matrix addValue(face_θ,f, face_θ,this, -s0value);
    }
  }else{
    if (option_debug_trial)
      info()<<"\t\t\t\t\33[36m[iTrialMtxHead] Outer Aleph Matrix Trial Quart QE "<<fnid0(f)<<"->"<<fnid1(f)<<"\33[m";
  }
  
  // Quart DQ
  if (option_debug_trial)
    info()<<"\t\t\t\t\33[36m[iTrialMtxHead] Aleph Matrix Trial Quart DQ\33[m";
  f=iLoopOnThisNodeToFindForeHeadFace(false,*this,node(0),frontCell);
  if (fNbCells(f)==2){
    ℵ matrix addValue(face_θ,f, face_θ,f, q1value);
    if (interior_trial_head[1]){
      fatal("Not yet here");
      ℵ matrix addValue(face_θ,f, node_θ,node(0),   -q1value);
      ℵ matrix addValue(face_θ,f, cell_θ,frontCell, -e1value);
    }else{
      ℵ matrix addValue(face_θ,f, face_θ,this, -s1value);
    }
  }else{
    if (option_debug_trial)
      info()<<"\t\t\t\t\33[36m[iTrialMtxHead] Outer Aleph Matrix Trial Quart DQ "<<fnid0(f)<<"->"<<fnid1(f)<<"\33[m";
  }
  
  // Quart PD
  if (option_debug_trial)
    info()<<"\t\t\t\t\33[36m[iTrialMtxHead] Aleph Matrix Trial Quart PD\33[m";
  f=iLoopOnThisNodeToFindForeHeadFace(false,*this,node(0),backCell);
  if (fNbCells(f)==2){
    ℵ matrix addValue(face_θ,f, face_θ,f, q2value);
    if (interior_trial_head[2]){
      fatal("Not yet here");
      ℵ matrix addValue(face_θ,f, cell_θ,backCell, -q2value);
      ℵ matrix addValue(face_θ,f, node_θ,node(0),  -e2value);
    }else{
      ℵ matrix addValue(face_θ,f, face_θ,this, -s2value);
    }
  }else{
    if (option_debug_trial)
      info()<<"\t\t\t\t\33[36m[iTrialMtxHead] Outer Aleph Matrix Trial Quart PD "<<fnid0(f)<<"->"<<fnid1(f)<<"\33[m";
  }
  
  // Quart EP
  if (option_debug_trial)
    info()<<"\t\t\t\t\33[36m[iTrialMtxHead] Aleph Matrix Trial Quart EP\33[m";
  f=iLoopOnThisNodeToFindForeHeadFace(false,*this,node(1),backCell);
  if (fNbCells(f)==2){
    ℵ matrix addValue(face_θ,f, face_θ,f, q3value);
    if (interior_trial_head[3]){
      fatal("Not yet here");
      ℵ matrix addValue(face_θ,f, node_θ,node(1),  -q3value);
      ℵ matrix addValue(face_θ,f, cell_θ,backCell, -e3value);
    }else{
      ℵ matrix addValue(face_θ,f, face_θ,this, -s3value);
    }
  }else{
    if (option_debug_trial)
      info()<<"\t\t\t\t\33[36m[iTrialMtxHead] Outer Aleph Matrix Trial Quart EP "<<fnid0(f)<<"->"<<fnid1(f)<<"\33[m";
  }
}



// ****************************************************************************
// * Conditions de Dirichlet
// ****************************************************************************
own outer faces void iTrialDirichlet(void) @ 17.0 if (option_trial &&
                                                      option_indirect){
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  if (option_debug_trial_aleph)
    info()<<"\t\t\t\t\33[36m[iTrialDirichlet] Outer Aleph Matrix trial face "<<nid0<<"->"<<nid1<<"\33[m";
  ℵ matrix addValue(face_θ,this, face_θ,this, +1.0);
}


// ****************************************************************************
// * Récupération des résultats, coté Trial
// ****************************************************************************
own faces void getTrial(void) @ 20.0 if (option_trial &&
                                         option_indirect){
  Real face_θ_kp1;
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  face_θ_kp1=ℵ lhs getValue(face_θ,this);
  if (option_debug_trial_aleph)
    info()<<"\33[36m[getTrial] Aleph LHS Trial get face "
          <<nid0<<"->"<<nid1<<":\t"<<face_θ_kp1<<"\33[m";
  if (face_θ_kp1<0.0)
    info()<<"\t\33[33m[getTrial] face_theta="<< face_θ_kp1 <<"\33[m";
  assert(face_θ_kp1>=0.0);
  if (GlobalIteration==1.0) face_θ_1m0=face_θ_kp1mk;
  face_θ_kp1mk=fabs(face_θ_kp1-face_θ);
  face_θ=face_θ_kp1;
 }

