///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// ****************************************************************************
// * Fonctions du maillage Primal
// ****************************************************************************


// ****************************************************************************
// * Fonction de test du secteur soumis
// ****************************************************************************
Bool dHitPrimalFace(Bool dbg, Face fc, Real3x3 kappa, Real3 ns, Real3 p,
                   Real3 *f, Real3 *g, Real *pf, Real *pg, Real *α, Real *β){
  const Node n0=fc->node(0);
  const Node n1=fc->node(1);
  const Integer nid0 = 1+fc->node(0).uniqueId().asInteger();
  const Integer nid1 = 1+fc->node(1).uniqueId().asInteger();
  const Real3 s=½*(coord[n0]+coord[n1]);
  // Swap selon le vecteur normal de la face de test et le vecteur PS
  const Bool swap=((s-p)⋅n(coord[n0],coord[n1]))<0.0;
  if (dbg) info()<<"\t\t\33[36m[primalLoop] Trying "
                 <<(swap?"\33[31mswaped\33[36m ":"")
                 <<"face \33[32m"
                 <<nid0<<"->"<<nid1<<"\33[m";
  *f=swap?coord[n1]:coord[n0];
  *g=swap?coord[n0]:coord[n1];
  if (dbg) info()<<"\t\t\33[36m[primalLoop] G="<<*g<<"\33[m";
  if (dbg) info()<<"\t\t\33[36m[primalLoop] F="<<*f<<"\33[m";
  *α=n(p,*g)⋅(kappa⨂ns);
  *β=n(*f,p)⋅(kappa⨂ns);
  if (dbg) info()<<"\t\t\33[36m[primalLoop] n(p,*g)="<<n(p,*g)<<"\33[m";
  if (dbg) info()<<"\t\t\33[36m[primalLoop] n(*f,p)="<<n(*f,p)<<"\33[m";
  if (dbg) info()<<"\t\t\33[36m[primalLoop] alpha="<<*α<<", beta="<<*β<<"\33[m";
  if (!(*α>=0.0 && *β>=0.0)) return false;
  if (dbg) info()<<"\t\t\33[7;36m[primalLoop] true"
                 <<" with face "<<(swap?"\33[31m":"\33[32m")<<(swap?nid1:nid0)
                 <<"->"<<(swap?nid0:nid1)<<"\33[m";
  *pf=swap?node_θ[n1]:node_θ[n0];
  *pg=swap?node_θ[n0]:node_θ[n1];
  return true;
}


// ****************************************************************************
// * Fonction qui déclenche les tests aux différentes faces
// * afin de trouver le bon secteur
// ****************************************************************************
Bool dPrimalLoop(Bool dbg,Cell c, Real3x3 kappa, Real3 ns, Real3 p,
                Real3 *f, Real3 *g, Real *pf, Real *pg,
                Real *α, Real *β, Face this_face){
  const Integer cid=1+c->uniqueId().asInteger();
  if (dbg) info()<<"\t\33[33m[primalLoop] Focus on \33[32mcell #"
                 <<cid <<" ["
                 << 1+c->node(0).uniqueId().asInteger() <<","
                 << 1+c->node(1).uniqueId().asInteger() <<","
                 << 1+c->node(2).uniqueId().asInteger() <<","
                 << (full_quads?1+c->node(3).uniqueId().asInteger():-1/*not in triangles*/)
                 <<"]\33[33m, kNs="<<kappa⨂ns<<"\33[m";
  // this_face en premier
  if (dHitPrimalFace(dbg,this_face,kappa,ns,p,f,g,pf,pg,α,β))
    return true;
  // puis les autres
  foreach c face{
    if (*fc==this_face) continue;
    if (dHitPrimalFace(dbg,*fc,kappa,ns,p,f,g,pf,pg,α,β))
      return true;
  }
  fatal("primalLoop: Should not be there!");
}



// ****************************************************************************
// Pour les faces externes, on ré-oriente éventuellement la normale vers l'exterieur
// ****************************************************************************
own outer faces void dOuterPrimal(void) @ 1.0 if (!option_indirect){
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  Real3 f,g;
  Real pf,pg,ap,bp;
  const Bool dbg=option_debug_primal;
  const Real3 d=coord[0];
  const Real3 e=coord[1];
  const Real3 s=½*(d+e);
  const Real3 p=cell_mass_center[0];
  const Real3 Nde=n(d,e);
  // Ré-orientation de la normale s'il le faut
  const Bool swap=((s-p)⋅Nde)<0.0;
  const Real3 ns=swap?-Nde:Nde;
  if (dbg) info()<<"\33[7;32m[outerPrimal] "
                 <<(swap?"\33[31mSwaped\33[32m ":"")
                 <<"Outer Primal Face #"<<uid<<":\33[0m\33[32m "<<nid0<<"-"<<nid1<<"\33[m";
  if (dbg) info()<<"\33[32m[outerPrimal] \tD="<<d<<"\33[m";
  if (dbg) info()<<"\33[32m[outerPrimal] \tE="<<e<<"\33[m";
  if (dbg) info()<<"\33[32m[outerPrimal] \tP="<<p<<"\33[m";
  if (dbg) info()<<"\33[32m[outerPrimal] \tS="<<s<<"\33[m";
  if (dbg) info()<<"\33[32m[outerPrimal] \tNde="<<Nde<<"\33[m";
  if (dbg) info()<<"\33[32m[outerPrimal] \tns="<<ns<<"\33[m";
  {
    const Bool ok=dPrimalLoop(dbg,cell(0),κ,ns,p,&f,&g,&pf,&pg,&ap,&bp,*this);
    const Real Ap=geomComputeTriangleArea(p,f,g);
    assert(ok); // Vérification et calcul des flux
    assert(Ap>0.0);
    boundary_primal_c_sp=½*(ap+bp)/Ap;
    boundary_primal_d_sp=½*(ap*pf+bp*pg)/Ap;
  }
}


// ****************************************************************************
// Pour les faces internes, tout est bien déterminé, pas de ré-orientation à prévoir
// ****************************************************************************
own inner faces void dInnerPrimal(void) @ 1.0 if (!option_indirect){
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  Real3 f,g, h,i;
  Real pf,pg, ph,pi;
  Real ap,bp, aq,bq;
  const Bool dbg=option_debug_primal;
  const Real3 d=coord[0];
  const Real3 e=coord[1];
  const Real3 s=½*(d+e);
  const Real3 p=cell_mass_center[backCell];
  const Real3 q=cell_mass_center[frontCell];
  const Real3 ns=n(d,e);
  if (dbg) info()<<"\33[7;37m[innerPrimal] Face #"<<uid<<":\33[0m\33[32m "
                 <<nid0<<"-"<<nid1<<"\33[m";
  if (dbg) info()<<"\33[37m[innerPrimal] \tD="<<d<<"\33[m";
  if (dbg) info()<<"\33[37m[innerPrimal] \tE="<<e<<"\33[m";
  if (dbg) info()<<"\33[37m[innerPrimal] \tP="<<p<<"\33[m";
  if (dbg) info()<<"\33[37m[innerPrimal] \tQ="<<q<<"\33[m";
  if (dbg) info()<<"\33[37m[innerPrimal] \tS="<<s<<"\33[m";
  if (dbg) info()<<"\33[37m[innerPrimal] \tns="<<ns<<"\33[m";
  {
    const Bool okBack=dPrimalLoop(dbg, (backCell),κ, ns,p,&f,&g,&pf,&pg,&ap,&bp,*this);
    const Bool okFrnt=dPrimalLoop(dbg,(frontCell),κ,-ns,q,&h,&i,&ph,&pi,&aq,&bq,*this);
    const Real Ap=geomComputeTriangleArea(p,f,g);
    const Real Aq=geomComputeTriangleArea(q,h,i);
    const Real λsp_num=aq*ph+bq*pi;
    const Real λsq_num=ap*pf+bp*pg;
    const Real λs_denum=Aq*(ap*pf+bp*pg)+Ap*(aq*ph+bq*pi);
    const Bool null=(λs_denum==0.0);
    const Real λsp=null?½:λsp_num;
    const Real λsq=null?½:λsq_num;
    const Real λsp_denum=null?Ap:λs_denum;
    const Real λsq_denum=null?Aq:λs_denum;
    assert(okBack && okFrnt);
    assert(Ap>0.0);
    assert(Aq>0.0);
    interior_primal_c_sp = ½*(ap+bp)*λsp/λsp_denum;
    interior_primal_c_sq = ½*(aq+bq)*λsq/λsq_denum;
  }
}

