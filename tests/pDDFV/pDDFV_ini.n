///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// ****************************************************************************
// * Partie d'initialisation ]-‚àû,-0[
// ****************************************************************************
void iniŒ¥t(void) @ -10.0{
  Œ¥t=option_Œ¥t_ini;
}


cells void iniCells(void) @ -9.5{
  cell_sd_id=this->owner();
  cell_Œ∏=option_ini_temperature;
  cell_exact_solution=exact_solution(cell_mass_center);
}


nodes void iniNodes(void) @ -9.5{
  node_is_on_ùúïŒ©=false;
  node_unique_id=uid;
  node_sd_id=this->owner();
  node_Œ∏=option_ini_temperature;
  node_exact_solution=exact_solution(coord);
}

outer nodes void iniOuterNodes(void) @ -9.0 {
  node_is_on_ùúïŒ©=is_on_ùúïŒ©(coord);
  if (node_is_on_ùúïŒ©) node_Œ∏=g(coord);
}


faces void iniFaces(void) @ -9.5{
  const ‚Ñù¬≥ d=coord[0];
  const ‚Ñù¬≥ e=coord[1];
  const Real3 s = ¬Ω*(d+e);
  const Real k = 1.0;//option_isotropic?1.0:option_k;
  const Real Œ∏ = 0.0;//option_isotropic?0.0:KappaWaves(s, option_Œ∏);
  //const Real3 v0 = Real3( cos(Œ∏), sin(Œ∏), 0.0);
  const Real3x3 P  = Real3x3(Real3( cos(Œ∏), sin(Œ∏), 0.0),
                             Real3(-sin(Œ∏), cos(Œ∏), 0.0),
                             Real3(    0.0,    0.0, 1.0));
  const Real3x3 Pm1= Real3x3(Real3( cos(Œ∏),-sin(Œ∏), 0.0),
                             Real3( sin(Œ∏), cos(Œ∏), 0.0),
                             Real3(    0.0,    0.0, 1.0));
  Real3x3 M  = Real3x3(Real3(1.0, 0.0, 0.0),
                       Real3(0.0,   k, 0.0),
                       Real3(0.0, 0.0, 0.0));
  const Real3x3 Mg  = Real3x3(Real3(1.0, 0.0, 0.0),
                              Real3(0.0, 1.0, 0.0),
                              Real3(0.0, 0.0, 0.0));
  const Real3x3 Md  = Real3x3(Real3(10.0, 3.0, 0.0),
                              Real3( 3.0, 1.0, 0.0),
                              Real3( 0.0, 0.0, 0.0));
  // Utilis√© pour calculer dans le cas d'option_gao_wu
  // une matrice M pond√©r√©e par les aires
  Real3x3 Mk=Real3x3(Real3(0.0, 0.0, 0.0),
                     Real3(0.0, 0.0, 0.0),
                     Real3(0.0, 0.0, 0.0));
  
  if (option_gao_wu && !option_gao_wu_area)
    Mk=(s.x<0.5)?Mg:Md;
  if (option_gao_wu && option_gao_wu_area){
    Real face_area = 0.0;
    if (nbCell==2){
      const ‚Ñù¬≥ p=cell_mass_center[backCell];
      const ‚Ñù¬≥ q=cell_mass_center[frontCell];
      const ‚Ñù Adqe=geomComputeTriangleArea(d,q,e);
      const ‚Ñù Adep=geomComputeTriangleArea(d,e,p);
      Mk+=Adqe*((q.x<0.5)?Mg:Md);
      Mk+=Adep*((p.x<0.5)?Mg:Md);
      face_area+=Adqe+Adep;
    }else{
      const ‚Ñù¬≥ p=cell_mass_center[0];
      const ‚Ñù Adep=geomComputeTriangleArea(d,e,p);
      Mk+=Adep*((p.x<0.5)?Mg:Md);
      face_area+=Adep;
    }
    Mk/=face_area;
  }
  if (option_gao_wu) M=Mk;
  
  Œ∫=P‚äõM‚äõPm1;
  face_unique_id=uid;
  face_sd_id=(this).owner();
  face_Œ∏=option_ini_temperature;
  face_exact_solution=exact_solution(s);
  face_is_on_ùúïŒ©=false;
  interior_dual_c_lm = interior_dual_c_jk = false;
  interior_dual_c_lm_q = interior_dual_c_jk_q = false;
  interior_dual_c_lm_p = interior_dual_c_jk_p = false;
  interior_trial_head[0] = interior_trial_head[1] =
    interior_trial_head[2] = interior_trial_head[3] = false;
  interior_trial_tail[0] = interior_trial_tail[1] =
    interior_trial_tail[2] = interior_trial_tail[3] = false;
}

outer faces void iniOuterFaces(void) @ -9.0 {
  const Real3 s = ¬Ω*(coord[0]+coord[1]);
  face_is_on_ùúïŒ©=is_on_ùúïŒ©(s);
  if (face_is_on_ùúïŒ©) face_Œ∏=g(s);
}
