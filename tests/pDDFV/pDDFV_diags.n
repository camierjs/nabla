///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// ****************************************************************************
// * Calcul de la longueur caractéristique
// ****************************************************************************
own cells Real volumeOfΩ(Real sum){
  sum+=cell_area;
  return sum;
}
own cells Real getNbCell(Real sum){
  sum+=1.0;
  return sum;
}
void characteristicLength(void) {//@ 47.0{
  const Real h=√(volumeOfΩ(0.0)/getNbCell(0.0));
  info()<<"\t[characteristicLength] h="<<h;
}


// ****************************************************************************
// * Calcul de l'erreur relative
// ****************************************************************************
own cells Real relativeErrorCellPhMinusPe(Real sum){
  const Real Pp=fabs(cell_θ-cell_exact_solution);
  sum+=cell_θ_diff=cell_area*Pp*Pp;
  return sum;
}
own nodes Real relativeErrorNodePhMinusPe(Real sum){
  const Real Pd=fabs(node_θ-node_exact_solution);
  sum+=node_θ_diff=node_area*Pd*Pd;
  return sum;
}
own cells Real relativeErrorCellPe(Real sum){
  sum+=cell_area*(cell_exact_solution*cell_exact_solution);
  return sum;
}
own nodes Real relativeErrorNodePe(Real sum){
  sum+=node_area*(node_exact_solution*node_exact_solution);
  return sum;
}
void relativeError(void) @ 48.0{
  const Real relative_error_cell_θ_num = mpi_reduce(ReduceSum, relativeErrorCellPhMinusPe(0.0));
  const Real relative_error_node_θ_num = mpi_reduce(ReduceSum, relativeErrorNodePhMinusPe(0.0));
  const Real relative_error_num=√(½*(relative_error_cell_θ_num+relative_error_node_θ_num));
  
  const Real relative_error_cell_θ_denum = mpi_reduce(ReduceSum, relativeErrorCellPe(0.0));
  const Real relative_error_node_θ_denum = mpi_reduce(ReduceSum, relativeErrorNodePe(0.0));
  const Real relative_error_denum=√(½*(relative_error_cell_θ_denum+relative_error_node_θ_denum));
  
  eh2=relative_error_num/relative_error_denum;
  //info()<<"\t[relativeError]   Error = "<<eh2;
  printf("*I-pDDFV        [relativeError] \33[1;33m#%d\33[m \33[1;32m%.3e\33[m\n",GlobalIteration,eh2);
}
