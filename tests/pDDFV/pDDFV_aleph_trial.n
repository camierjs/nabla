

// ****************************************************************************
// * Second membre, coté Trial
// ****************************************************************************
own inner faces void alephRhsTrialInnerGeneric(void){// @ 13.1 if (option_trial && option_indirect){
  const Real3 D=coord[0];
  const Real3 E=coord[1];
  const Real3 S=½*(D+E);
  const Real3 P=cell_mass_center[backCell];
  const Real3 Q=cell_mass_center[frontCell];
  const Real face_area = geomComputeTriangleArea(D,Q,E)+geomComputeTriangleArea(D,E,P);
  const Real h=face_area*f(S);
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
    
  if (option_debug_trial)
    info()<<"\33[36m[alephRhsTrialInner] Aleph RHS Trial Inner face "<<nid0<<"->"<<nid1<<"\33[m";
  ℵ rhs addValue(face_θ,this, h);
}


own outer faces void alephRhsTrialOuterGeneric(void) @ 13.1 if (option_trial && option_indirect){
  const Real3 D=coord[0];
  const Real3 E=coord[1];
  const Real3 S=½*(D+E);
  const Real h=g(S);
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
    
  if (option_debug_trial)
    info()<<"\33[36m[alephRhsTrialOuter] Aleph RHS Trial Outer face "<<nid0<<"->"<<nid1<<"\33[m";
  ℵ rhs addValue(face_θ,this, h);
 }




// ****************************************************************************
// * Remplissage matriciel, coté Trial
// ****************************************************************************
inner faces void innerFacesOutsideGeneric(void){// @ 16.4 if (option_trial && option_indirect){
/*  const Real svalue =
     interior_dual_non_convex_s[0]
    +interior_dual_non_convex_s[1]
    +interior_dual_non_convex_s[2]
    +interior_dual_non_convex_s[3];
  const Real q0value = interior_dual_non_convex_q[0];
  const Real e0value = interior_dual_non_convex_e[0];
  const Real q1value = interior_dual_non_convex_q[1];
  const Real e1value = interior_dual_non_convex_e[1];
  const Real q2value = interior_dual_non_convex_q[2];
  const Real e2value = interior_dual_non_convex_e[2];
  const Real q3value = interior_dual_non_convex_q[3];
  const Real e3value = interior_dual_non_convex_e[3];
  const Integer nid0 = 1+node(0)->uniqueId().asInteger();
  const Integer nid1 = 1+node(1)->uniqueId().asInteger();
  
  
  if (option_debug_trial)
    info()<<"\t\t\t\33[36m[innerFacesOutside] Aleph Matrix Trial filling face "
          <<nid0<<"->"<<nid1<<"\33[m";
  
  ℵ matrix addValue(face_θ,this, face_θ,this, +svalue);
  
  // Quart QE
  ℵ matrix addValue(face_θ,this, cell_θ,frontCell, -q0value);
  ℵ matrix addValue(face_θ,this, node_θ,node(1),   -e0value);
  
  // Quart DQ
  ℵ matrix addValue(face_θ,this, node_θ,node(0),   -q1value);
  ℵ matrix addValue(face_θ,this, cell_θ,frontCell, -e1value);
  
  // Quart PD
  ℵ matrix addValue(face_θ,this, cell_θ,backCell, -q2value);
  ℵ matrix addValue(face_θ,this, node_θ,node(0),  -e2value);
  
  // Quart EP
  ℵ matrix addValue(face_θ,this, node_θ,node(1),  -q3value);
  ℵ matrix addValue(face_θ,this, cell_θ,backCell, -e3value);
  //fatal("\33[31mUnknown QUARTER in innerFacesOutside!\33[m");
  */}


// ****************************************************************************
// * Conditions de Dirichlet
// ****************************************************************************
own outer faces void dirichletFacesGeneric(void){// @ 17.0 if (option_trial && option_indirect){
  ℵ matrix addValue(face_θ,this, face_θ,this, +1.0);
}


// ****************************************************************************
// * Récupération des résultats, coté Trial
// ****************************************************************************
own faces void getFacesResultsGeneric(void){//  @ 20.0 if (option_trial && option_indirect){
  Real face_θ_kp1;
  face_θ_kp1=ℵ lhs getValue(face_θ,this);
  if (face_θ_kp1<0.0)
    info()<<"\t\33[33m[getFaceResults] face_theta="<< face_θ_kp1 <<"\33[m";
  assert(face_θ_kp1>=0.0);
  if (GlobalIteration==1.0) face_θ_1m0=face_θ_kp1mk;
  face_θ_kp1mk=fabs(face_θ_kp1-face_θ);
  face_θ=face_θ_kp1;
 }

