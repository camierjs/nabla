///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// ****************************************************************************
// * Initialisation de la partie Algèbre Linéaire
// ****************************************************************************

void rhsInit(void) @ 10.0{
  alephInitialize();
  ℵ rhs reset;
  ℵ lhs reset;
}


// ****************************************************************************
// * RHS, coté Primal
// ****************************************************************************
∀ own cells void setRhsCellValues(void) @ 11.0{
  const Real value=cell_area*f(cell_mass_center);
  if (option_hole) assert(value>=0.0);
  ℵ rhs addValue(cell_θ,this, value);
}

∀ own outer faces void setRhs𝜕ΩCellValues(void) @ 11.0{
  const Real value=boundary_primal_d_sp;
  if (!cell(0).isOwn()) continue;
  assert(value>=0.0);
  ℵ rhs addValue(cell_θ,cell(0), value);
}


// ****************************************************************************
// * RHS, coté Dual
// ****************************************************************************
/*nodes ℝ nAreaMeanF(ℝ mean_f){
  //const ℝ³ coords = coord;
  foreach cell
    mean_f+=f(cell_mass_center)*cell_area/nbNode;
  return mean_f;
  }*/
∀ own nodes void setRhsAllNodeValues(void) @ 11.0{
  //option_gao_wu
  Real h=node_is_on_𝜕Ω?g(coord):
    option_gao_wu?
    node_area*node_f_area:
    node_area*f(coord);
  if (option_hole) assert(h>=0.0);
  ℵ rhs addValue(node_θ,this, h);
}


// ****************************************************************************
// * Remplissage MATRICE, coté Primal
// ****************************************************************************

// Diagonale outer: Ss𝞊𝜕Pp et 𝜕Ω
∀ outer faces void alephOuterCells(void) @ 12.0{
  const Real value = boundary_primal_c_sp;
  if (!cell(0).isOwn()) continue;
  assert(value>0.0);
  ℵ matrix addValue(cell_θ,cell(0), cell_θ,cell(0), value);
}


// ****************************************************************************
// Diag+extra inner: Ss𝞊𝜕Pp sans 𝜕Ω
// ****************************************************************************
∀ inner faces void alephInnerCells(void) @ 12.0{
  const Real pvalue = interior_primal_c_sp;
  const Real qvalue = interior_primal_c_sq;
  // On laisse le >= vs > pour les cas où les bords sont à 0.0
  assert(pvalue>=0.0 && qvalue>=0.0);
  if (backCell.isOwn()){
    ℵ matrix addValue(cell_θ,backCell, cell_θ,backCell,  +pvalue);
    ℵ matrix addValue(cell_θ,backCell, cell_θ,frontCell, -qvalue);
  }
  if (frontCell.isOwn()){
    ℵ matrix addValue(cell_θ,frontCell, cell_θ,frontCell, +qvalue);
    ℵ matrix addValue(cell_θ,frontCell, cell_θ,backCell,  -pvalue);
  }
}


// ****************************************************************************
// * On reboucle pour trouver la bonne face 'tournée'
// ****************************************************************************
Face loopOnThisNodeToFindPositiveDualFaceCells(Node nd,
                                               int face_uid,
                                               Bool swap,
                                               Cell *back, Cell *front){
  foreach nd face{
    if (face_uid!=fnd->uniqueId()) continue;
    *back=swap?fnd->backCell():fnd->frontCell();
    *front=swap?fnd->frontCell():fnd->backCell();
    return *fnd;
  }
  fatal("loopOnThisNodeToFindPositiveDualFaceCells");
}


// ****************************************************************************
// * Conditions de Dirichlet
// ****************************************************************************
∀ own outer nodes void dirichletNodes(void) @ 17.0{
  ℵ matrix addValue(node_θ,this, node_θ,this, +1.0);
}

// ****************************************************************************
// * Aleph Solve
// ****************************************************************************
void assembleAndSolve(void) @ 18.0{ ℵ solve; }


// ****************************************************************************
// * Récupération des résultats
// ****************************************************************************
∀ own cells void getCellResults(void) @ 20.0{
  const Real cell_θ_kp1=ℵ lhs getValue(cell_θ,this);
  assert(cell_θ_kp1>=0.0);
  cell_θ_kp1mk=fabs(cell_θ_kp1-cell_θ);
  if (GlobalIteration==1.0) cell_θ_1m0=cell_θ_kp1mk;
  cell_θ=cell_θ_kp1;
}
∀ own nodes void getNodeResults(void) @ 20.0{
  const Real node_θ_kp1=ℵ lhs getValue(node_θ,this);
  if (node_θ_kp1<0.0)
    info()<<"\t\33[33m[getNodeResults] node_theta="<< node_θ_kp1 <<"\33[m";
  assert(node_θ_kp1>=0.0);
  if (GlobalIteration==1.0) node_θ_1m0=node_θ_kp1mk;
  node_θ_kp1mk=fabs(node_θ_kp1-node_θ);
  node_θ=node_θ_kp1;
}

// ****************************************************************************
// * Récupération & Critère de sortie des itérations de Picard
// ****************************************************************************
//own cells Real maxCellError(Real mx){  mx=max(mx,cell_θ_kp1mk); return mx;}
//own cells Real maxCellError0(Real mx){ mx=max(mx,cell_θ_1m0); return mx;}
//own nodes Real maxNodeError(Real mx){  mx=max(mx,node_θ_kp1mk); return mx;}
//own nodes Real maxNodeError0(Real mx){ mx=max(mx,node_θ_1m0); return mx;}

∀ /*own*/ cells min_θ_kp1mk >?= cell_θ_kp1mk @ 29.9;
∀ /*own*/ cells min_θ_1m0 >?= cell_θ_1m0 @ 29.9;

//∀ own nodes θ_kp1mk >?= node_θ_kp1mk @ 29.99;
//∀ own nodes θ_1m0 >?= node_θ_1m0 @ 29.99;

void stopIterations(void) @ 30.0{
  #warning HACK 0.0 to stopIterations
  const Real mxε = 1.0e-15;//min_θ_kp1mk;//mpi_reduce(ReduceMax, max(maxCellError(0.0), maxNodeError(0.0)));
  const Real mx0 = 1.0;//min_θ_kp1mk;//θ_1m0;//mpi_reduce(ReduceMax, max(maxCellError0(0.0), maxNodeError0(0.0)));
  assert(mx0!=0.0);
  if (GlobalIteration>1.0 && mxε<(option_picard_ε*mx0)){
    info()<<"\t\33[7m[stopIterations] mxε="<<mxε<<"\33[m";
    if (option_dag) dagIt();
    if (option_quit_when_finish) exit;
    //assert(fabs(eh2-0.000715252152895967)<10.0*__DBL_EPSILON__);
  }
  info()<<"\t[stopIterations] Picard @ "<<mxε;
  debug()<<"\t[stopIterations] mx0="<<mx0;
}
