///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// ****************************************************************************
// * Remplissage matriciel, cot√© Dual Direct
// ****************************************************************************
‚àÄ inner faces void dDualMtx(void) @ 16.0 if (!option_indirect){
  const Real pvalue = interior_dual_c_sd;
  const Real qvalue = interior_dual_c_se;

  // Cas o√π on a pas trouv√© de tail ou de head
  if (interior_dual_c_jk || interior_dual_c_lm) continue;
  
  assert(pvalue>=0.0 && qvalue>=0.0);
  
  if (node_is_on_ùúïŒ©[0] && node_is_on_ùúïŒ©[1]) continue;
  
  if (node(0).isOwn() && !node_is_on_ùúïŒ©[0]){
    ‚Ñµ matrix addValue(node_Œ∏,node(0), node_Œ∏,node(0), +pvalue);
    ‚Ñµ matrix addValue(node_Œ∏,node(0), node_Œ∏,node(1), -qvalue);
  }
  if (node(1).isOwn() && !node_is_on_ùúïŒ©[1]){
    ‚Ñµ matrix addValue(node_Œ∏,node(1), node_Œ∏,node(1), +qvalue);
    ‚Ñµ matrix addValue(node_Œ∏,node(1), node_Œ∏,node(0), -pvalue);
  }
}


// ********************************************************
// Ici, c'est okHead et D=node[0] qui est on_ùúïŒ©, Œº=0
// On peut tester ce cas avec l'analytique
// et k=10000, Œ∏=œÄ/6, en regardant la convergence
// et d√©brayant les asserts du second membre
// et en mettant √† 1.0 le bord et l'init
// ********************************************************
‚àÄ inner faces void dDualMtxLM(void) @ 16.1 if (!option_indirect){
  Cell back,front;
  const Real evalue = interior_dual_c_se;
  const Real lvalue = interior_dual_c_sl;
  const Real mvalue = interior_dual_c_sm;
  if (node_is_on_ùúïŒ©[1]) continue;
  if (!node(1).isOwn()) continue;
  if (!interior_dual_c_lm) continue;
  loopOnThisNodeToFindPositiveDualFaceCells(node(1),
                                            interior_dual_face_uid,
                                            interior_dual_face_swap,
                                            &back, &front);
  if (option_debug_dual)
    info()<<"\t\t\33[7m[deltaInnerCellsLM] Now doing LM face: "
          <<1+node(0)->uniqueId().asInteger()<<"->"
          <<1+node(1)->uniqueId().asInteger()
          <<", looking for speciale face:"<<interior_dual_face_uid<<"\33[m";
  assert(evalue>0.0 && lvalue>0.0 &&mvalue>0.0);
  ‚Ñµ matrix addValue(node_Œ∏,node(1), node_Œ∏,node(1), +evalue);
  ‚Ñµ matrix addValue(node_Œ∏,node(1), cell_Œ∏,back, -lvalue);
  ‚Ñµ matrix addValue(node_Œ∏,node(1), cell_Œ∏,front, -mvalue);
}


// ********************************************************
// Ici, c'est okTail et E=node[1] qui est on_ùúïŒ©, Œº=1.0
// Cette fonction 'hit' moins que celle du dessus du fait
// de la num√©rotation de Magix des faces depuis les outer nodes
// qui sont orient√©s vers l'int√©rieur
// ********************************************************
‚àÄ inner faces void dDualMtxJK(void) @ 16.2 if (!option_indirect){
  Cell back,front;
  const Real dvalue = interior_dual_c_sd;
  const Real jvalue = interior_dual_c_sj;
  const Real kvalue = interior_dual_c_sk;
  if (node_is_on_ùúïŒ©[0]) continue;
  if (!node(0).isOwn()) continue;
  if (!interior_dual_c_jk) continue;
  if (option_debug_dual)
    info()<<"\t\t\33[7m[deltaInnerCells] Now doing JK face: "
          <<1+node(0)->uniqueId().asInteger()<<"->"
          <<1+node(1)->uniqueId().asInteger()
          <<", looking for speciale face:"<<interior_dual_face_uid<<"\33[m";
  loopOnThisNodeToFindPositiveDualFaceCells(node(0),
                                            interior_dual_face_uid,
                                            interior_dual_face_swap,
                                            &back, &front);
  assert(dvalue>0.0 && kvalue>0.0 && jvalue>0.0);
  ‚Ñµ matrix addValue(node_Œ∏,node(0), node_Œ∏,node(0), +dvalue);
  ‚Ñµ matrix addValue(node_Œ∏,node(0), cell_Œ∏,back, -jvalue);
  ‚Ñµ matrix addValue(node_Œ∏,node(0), cell_Œ∏,front, -kvalue);
}

