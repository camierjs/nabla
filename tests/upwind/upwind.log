[nabla] Command line specifies debug file: upwind.log
[nabla] Command line hits long option okina
[nabla] Command line specifies new OKINA nabla_entity_name: upwind
[nabla] Command line specifies OKINA's STD option
[nabla] Command line specifies OKINA's SEQ option
[nabla] first input_file_list: upwind.n 
[nabla] next input_file_list: upwind.n analytics.n 
[sysPreprocessor] cat_sed_temporary_file_name is /tmp/nabla_upwind_sed_qoPGcW

[sysPreprocessor] cat_command is echo '# 1 "upwind.n"' > /tmp/nabla_upwind_sed_qoPGcW && cat upwind.n|sed -e 's/#include/ include/g'>> /tmp/nabla_upwind_sed_qoPGcW

[sysPreprocessor] cat_command is echo '# 1 "upwind.n"' > /tmp/nabla_upwind_sed_qoPGcW && cat upwind.n|sed -e 's/#include/ include/g'>> /tmp/nabla_upwind_sed_qoPGcW && echo '# 1 "analytics.n"' >> /tmp/nabla_upwind_sed_qoPGcW && cat analytics.n|sed -e 's/#include/ include/g'>> /tmp/nabla_upwind_sed_qoPGcW
[sysPreprocessor] gcc_command=gcc -ffreestanding -std=c99 -C -E -Wall -x c /tmp/nabla_upwind_sed_qoPGcW>/proc/32042/fd/4
[nablaPreprocessor] done!
[nabla] Now triggering nablaParsing with these options
[nablaParsing] Starting parsing
[nablaParsing] Closing & Quit
[nablaParsing] On scan l'arbre pour transformer les tokens en UTF8
[nUtf8] '# 1 "/tmp/nabla_upwind_sed_qoPGcW"'
			#, 0x23 0x2023
			 , 0x20 0x3120
			1, 0x31 0x2031
			 , 0x20 0x2220
			", 0x22 0x2f22
			/, 0x2f 0x742f
			t, 0x74 0x6d74
			m, 0x6d 0x706d
			p, 0x70 0x2f70
			/, 0x2f 0x6e2f
			n, 0x6e 0x616e
			a, 0x61 0x6261
			b, 0x62 0x6c62
			l, 0x6c 0x616c
			a, 0x61 0x5f61
			_, 0x5f 0x755f
			u, 0x75 0x7075
			p, 0x70 0x7770
			w, 0x77 0x6977
			i, 0x69 0x6e69
			n, 0x6e 0x646e
			d, 0x64 0x5f64
			_, 0x5f 0x735f
			s, 0x73 0x6573
			e, 0x65 0x6465
			d, 0x64 0x5f64
			_, 0x5f 0x715f
			q, 0x71 0x6f71
			o, 0x6f 0x506f
			P, 0x50 0x4750
			G, 0x47 0x6347
			c, 0x63 0x5763
			W, 0x57 0x2257
			", 0x22 0x22
[nUtf8] '# 1 "<built-in>"'
			#, 0x23 0x2023
			 , 0x20 0x3120
			1, 0x31 0x2031
			 , 0x20 0x2220
			", 0x22 0x3c22
			<, 0x3c 0x623c
			b, 0x62 0x7562
			u, 0x75 0x6975
			i, 0x69 0x6c69
			l, 0x6c 0x746c
			t, 0x74 0x2d74
			-, 0x2d 0x692d
			i, 0x69 0x6e69
			n, 0x6e 0x3e6e
			>, 0x3e 0x223e
			", 0x22 0x22
[nUtf8] '# 1 "<command-line>"'
			#, 0x23 0x2023
			 , 0x20 0x3120
			1, 0x31 0x2031
			 , 0x20 0x2220
			", 0x22 0x3c22
			<, 0x3c 0x633c
			c, 0x63 0x6f63
			o, 0x6f 0x6d6f
			m, 0x6d 0x6d6d
			m, 0x6d 0x616d
			a, 0x61 0x6e61
			n, 0x6e 0x646e
			d, 0x64 0x2d64
			-, 0x2d 0x6c2d
			l, 0x6c 0x696c
			i, 0x69 0x6e69
			n, 0x6e 0x656e
			e, 0x65 0x3e65
			>, 0x3e 0x223e
			", 0x22 0x22
[nUtf8] '# 1 "/tmp/nabla_upwind_sed_qoPGcW"'
			#, 0x23 0x2023
			 , 0x20 0x3120
			1, 0x31 0x2031
			 , 0x20 0x2220
			", 0x22 0x2f22
			/, 0x2f 0x742f
			t, 0x74 0x6d74
			m, 0x6d 0x706d
			p, 0x70 0x2f70
			/, 0x2f 0x6e2f
			n, 0x6e 0x616e
			a, 0x61 0x6261
			b, 0x62 0x6c62
			l, 0x6c 0x616c
			a, 0x61 0x5f61
			_, 0x5f 0x755f
			u, 0x75 0x7075
			p, 0x70 0x7770
			w, 0x77 0x6977
			i, 0x69 0x6e69
			n, 0x6e 0x646e
			d, 0x64 0x5f64
			_, 0x5f 0x735f
			s, 0x73 0x6573
			e, 0x65 0x6465
			d, 0x64 0x5f64
			_, 0x5f 0x715f
			q, 0x71 0x6f71
			o, 0x6f 0x506f
			P, 0x50 0x4750
			G, 0x47 0x6347
			c, 0x63 0x5763
			W, 0x57 0x2257
			", 0x22 0x22
[nUtf8] '# 1 "upwind.n"'
			#, 0x23 0x2023
			 , 0x20 0x3120
			1, 0x31 0x2031
			 , 0x20 0x2220
			", 0x22 0x7522
			u, 0x75 0x7075
			p, 0x70 0x7770
			w, 0x77 0x6977
			i, 0x69 0x6e69
			n, 0x6e 0x646e
			d, 0x64 0x2e64
			., 0x2e 0x6e2e
			n, 0x6e 0x226e
			", 0x22 0x22
[nUtf8] 'with'
			w, 0x77 0x6977
			i, 0x69 0x7469
			t, 0x74 0x6874
			h, 0x68 0x68
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'options'
			o, 0x6f 0x706f
			p, 0x70 0x7470
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x736e
			s, 0x73 0x73
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'option_a'
			o, 0x6f 0x706f
			p, 0x70 0x7470
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x615f
			a, 0x61 0x61
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '1.0'
			1, 0x31 0x2e31
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'Œ±'
			Œ, 0xffffffce 0xb1ce
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '1.0'
			1, 0x31 0x2e31
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'Œ≤'
			Œ, 0xffffffce 0xb2ce
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '8.0'
			8, 0x38 0x2e38
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'xmin'
			x, 0x78 0x6d78
			m, 0x6d 0x696d
			i, 0x69 0x6e69
			n, 0x6e 0x6e
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '-'
			-, 0x2d 0x2d
[nUtf8] '1.0'
			1, 0x31 0x2e31
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'xmax'
			x, 0x78 0x6d78
			m, 0x6d 0x616d
			a, 0x61 0x7861
			x, 0x78 0x78
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '+'
			+, 0x2b 0x2b
[nUtf8] '1.0'
			1, 0x31 0x2e31
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'CFL'
			C, 0x43 0x4643
			F, 0x46 0x4c46
			L, 0x4c 0x4c
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '0.8'
			0, 0x30 0x2e30
			., 0x2e 0x382e
			8, 0x38 0x38
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñï'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'test'
			t, 0x74 0x6574
			e, 0x65 0x7365
			s, 0x73 0x7473
			t, 0x74 0x74
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '1'
			1, 0x31 0x31
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñï'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'time_steps'
			t, 0x74 0x6974
			i, 0x69 0x6d69
			m, 0x6d 0x656d
			e, 0x65 0x5f65
			_, 0x5f 0x735f
			s, 0x73 0x7473
			t, 0x74 0x6574
			e, 0x65 0x7065
			p, 0x70 0x7370
			s, 0x73 0x73
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '8'
			8, 0x38 0x38
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'option_Œ¥t_initial'
			o, 0x6f 0x706f
			p, 0x70 0x7470
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0xce5f
			Œ, 0xffffffce 0xb4ce
			t, 0x74 0x5f74
			_, 0x5f 0x695f
			i, 0x69 0x6e69
			n, 0x6e 0x696e
			i, 0x69 0x7469
			t, 0x74 0x6974
			i, 0x69 0x6169
			a, 0x61 0x6c61
			l, 0x6c 0x6c
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '0.0'
			0, 0x30 0x2e30
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'option_stoptime'
			o, 0x6f 0x706f
			p, 0x70 0x7470
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x735f
			s, 0x73 0x7473
			t, 0x74 0x6f74
			o, 0x6f 0x706f
			p, 0x70 0x7470
			t, 0x74 0x6974
			i, 0x69 0x6d69
			m, 0x6d 0x656d
			e, 0x65 0x65
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '1.0'
			1, 0x31 0x2e31
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'nodes'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x7365
			s, 0x73 0x73
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'unp1'
			u, 0x75 0x6e75
			n, 0x6e 0x706e
			p, 0x70 0x3170
			1, 0x31 0x31
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'Œ¥xp'
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x7078
			p, 0x70 0x70
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'Œ¥xm'
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x6d78
			m, 0x6d 0x6d
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'global'
			g, 0x67 0x6c67
			l, 0x6c 0x6f6c
			o, 0x6f 0x626f
			b, 0x62 0x6162
			a, 0x61 0x6c61
			l, 0x6c 0x6c
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'Œ¥x'
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x78
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] 'iniGlobals'
			i, 0x69 0x6e69
			n, 0x6e 0x696e
			i, 0x69 0x4769
			G, 0x47 0x6c47
			l, 0x6c 0x6f6c
			o, 0x6f 0x626f
			b, 0x62 0x6162
			a, 0x61 0x6c61
			l, 0x6c 0x736c
			s, 0x73 0x73
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '@'
			@, 0x40 0x40
[nUtf8] ' ( '
			 , 0x20 0x2820
			(, 0x28 0x2028
			 , 0x20 0x20
[nUtf8] '-'
			-, 0x2d 0x2d
[nUtf8] '5.0'
			5, 0x35 0x2e35
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ' ) '
			 , 0x20 0x2920
			), 0x29 0x2029
			 , 0x20 0x20
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'Œ¥x'
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x78
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opDiv'
			o, 0x6f 0x706f
			p, 0x70 0x4470
			D, 0x44 0x6944
			i, 0x69 0x7669
			v, 0x76 0x76
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'opSub'
			o, 0x6f 0x706f
			p, 0x70 0x5370
			S, 0x53 0x7553
			u, 0x75 0x6275
			b, 0x62 0x62
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'xmax'
			x, 0x78 0x6d78
			m, 0x6d 0x616d
			a, 0x61 0x7861
			x, 0x78 0x78
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'xmin'
			x, 0x78 0x6d78
			m, 0x6d 0x696d
			i, 0x69 0x6e69
			n, 0x6e 0x6e
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] '8'
			8, 0x38 0x38
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'Œ¥t'
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opDiv'
			o, 0x6f 0x706f
			p, 0x70 0x4470
			D, 0x44 0x6944
			i, 0x69 0x7669
			v, 0x76 0x76
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'opMul'
			o, 0x6f 0x706f
			p, 0x70 0x4d70
			M, 0x4d 0x754d
			u, 0x75 0x6c75
			l, 0x6c 0x6c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'CFL'
			C, 0x43 0x4643
			F, 0x46 0x4c46
			L, 0x4c 0x4c
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'Œ¥x'
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x78
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'option_a'
			o, 0x6f 0x706f
			p, 0x70 0x7470
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x615f
			a, 0x61 0x61
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '/*call*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x632a
			c, 0x63 0x6163
			a, 0x61 0x6c61
			l, 0x6c 0x6c6c
			l, 0x6c 0x2a6c
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] 'assert'
			a, 0x61 0x7361
			s, 0x73 0x7373
			s, 0x73 0x6573
			e, 0x65 0x7265
			r, 0x72 0x7472
			t, 0x74 0x74
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'Œ¥t'
[nUtf8] '>='
			>, 0x3e 0x3d3e
			=, 0x3d 0x3d
[nUtf8] '0.0'
			0, 0x30 0x2e30
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] '/*args*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x612a
			a, 0x61 0x7261
			r, 0x72 0x6772
			g, 0x67 0x7367
			s, 0x73 0x2a73
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] '‚àÄ'
			‚, 0xffffffe2 0x88e2
			à, 0xffffff88 0x8088
			Ä, 0xffffff80 0x80
[nUtf8] 'nodes'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x7365
			s, 0x73 0x73
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] 'iniŒ¥x'
			i, 0x69 0x6e69
			n, 0x6e 0x696e
			i, 0x69 0xce69
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x78
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '@'
			@, 0x40 0x40
[nUtf8] ' ( '
			 , 0x20 0x2820
			(, 0x28 0x2028
			 , 0x20 0x20
[nUtf8] '-'
			-, 0x2d 0x2d
[nUtf8] '5.0'
			5, 0x35 0x2e35
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ' ) '
			 , 0x20 0x2920
			), 0x29 0x2029
			 , 0x20 0x20
[nUtf8] 'COMPOUND_JOB_INI'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x495f
			I, 0x49 0x4e49
			N, 0x4e 0x494e
			I, 0x49 0x49
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'if'
			i, 0x69 0x6669
			f, 0x66 0x66
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] '!='
			!, 0x21 0x3d21
			=, 0x3d 0x3d
[nUtf8] 'xmin'
			x, 0x78 0x6d78
			m, 0x6d 0x696d
			i, 0x69 0x6e69
			n, 0x6e 0x6e
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'Œ¥xm'
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x6d78
			m, 0x6d 0x6d
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opSub'
			o, 0x6f 0x706f
			p, 0x70 0x5370
			S, 0x53 0x7553
			u, 0x75 0x6275
			b, 0x62 0x62
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] '['
			[, 0x5b 0x5b
[nUtf8] '-'
			-, 0x2d 0x2d
[nUtf8] '1'
			1, 0x31 0x31
[nUtf8] ']'
			], 0x5d 0x5d
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'if'
			i, 0x69 0x6669
			f, 0x66 0x66
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] '!='
			!, 0x21 0x3d21
			=, 0x3d 0x3d
[nUtf8] 'xmax'
			x, 0x78 0x6d78
			m, 0x6d 0x616d
			a, 0x61 0x7861
			x, 0x78 0x78
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'Œ¥xp'
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x7078
			p, 0x70 0x70
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opSub'
			o, 0x6f 0x706f
			p, 0x70 0x5370
			S, 0x53 0x7553
			u, 0x75 0x6275
			b, 0x62 0x62
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] '['
			[, 0x5b 0x5b
[nUtf8] '+'
			+, 0x2b 0x2b
[nUtf8] '1'
			1, 0x31 0x31
[nUtf8] ']'
			], 0x5d 0x5d
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] 'COMPOUND_JOB_END'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x455f
			E, 0x45 0x4e45
			N, 0x4e 0x444e
			D, 0x44 0x44
[nUtf8] '‚àÄ'
			‚, 0xffffffe2 0x88e2
			à, 0xffffff88 0x8088
			Ä, 0xffffff80 0x80
[nUtf8] 'nodes'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x7365
			s, 0x73 0x73
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] 'ini'
			i, 0x69 0x6e69
			n, 0x6e 0x696e
			i, 0x69 0x69
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'in'
			i, 0x69 0x6e69
			n, 0x6e 0x6e
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'node'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x65
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'node'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x65
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '@'
			@, 0x40 0x40
[nUtf8] ' ( '
			 , 0x20 0x2820
			(, 0x28 0x2028
			 , 0x20 0x20
[nUtf8] '-'
			-, 0x2d 0x2d
[nUtf8] '4.0'
			4, 0x34 0x2e34
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ' ) '
			 , 0x20 0x2920
			), 0x29 0x2029
			 , 0x20 0x20
[nUtf8] 'COMPOUND_JOB_INI'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x495f
			I, 0x49 0x4e49
			N, 0x4e 0x494e
			I, 0x49 0x49
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '0.0'
			0, 0x30 0x2e30
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opTernary'
			o, 0x6f 0x706f
			p, 0x70 0x5470
			T, 0x54 0x6554
			e, 0x65 0x7265
			r, 0x72 0x6e72
			n, 0x6e 0x616e
			a, 0x61 0x7261
			r, 0x72 0x7972
			y, 0x79 0x79
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'test'
			t, 0x74 0x6574
			e, 0x65 0x7365
			s, 0x73 0x7473
			t, 0x74 0x74
[nUtf8] '=='
			=, 0x3d 0x3d3d
			=, 0x3d 0x3d
[nUtf8] '1'
			1, 0x31 0x31
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] '/*call*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x632a
			c, 0x63 0x6163
			a, 0x61 0x6c61
			l, 0x6c 0x6c6c
			l, 0x6c 0x2a6c
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] 'u0_Test1_for_linear_advection_smooth_data'
			u, 0x75 0x3075
			0, 0x30 0x5f30
			_, 0x5f 0x545f
			T, 0x54 0x6554
			e, 0x65 0x7365
			s, 0x73 0x7473
			t, 0x74 0x3174
			1, 0x31 0x5f31
			_, 0x5f 0x665f
			f, 0x66 0x6f66
			o, 0x6f 0x726f
			r, 0x72 0x5f72
			_, 0x5f 0x6c5f
			l, 0x6c 0x696c
			i, 0x69 0x6e69
			n, 0x6e 0x656e
			e, 0x65 0x6165
			a, 0x61 0x7261
			r, 0x72 0x5f72
			_, 0x5f 0x615f
			a, 0x61 0x6461
			d, 0x64 0x7664
			v, 0x76 0x6576
			e, 0x65 0x6365
			c, 0x63 0x7463
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x735f
			s, 0x73 0x6d73
			m, 0x6d 0x6f6d
			o, 0x6f 0x6f6f
			o, 0x6f 0x746f
			t, 0x74 0x6874
			h, 0x68 0x5f68
			_, 0x5f 0x645f
			d, 0x64 0x6164
			a, 0x61 0x7461
			t, 0x74 0x6174
			a, 0x61 0x61
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] '/*args*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x612a
			a, 0x61 0x7261
			r, 0x72 0x6772
			g, 0x67 0x7367
			s, 0x73 0x2a73
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opTernary'
			o, 0x6f 0x706f
			p, 0x70 0x5470
			T, 0x54 0x6554
			e, 0x65 0x7265
			r, 0x72 0x6e72
			n, 0x6e 0x616e
			a, 0x61 0x7261
			r, 0x72 0x7972
			y, 0x79 0x79
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'test'
			t, 0x74 0x6574
			e, 0x65 0x7365
			s, 0x73 0x7473
			t, 0x74 0x74
[nUtf8] '=='
			=, 0x3d 0x3d3d
			=, 0x3d 0x3d
[nUtf8] '2'
			2, 0x32 0x32
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] '/*call*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x632a
			c, 0x63 0x6163
			a, 0x61 0x6c61
			l, 0x6c 0x6c6c
			l, 0x6c 0x2a6c
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] 'u0_Test2_for_linear_advection_discontinuous_data'
			u, 0x75 0x3075
			0, 0x30 0x5f30
			_, 0x5f 0x545f
			T, 0x54 0x6554
			e, 0x65 0x7365
			s, 0x73 0x7473
			t, 0x74 0x3274
			2, 0x32 0x5f32
			_, 0x5f 0x665f
			f, 0x66 0x6f66
			o, 0x6f 0x726f
			r, 0x72 0x5f72
			_, 0x5f 0x6c5f
			l, 0x6c 0x696c
			i, 0x69 0x6e69
			n, 0x6e 0x656e
			e, 0x65 0x6165
			a, 0x61 0x7261
			r, 0x72 0x5f72
			_, 0x5f 0x615f
			a, 0x61 0x6461
			d, 0x64 0x7664
			v, 0x76 0x6576
			e, 0x65 0x6365
			c, 0x63 0x7463
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x645f
			d, 0x64 0x6964
			i, 0x69 0x7369
			s, 0x73 0x6373
			c, 0x63 0x6f63
			o, 0x6f 0x6e6f
			n, 0x6e 0x746e
			t, 0x74 0x6974
			i, 0x69 0x6e69
			n, 0x6e 0x756e
			u, 0x75 0x6f75
			o, 0x6f 0x756f
			u, 0x75 0x7375
			s, 0x73 0x5f73
			_, 0x5f 0x645f
			d, 0x64 0x6164
			a, 0x61 0x7461
			t, 0x74 0x6174
			a, 0x61 0x61
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] '/*args*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x612a
			a, 0x61 0x7261
			r, 0x72 0x6772
			g, 0x67 0x7367
			s, 0x73 0x2a73
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] 'COMPOUND_JOB_END'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x455f
			E, 0x45 0x4e45
			N, 0x4e 0x444e
			D, 0x44 0x44
[nUtf8] '‚àÄ'
			‚, 0xffffffe2 0x88e2
			à, 0xffffff88 0x8088
			Ä, 0xffffff80 0x80
[nUtf8] 'nodes'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x7365
			s, 0x73 0x73
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] 'loop'
			l, 0x6c 0x6f6c
			o, 0x6f 0x6f6f
			o, 0x6f 0x706f
			p, 0x70 0x70
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'in'
			i, 0x69 0x6e69
			n, 0x6e 0x6e
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'node'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x65
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '@'
			@, 0x40 0x40
[nUtf8] ' ( '
			 , 0x20 0x2820
			(, 0x28 0x2028
			 , 0x20 0x20
[nUtf8] '1.0'
			1, 0x31 0x2e31
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ' ) '
			 , 0x20 0x2920
			), 0x29 0x2029
			 , 0x20 0x20
[nUtf8] 'COMPOUND_JOB_INI'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x495f
			I, 0x49 0x4e49
			N, 0x4e 0x494e
			I, 0x49 0x49
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'const'
			c, 0x63 0x6f63
			o, 0x6f 0x6e6f
			n, 0x6e 0x736e
			s, 0x73 0x7473
			t, 0x74 0x74
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'ap'
			a, 0x61 0x7061
			p, 0x70 0x70
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '/*call*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x632a
			c, 0x63 0x6163
			a, 0x61 0x6c61
			l, 0x6c 0x6c6c
			l, 0x6c 0x2a6c
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] 'fmax'
			f, 0x66 0x6d66
			m, 0x6d 0x616d
			a, 0x61 0x7861
			x, 0x78 0x78
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'option_a'
			o, 0x6f 0x706f
			p, 0x70 0x7470
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x615f
			a, 0x61 0x61
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] '0.0'
			0, 0x30 0x2e30
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] '/*args*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x612a
			a, 0x61 0x7261
			r, 0x72 0x6772
			g, 0x67 0x7367
			s, 0x73 0x2a73
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'const'
			c, 0x63 0x6f63
			o, 0x6f 0x6e6f
			n, 0x6e 0x736e
			s, 0x73 0x7473
			t, 0x74 0x74
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'am'
			a, 0x61 0x6d61
			m, 0x6d 0x6d
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] '/*call*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x632a
			c, 0x63 0x6163
			a, 0x61 0x6c61
			l, 0x6c 0x6c6c
			l, 0x6c 0x2a6c
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] 'fmin'
			f, 0x66 0x6d66
			m, 0x6d 0x696d
			i, 0x69 0x6e69
			n, 0x6e 0x6e
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'option_a'
			o, 0x6f 0x706f
			p, 0x70 0x7470
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x615f
			a, 0x61 0x61
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] '0.0'
			0, 0x30 0x2e30
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] '/*args*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x612a
			a, 0x61 0x7261
			r, 0x72 0x6772
			g, 0x67 0x7367
			s, 0x73 0x2a73
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'const'
			c, 0x63 0x6f63
			o, 0x6f 0x6e6f
			n, 0x6e 0x736e
			s, 0x73 0x7473
			t, 0x74 0x74
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'Œ¥tSx'
			Œ, 0xffffffce 0xb4ce
			t, 0x74 0x5374
			S, 0x53 0x7853
			x, 0x78 0x78
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opDiv'
			o, 0x6f 0x706f
			p, 0x70 0x4470
			D, 0x44 0x6944
			i, 0x69 0x7669
			v, 0x76 0x76
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'Œ¥t'
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'Œ¥x'
			Œ, 0xffffffce 0xb4ce
			x, 0x78 0x78
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'const'
			c, 0x63 0x6f63
			o, 0x6f 0x6e6f
			n, 0x6e 0x736e
			s, 0x73 0x7473
			t, 0x74 0x74
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'cp'
			c, 0x63 0x7063
			p, 0x70 0x70
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opMul'
			o, 0x6f 0x706f
			p, 0x70 0x4d70
			M, 0x4d 0x754d
			u, 0x75 0x6c75
			l, 0x6c 0x6c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'ap'
			a, 0x61 0x7061
			p, 0x70 0x70
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'Œ¥tSx'
			Œ, 0xffffffce 0xb4ce
			t, 0x74 0x5374
			S, 0x53 0x7853
			x, 0x78 0x78
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'const'
			c, 0x63 0x6f63
			o, 0x6f 0x6e6f
			n, 0x6e 0x736e
			s, 0x73 0x7473
			t, 0x74 0x74
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'cm'
			c, 0x63 0x6d63
			m, 0x6d 0x6d
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opMul'
			o, 0x6f 0x706f
			p, 0x70 0x4d70
			M, 0x4d 0x754d
			u, 0x75 0x6c75
			l, 0x6c 0x6c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'am'
			a, 0x61 0x6d61
			m, 0x6d 0x6d
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'Œ¥tSx'
			Œ, 0xffffffce 0xb4ce
			t, 0x74 0x5374
			S, 0x53 0x7853
			x, 0x78 0x78
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'unp1'
			u, 0x75 0x6e75
			n, 0x6e 0x706e
			p, 0x70 0x3170
			1, 0x31 0x31
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'opSub'
			o, 0x6f 0x706f
			p, 0x70 0x5370
			S, 0x53 0x7553
			u, 0x75 0x6275
			b, 0x62 0x62
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'opSub'
			o, 0x6f 0x706f
			p, 0x70 0x5370
			S, 0x53 0x7553
			u, 0x75 0x6275
			b, 0x62 0x62
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'opMul'
			o, 0x6f 0x706f
			p, 0x70 0x4d70
			M, 0x4d 0x754d
			u, 0x75 0x6c75
			l, 0x6c 0x6c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'cp'
			c, 0x63 0x7063
			p, 0x70 0x70
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'opSub'
			o, 0x6f 0x706f
			p, 0x70 0x5370
			S, 0x53 0x7553
			u, 0x75 0x6275
			b, 0x62 0x62
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] '['
			[, 0x5b 0x5b
[nUtf8] '-'
			-, 0x2d 0x2d
[nUtf8] '1'
			1, 0x31 0x31
[nUtf8] ']'
			], 0x5d 0x5d
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'opMul'
			o, 0x6f 0x706f
			p, 0x70 0x4d70
			M, 0x4d 0x754d
			u, 0x75 0x6c75
			l, 0x6c 0x6c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'cm'
			c, 0x63 0x6d63
			m, 0x6d 0x6d
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'opSub'
			o, 0x6f 0x706f
			p, 0x70 0x5370
			S, 0x53 0x7553
			u, 0x75 0x6275
			b, 0x62 0x62
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] '['
			[, 0x5b 0x5b
[nUtf8] '+'
			+, 0x2b 0x2b
[nUtf8] '1'
			1, 0x31 0x31
[nUtf8] ']'
			], 0x5d 0x5d
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] 'COMPOUND_JOB_END'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x455f
			E, 0x45 0x4e45
			N, 0x4e 0x444e
			D, 0x44 0x44
[nUtf8] '‚àÄ'
			‚, 0xffffffe2 0x88e2
			à, 0xffffff88 0x8088
			Ä, 0xffffff80 0x80
[nUtf8] 'nodes'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x7365
			s, 0x73 0x73
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] 'copyResults'
			c, 0x63 0x6f63
			o, 0x6f 0x706f
			p, 0x70 0x7970
			y, 0x79 0x5279
			R, 0x52 0x6552
			e, 0x65 0x7365
			s, 0x73 0x7573
			u, 0x75 0x6c75
			l, 0x6c 0x746c
			t, 0x74 0x7374
			s, 0x73 0x73
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'in'
			i, 0x69 0x6e69
			n, 0x6e 0x6e
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'node'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x65
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '@'
			@, 0x40 0x40
[nUtf8] ' ( '
			 , 0x20 0x2820
			(, 0x28 0x2028
			 , 0x20 0x20
[nUtf8] '2.0'
			2, 0x32 0x2e32
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ' ) '
			 , 0x20 0x2920
			), 0x29 0x2029
			 , 0x20 0x20
[nUtf8] 'COMPOUND_JOB_INI'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x495f
			I, 0x49 0x4e49
			N, 0x4e 0x494e
			I, 0x49 0x49
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] '='
			=, 0x3d 0x3d
[nUtf8] 'unp1'
			u, 0x75 0x6e75
			n, 0x6e 0x706e
			p, 0x70 0x3170
			1, 0x31 0x31
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] 'COMPOUND_JOB_END'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x455f
			E, 0x45 0x4e45
			N, 0x4e 0x444e
			D, 0x44 0x44
[nUtf8] '‚àÄ'
			‚, 0xffffffe2 0x88e2
			à, 0xffffff88 0x8088
			Ä, 0xffffff80 0x80
[nUtf8] 'nodes'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x7365
			s, 0x73 0x73
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] 'dumpSolution'
			d, 0x64 0x7564
			u, 0x75 0x6d75
			m, 0x6d 0x706d
			p, 0x70 0x5370
			S, 0x53 0x6f53
			o, 0x6f 0x6c6f
			l, 0x6c 0x756c
			u, 0x75 0x7475
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x6e
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'File'
			F, 0x46 0x6946
			i, 0x69 0x6c69
			l, 0x6c 0x656c
			e, 0x65 0x65
[nUtf8] 'results'
			r, 0x72 0x6572
			e, 0x65 0x7365
			s, 0x73 0x7573
			u, 0x75 0x6c75
			l, 0x6c 0x746c
			t, 0x74 0x7374
			s, 0x73 0x73
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'in'
			i, 0x69 0x6e69
			n, 0x6e 0x6e
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'node'
			n, 0x6e 0x6f6e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x65
[nUtf8] 'u'
			u, 0x75 0x75
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'COMPOUND_JOB_INI'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x495f
			I, 0x49 0x4e49
			N, 0x4e 0x494e
			I, 0x49 0x49
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'results'
			r, 0x72 0x6572
			e, 0x65 0x7365
			s, 0x73 0x7573
			u, 0x75 0x6c75
			l, 0x6c 0x746c
			t, 0x74 0x7374
			s, 0x73 0x73
[nUtf8] '<<'
			<, 0x3c 0x3c3c
			<, 0x3c 0x3c
[nUtf8] 'coord'
			c, 0x63 0x6f63
			o, 0x6f 0x6f6f
			o, 0x6f 0x726f
			r, 0x72 0x6472
			d, 0x64 0x64
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] 'COMPOUND_JOB_END'
			C, 0x43 0x4f43
			O, 0x4f 0x4d4f
			M, 0x4d 0x504d
			P, 0x50 0x4f50
			O, 0x4f 0x554f
			U, 0x55 0x4e55
			N, 0x4e 0x444e
			D, 0x44 0x5f44
			_, 0x5f 0x4a5f
			J, 0x4a 0x4f4a
			O, 0x4f 0x424f
			B, 0x42 0x5f42
			_, 0x5f 0x455f
			E, 0x45 0x4e45
			N, 0x4e 0x444e
			D, 0x44 0x44
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] 'testForQuit'
			t, 0x74 0x6574
			e, 0x65 0x7365
			s, 0x73 0x7473
			t, 0x74 0x4674
			F, 0x46 0x6f46
			o, 0x6f 0x726f
			r, 0x72 0x5172
			Q, 0x51 0x7551
			u, 0x75 0x6975
			i, 0x69 0x7469
			t, 0x74 0x74
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'void'
			v, 0x76 0x6f76
			o, 0x6f 0x696f
			i, 0x69 0x6469
			d, 0x64 0x64
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '@'
			@, 0x40 0x40
[nUtf8] ' ( '
			 , 0x20 0x2820
			(, 0x28 0x2028
			 , 0x20 0x20
[nUtf8] '4.0'
			4, 0x34 0x2e34
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ' ) '
			 , 0x20 0x2920
			), 0x29 0x2029
			 , 0x20 0x20
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'if'
			i, 0x69 0x6669
			f, 0x66 0x66
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'GlobalIteration'
			G, 0x47 0x6c47
			l, 0x6c 0x6f6c
			o, 0x6f 0x626f
			b, 0x62 0x6162
			a, 0x61 0x6c61
			l, 0x6c 0x496c
			I, 0x49 0x7449
			t, 0x74 0x6574
			e, 0x65 0x7265
			r, 0x72 0x6172
			a, 0x61 0x7461
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x6e
[nUtf8] '>='
			>, 0x3e 0x3d3e
			=, 0x3d 0x3d
[nUtf8] 'time_steps'
			t, 0x74 0x6974
			i, 0x69 0x6d69
			m, 0x6d 0x656d
			e, 0x65 0x5f65
			_, 0x5f 0x735f
			s, 0x73 0x7473
			t, 0x74 0x6574
			e, 0x65 0x7065
			p, 0x70 0x7370
			s, 0x73 0x73
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'file'
			f, 0x66 0x6966
			i, 0x69 0x6c69
			l, 0x6c 0x656c
			e, 0x65 0x65
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'results'
			r, 0x72 0x6572
			e, 0x65 0x7365
			s, 0x73 0x7573
			u, 0x75 0x6c75
			l, 0x6c 0x746c
			t, 0x74 0x7374
			s, 0x73 0x73
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'plot'
			p, 0x70 0x6c70
			l, 0x6c 0x6f6c
			o, 0x6f 0x746f
			t, 0x74 0x74
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'results'
			r, 0x72 0x6572
			e, 0x65 0x7365
			s, 0x73 0x7573
			u, 0x75 0x6c75
			l, 0x6c 0x746c
			t, 0x74 0x7374
			s, 0x73 0x73
[nUtf8] '<<'
			<, 0x3c 0x3c3c
			<, 0x3c 0x3c
[nUtf8] '"#33 "'
			", 0x22 0x2322
			#, 0x23 0x3323
			3, 0x33 0x3333
			3, 0x33 0x2033
			 , 0x20 0x2220
			", 0x22 0x22
[nUtf8] '<<'
			<, 0x3c 0x3c3c
			<, 0x3c 0x3c
[nUtf8] '"globalNbCells"'
			", 0x22 0x6722
			g, 0x67 0x6c67
			l, 0x6c 0x6f6c
			o, 0x6f 0x626f
			b, 0x62 0x6162
			a, 0x61 0x6c61
			l, 0x6c 0x4e6c
			N, 0x4e 0x624e
			b, 0x62 0x4362
			C, 0x43 0x6543
			e, 0x65 0x6c65
			l, 0x6c 0x6c6c
			l, 0x6c 0x736c
			s, 0x73 0x2273
			", 0x22 0x22
[nUtf8] '<<'
			<, 0x3c 0x3c3c
			<, 0x3c 0x3c
[nUtf8] '" "'
			", 0x22 0x2022
			 , 0x20 0x2220
			", 0x22 0x22
[nUtf8] '<<'
			<, 0x3c 0x3c3c
			<, 0x3c 0x3c
[nUtf8] '"globalNbNodes"'
			", 0x22 0x6722
			g, 0x67 0x6c67
			l, 0x6c 0x6f6c
			o, 0x6f 0x626f
			b, 0x62 0x6162
			a, 0x61 0x6c61
			l, 0x6c 0x4e6c
			N, 0x4e 0x624e
			b, 0x62 0x4e62
			N, 0x4e 0x6f4e
			o, 0x6f 0x646f
			d, 0x64 0x6564
			e, 0x65 0x7365
			s, 0x73 0x2273
			", 0x22 0x22
[nUtf8] '<<'
			<, 0x3c 0x3c3c
			<, 0x3c 0x3c
[nUtf8] '"\n"'
			", 0x22 0x5c22
			\, 0x5c 0x6e5c
			n, 0x6e 0x226e
			", 0x22 0x22
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '/*call*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x632a
			c, 0x63 0x6163
			a, 0x61 0x6c61
			l, 0x6c 0x6c6c
			l, 0x6c 0x2a6c
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] 'dumpSolution'
			d, 0x64 0x7564
			u, 0x75 0x6d75
			m, 0x6d 0x706d
			p, 0x70 0x5370
			S, 0x53 0x6f53
			o, 0x6f 0x6c6f
			l, 0x6c 0x756c
			u, 0x75 0x7475
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x6e
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'results'
			r, 0x72 0x6572
			e, 0x65 0x7365
			s, 0x73 0x7573
			u, 0x75 0x6c75
			l, 0x6c 0x746c
			t, 0x74 0x7374
			s, 0x73 0x73
[nUtf8] '/*args*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x612a
			a, 0x61 0x7261
			r, 0x72 0x6772
			g, 0x67 0x7367
			s, 0x73 0x2a73
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'exit'
			e, 0x65 0x7865
			x, 0x78 0x6978
			i, 0x69 0x7469
			t, 0x74 0x74
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] '# 1 "analytics.n"'
			#, 0x23 0x2023
			 , 0x20 0x3120
			1, 0x31 0x2031
			 , 0x20 0x2220
			", 0x22 0x6122
			a, 0x61 0x6e61
			n, 0x6e 0x616e
			a, 0x61 0x6c61
			l, 0x6c 0x796c
			y, 0x79 0x7479
			t, 0x74 0x6974
			i, 0x69 0x6369
			c, 0x63 0x7363
			s, 0x73 0x2e73
			., 0x2e 0x6e2e
			n, 0x6e 0x226e
			", 0x22 0x22
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'u0_Test1_for_linear_advection_smooth_data'
			u, 0x75 0x3075
			0, 0x30 0x5f30
			_, 0x5f 0x545f
			T, 0x54 0x6554
			e, 0x65 0x7365
			s, 0x73 0x7473
			t, 0x74 0x3174
			1, 0x31 0x5f31
			_, 0x5f 0x665f
			f, 0x66 0x6f66
			o, 0x6f 0x726f
			r, 0x72 0x5f72
			_, 0x5f 0x6c5f
			l, 0x6c 0x696c
			i, 0x69 0x6e69
			n, 0x6e 0x656e
			e, 0x65 0x6165
			a, 0x61 0x7261
			r, 0x72 0x5f72
			_, 0x5f 0x615f
			a, 0x61 0x6461
			d, 0x64 0x7664
			v, 0x76 0x6576
			e, 0x65 0x6365
			c, 0x63 0x7463
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x735f
			s, 0x73 0x6d73
			m, 0x6d 0x6f6d
			o, 0x6f 0x6f6f
			o, 0x6f 0x746f
			t, 0x74 0x6874
			h, 0x68 0x5f68
			_, 0x5f 0x645f
			d, 0x64 0x6164
			a, 0x61 0x7461
			t, 0x74 0x6174
			a, 0x61 0x61
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'x'
			x, 0x78 0x78
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'return'
			r, 0x72 0x6572
			e, 0x65 0x7465
			t, 0x74 0x7574
			u, 0x75 0x7275
			r, 0x72 0x6e72
			n, 0x6e 0x6e
[nUtf8] 'opMul'
			o, 0x6f 0x706f
			p, 0x70 0x4d70
			M, 0x4d 0x754d
			u, 0x75 0x6c75
			l, 0x6c 0x6c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'Œ±'
			Œ, 0xffffffce 0xb1ce
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] '/*call*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x632a
			c, 0x63 0x6163
			a, 0x61 0x6c61
			l, 0x6c 0x6c6c
			l, 0x6c 0x2a6c
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] 'exp'
			e, 0x65 0x7865
			x, 0x78 0x7078
			p, 0x70 0x70
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'opMul'
			o, 0x6f 0x706f
			p, 0x70 0x4d70
			M, 0x4d 0x754d
			u, 0x75 0x6c75
			l, 0x6c 0x6c
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] '-'
			-, 0x2d 0x2d
[nUtf8] 'Œ≤'
			Œ, 0xffffffce 0xb2ce
[nUtf8] ','
			,, 0x2c 0x2c
[nUtf8] 'pow'
			p, 0x70 0x6f70
			o, 0x6f 0x776f
			w, 0x77 0x77
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'x'
			x, 0x78 0x78
[nUtf8] ',2.0'
			,, 0x2c 0x322c
			2, 0x32 0x2e32
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '/*args*/'
			/, 0x2f 0x2a2f
			*, 0x2a 0x612a
			a, 0x61 0x7261
			r, 0x72 0x6772
			g, 0x67 0x7367
			s, 0x73 0x2a73
			*, 0x2a 0x2f2a
			/, 0x2f 0x2f
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'u0_Test2_for_linear_advection_discontinuous_data'
			u, 0x75 0x3075
			0, 0x30 0x5f30
			_, 0x5f 0x545f
			T, 0x54 0x6554
			e, 0x65 0x7365
			s, 0x73 0x7473
			t, 0x74 0x3274
			2, 0x32 0x5f32
			_, 0x5f 0x665f
			f, 0x66 0x6f66
			o, 0x6f 0x726f
			r, 0x72 0x5f72
			_, 0x5f 0x6c5f
			l, 0x6c 0x696c
			i, 0x69 0x6e69
			n, 0x6e 0x656e
			e, 0x65 0x6165
			a, 0x61 0x7261
			r, 0x72 0x5f72
			_, 0x5f 0x615f
			a, 0x61 0x6461
			d, 0x64 0x7664
			v, 0x76 0x6576
			e, 0x65 0x6365
			c, 0x63 0x7463
			t, 0x74 0x6974
			i, 0x69 0x6f69
			o, 0x6f 0x6e6f
			n, 0x6e 0x5f6e
			_, 0x5f 0x645f
			d, 0x64 0x6964
			i, 0x69 0x7369
			s, 0x73 0x6373
			c, 0x63 0x6f63
			o, 0x6f 0x6e6f
			n, 0x6e 0x746e
			t, 0x74 0x6974
			i, 0x69 0x6e69
			n, 0x6e 0x756e
			u, 0x75 0x6f75
			o, 0x6f 0x756f
			u, 0x75 0x7375
			s, 0x73 0x5f73
			_, 0x5f 0x645f
			d, 0x64 0x6164
			a, 0x61 0x7461
			t, 0x74 0x6174
			a, 0x61 0x61
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] '‚Ñù'
			‚, 0xffffffe2 0x84e2
[nUtf8] 'x'
			x, 0x78 0x78
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] '{'
			{, 0x7b 0x7b
[nUtf8] 'if'
			i, 0x69 0x6669
			f, 0x66 0x66
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'x'
			x, 0x78 0x78
[nUtf8] '<'
			<, 0x3c 0x3c
[nUtf8] '0.3'
			0, 0x30 0x2e30
			., 0x2e 0x332e
			3, 0x33 0x33
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'return'
			r, 0x72 0x6572
			e, 0x65 0x7465
			t, 0x74 0x7574
			u, 0x75 0x7275
			r, 0x72 0x6e72
			n, 0x6e 0x6e
[nUtf8] '0.0'
			0, 0x30 0x2e30
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'if'
			i, 0x69 0x6669
			f, 0x66 0x66
[nUtf8] '('
			(, 0x28 0x28
[nUtf8] 'x'
			x, 0x78 0x78
[nUtf8] '<'
			<, 0x3c 0x3c
[nUtf8] '0.7'
			0, 0x30 0x2e30
			., 0x2e 0x372e
			7, 0x37 0x37
[nUtf8] ')'
			), 0x29 0x29
[nUtf8] 'return'
			r, 0x72 0x6572
			e, 0x65 0x7465
			t, 0x74 0x7574
			u, 0x75 0x7275
			r, 0x72 0x6e72
			n, 0x6e 0x6e
[nUtf8] '1.0'
			1, 0x31 0x2e31
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] 'return'
			r, 0x72 0x6572
			e, 0x65 0x7465
			t, 0x74 0x7574
			u, 0x75 0x7275
			r, 0x72 0x6e72
			n, 0x6e 0x6e
[nUtf8] '0.0'
			0, 0x30 0x2e30
			., 0x2e 0x302e
			0, 0x30 0x30
[nUtf8] ';'
			;, 0x3b 0x3b
[nUtf8] '}'
			}, 0x7d 0x7d
[nablaParsing] On dump l'arbre cr√©√©
[nablaParsing] nabla_entity_name=upwind
[nablaParsing] nabla_input_file=analytics.n
[nablaParsing] Now launching nablaMiddlendSwitch
	[nablaMiddlendInit] setting nabla->name to 'upwind'
	[nablaMiddlendInit] Cr√©ation de notre premier entity
	[nablaMiddlendInit] Rajout du 'main'
	[nablaMiddlendInit] Rajout du nom de l'entity 'upwind'
	[nablaMiddlendInit] Rajout du name_upcase de l'entity UPWIND
	[nablaMiddlendInit] Returning nabla
	[nablaMiddlendSwitch] On initialise le type de backend (= 0x4) et de ses variantes (= 0x1080)
	[nablaMiddlendSwitch] On rajoute les variables globales
	[nablaMiddlendVariableGlobalAdd] Adding global deltat, time
	[nablaMiddlendVariableGlobalAdd] Adding AoS variables Real3 coord
	[nablaMiddlendSwitch] Now switching...
	[nablaMiddlendParseAndHook] with_library hit!
	[nablaLibraries] Real single_library hit!
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit nabla_options_definition
		[actGenericOptionsTypeSpecifier] Real
		[actGenericOptionsDirectDeclarator] option_a
		[actOptionsExpression] rule=expression
			[catTillToken] 1.0
		[actOptionsExpression] final option->dflt is '1.0'
		[actGenericOptionsTypeSpecifier] Real
		[actGenericOptionsDirectDeclarator] al
		[actOptionsExpression] rule=expression
			[catTillToken] 1.0
		[actOptionsExpression] final option->dflt is '1.0'
		[actGenericOptionsTypeSpecifier] Real
		[actGenericOptionsDirectDeclarator] bt
		[actOptionsExpression] rule=expression
			[catTillToken] 8.0
		[actOptionsExpression] final option->dflt is '8.0'
		[actGenericOptionsTypeSpecifier] Real
		[actGenericOptionsDirectDeclarator] xmin
		[actOptionsExpression] rule=expression
			[catTillToken] -
			[catTillToken] 1.0
		[actOptionsExpression] final option->dflt is '-1.0'
		[actGenericOptionsTypeSpecifier] Real
		[actGenericOptionsDirectDeclarator] xmax
		[actOptionsExpression] rule=expression
			[catTillToken] +
			[catTillToken] 1.0
		[actOptionsExpression] final option->dflt is '+1.0'
		[actGenericOptionsTypeSpecifier] Real
		[actGenericOptionsDirectDeclarator] CFL
		[actOptionsExpression] rule=expression
			[catTillToken] 0.8
		[actOptionsExpression] final option->dflt is '0.8'
		[actGenericOptionsTypeSpecifier] Integer
		[actGenericOptionsDirectDeclarator] test
		[actOptionsExpression] rule=expression
			[catTillToken] 1
		[actOptionsExpression] final option->dflt is '1'
		[actGenericOptionsTypeSpecifier] Integer
		[actGenericOptionsDirectDeclarator] time_steps
		[actOptionsExpression] rule=expression
			[catTillToken] 8
		[actOptionsExpression] final option->dflt is '8'
		[actGenericOptionsTypeSpecifier] Real
		[actGenericOptionsDirectDeclarator] option_dtt_initial
		[actOptionsExpression] rule=expression
			[catTillToken] 0.0
		[actOptionsExpression] final option->dflt is '0.0'
		[actGenericOptionsTypeSpecifier] Real
		[actGenericOptionsDirectDeclarator] option_stoptime
		[actOptionsExpression] rule=expression
			[catTillToken] 1.0
		[actOptionsExpression] final option->dflt is '1.0'
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule nabla_item_definition,  support nodes
		[actItemTypeSpecifier] node:Real
		[actItemDirectDeclarator] u
		[actItemTypeSpecifier] node:Real
		[actItemDirectDeclarator] unp1
		[actItemTypeSpecifier] node:Real
		[actItemDirectDeclarator] dtxp
		[actItemTypeSpecifier] node:Real
		[actItemDirectDeclarator] dtxm
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule nabla_item_definition,  support global
		[actItemTypeSpecifier] global:Real
		[actItemDirectDeclarator] dtx
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit function_definition

	[nablaFctFill] 
	[nablaFctFill] Looking for fct->rtntp:
	[nablaFctFill] fct->rtntp=void
	[nablaFctFill] On refait (sic) pour le noeud
	[nablaFctFill] On va chercher le nom de la fonction
	[nablaFctFill] Qui est: 'iniGlobals'
	[nablaFctFill] CotÈ UTF-8, on a: 'iniGlobals'
	[nablaFctFill] On va chercher la list des paramËtres
	[nablaFctFill] scope=NoGroup region=NoRegion item= type=void name=iniGlobals
	[scanForNablaJobAtConstant] @ '-' '-5.0' 
	[nablaStoreWhen] Storing when @=-5.000000 
	[nablaFctFill] Now fillinf SRC file
	[nablaFctFill] On va chercher les paramËtres standards pour le src
		[dumpParameterTypeList] number_of_parameters_here+=1
	[nablaFctFill] adding ExtraParameters
	[nablaFctFill] launching dfsForCalls
		[dumpParameterTypeList] number_of_parameters_here+=1
	[nablaFctFill] On avance jusqu'au compound_statement
	[nablaFctFill] prefixEnumerate
	[nablaFctFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=

	[okinaHookDumpEnumerate]		warping=_WARP
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=

	[nablaFctFill] postfixEnumerate
	[nablaFctFill] Now dumping function tokens
		[nablaFunctionParse] TOKEN 'dtx'
	[nablaVariableFind] looking for 'dtx' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Yes!
	[okinaHookTurnTokenToVariable] global_dtx token=dtx
		[nablaFunctionParse] TOKEN '='
	[nablaVariableFind] looking for '=' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'opDiv'
	[nablaVariableFind] looking for 'opDiv' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'opSub'
	[nablaVariableFind] looking for 'opSub' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'xmax'
	[nablaFunctionParse] OPTION hit!
		[nablaFunctionParse] TOKEN ','
	[nablaVariableFind] looking for ',' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'xmin'
	[nablaFunctionParse] OPTION hit!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ','
	[nablaVariableFind] looking for ',' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '8'
	[nablaVariableFind] looking for '8' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'deltat'
	[nablaVariableFind] looking for 'deltat' ?deltat Yes!
	[okinaHookTurnTokenToVariable] global_deltat token=deltat
		[nablaFunctionParse] TOKEN '='
	[nablaVariableFind] looking for '=' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'opDiv'
	[nablaVariableFind] looking for 'opDiv' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'opMul'
	[nablaVariableFind] looking for 'opMul' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'CFL'
	[nablaFunctionParse] OPTION hit!
		[nablaFunctionParse] TOKEN ','
	[nablaVariableFind] looking for ',' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'dtx'
	[nablaVariableFind] looking for 'dtx' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Yes!
	[okinaHookTurnTokenToVariable] global_dtx token=dtx
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ','
	[nablaVariableFind] looking for ',' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'option_a'
	[nablaFunctionParse] OPTION hit!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '/*call*/'
	[nablaFunctionParse] CALL
	[nablaFunctionParse] CALL done
		[nablaFunctionParse] TOKEN 'assert'
	[nablaVariableFind] looking for 'assert' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'deltat'
	[nablaVariableFind] looking for 'deltat' ?deltat Yes!
	[okinaHookTurnTokenToVariable] global_deltat token=deltat
		[nablaFunctionParse] TOKEN '>='
	[nablaVariableFind] looking for '>=' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '0.0'
	[nablaVariableFind] looking for '0.0' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '/*args*/'
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '}'
	[nablaVariableFind] looking for '}' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
	[nablaFctFill] done
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit nabla_job_definition

	[nablaJobFill] named 'inidtx'
	[nablaJobFill] scope= region= item=nodes type_de_retour=void name=inidtx
	[scanForNablaJobAtConstant] @ '-' '-5.0' 
	[nablaStoreWhen] Storing when @=-5.000000 
		[dumpParameterTypeList] number_of_parameters_here+=1
	[nablaJobFill] numParams=0
	[nablaJobFill] On s'autorise un endroit pour insÈrer des paramËtres
	[nablaJobFill] Et on dump les in et les out
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaJobFill] On prÈpare le bon ENUMERATE
	[nablaJobFill] On avance jusqu'au COMPOUND_JOB_INI afin de sauter les listes de paramËtres
	[nablaJobFill] On cherche s'il y a un selection statement
	[nablaJobFill] Found a selection statement in this job!
	[nablaJobFill] prefixEnumerate
	[nablaJobFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=FOR_EACH_NODE%s%s(n
	[okinaHookDumpEnumerate]		warping=
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=FOR_EACH_NODE%s%s(n)
	[nablaJobFill] postfixEnumerate
	[nablaJobFill] postfixEnumerate done
	[nablaJobFill] Now parsing...
[nablaJobParse] token: 'COMPOUND_JOB_INI'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_INI'?
[nablaJobParse] token: '{'?
	[okinaHookSwitchToken] token: '{'?
[nablaJobParse] token: 'if'?
	[okinaHookSwitchToken] token: 'if'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '!='?
	[okinaHookSwitchToken] token: '!='?
	[nablaJobParse] primaryExpression hits option
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
	[nablaJobParse] primaryExpression=primary_expression child->token=dtxm
	[nablaVariableFind] looking for 'dtxm' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm Yes!
	[okinaHookTurnTokenToVariable] node_dtxm token=dtxm
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: 'opSub'?
	[okinaHookSwitchToken] token: 'opSub'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaVariable] Looking for 'primary_expression':
	[nablaVariable] Looking for 'nabla_item':
	[nablaVariable] Looking for 'nabla_system':
	[nablaVariable] primary_expression->token=coord, nabla_item=NULL, nabla_system=NULL
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '['?
	[okinaHookSwitchToken] token: '['?
[nablaJobParse] token: '-'?
	[okinaHookSwitchToken] token: '-'?
	[nablaJobParse] primaryExpression=primary_expression child->token=1
	[nablaVariableFind] looking for '1' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '1'?
	[okinaHookSwitchToken] token: '1'?
[nablaJobParse] token: ']'?
	[okinaHookSwitchToken] token: ']'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: 'if'?
	[okinaHookSwitchToken] token: 'if'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '!='?
	[okinaHookSwitchToken] token: '!='?
	[nablaJobParse] primaryExpression hits option
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
	[nablaJobParse] primaryExpression=primary_expression child->token=dtxp
	[nablaVariableFind] looking for 'dtxp' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp Yes!
	[okinaHookTurnTokenToVariable] node_dtxp token=dtxp
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: 'opSub'?
	[okinaHookSwitchToken] token: 'opSub'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaVariable] Looking for 'primary_expression':
	[nablaVariable] Looking for 'nabla_item':
	[nablaVariable] Looking for 'nabla_system':
	[nablaVariable] primary_expression->token=coord, nabla_item=NULL, nabla_system=NULL
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '['?
	[okinaHookSwitchToken] token: '['?
[nablaJobParse] token: '+'?
	[okinaHookSwitchToken] token: '+'?
	[nablaJobParse] primaryExpression=primary_expression child->token=1
	[nablaVariableFind] looking for '1' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '1'?
	[okinaHookSwitchToken] token: '1'?
[nablaJobParse] token: ']'?
	[okinaHookSwitchToken] token: ']'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: '}'?
	[okinaHookSwitchToken] token: '}'?
[nablaJobParse] token: 'COMPOUND_JOB_END'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_END'?
	[nablaJobFill] done
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit nabla_job_definition

	[nablaJobFill] named 'ini'
	[nablaJobFill] scope= region= item=nodes type_de_retour=void name=ini
	[scanForNablaJobParameter] in (node,coord) (node,u)
	[scanForNablaJobAtConstant] @ '-' '-4.0' 
	[nablaStoreWhen] Storing when @=-4.000000 
		[dumpParameterTypeList] number_of_parameters_here+=1
	[nablaJobFill] numParams=0
	[nablaJobFill] On s'autorise un endroit pour insÈrer des paramËtres
	[nablaJobFill] Et on dump les in et les out
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookDumpNablaParameterList] Looking for variable 'coord'
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookDumpNablaParameterList] Looking for variable 'u'
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaJobFill] On prÈpare le bon ENUMERATE
	[nablaJobFill] On avance jusqu'au COMPOUND_JOB_INI afin de sauter les listes de paramËtres
	[nablaJobFill] On cherche s'il y a un selection statement
	[nablaJobFill] No selection statement in this job!
	[nablaJobFill] prefixEnumerate
	[nablaJobFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=FOR_EACH_NODE%s%s(n
	[okinaHookDumpEnumerate]		warping=_WARP
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=FOR_EACH_NODE%s%s(n)
	[nablaJobFill] postfixEnumerate
	[nablaJobFill] postfixEnumerate done
	[nablaJobFill] Now parsing...
[nablaJobParse] token: 'COMPOUND_JOB_INI'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_INI'?
[nablaJobParse] token: '{'?
	[okinaHookSwitchToken] token: '{'?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
	[nablaJobParse] primaryExpression=primary_expression child->token=0.0
	[nablaVariableFind] looking for '0.0' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '0.0'?
	[okinaHookSwitchToken] token: '0.0'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: 'opTernary'?
	[okinaHookSwitchToken] token: 'opTernary'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=(
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression hits option
[nablaJobParse] token: '=='?
	[okinaHookSwitchToken] token: '=='?
	[nablaJobParse] primaryExpression=primary_expression child->token=1
	[nablaVariableFind] looking for '1' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '1'?
	[okinaHookSwitchToken] token: '1'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
[nablaJobParse] token: '/*call*/'?
	[okinaHookSwitchToken] token: '/*call*/'?
	[nablaJobParse] primaryExpression=primary_expression child->token=u0_Test1_for_linear_advection_smooth_data
	[nablaVariableFind] looking for 'u0_Test1_for_linear_advection_smooth_data' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'u0_Test1_for_linear_advection_smooth_data'?
	[okinaHookSwitchToken] token: 'u0_Test1_for_linear_advection_smooth_data'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '/*args*/'?
	[okinaHookSwitchToken] token: '/*args*/'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: 'opTernary'?
	[okinaHookSwitchToken] token: 'opTernary'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=(
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression hits option
[nablaJobParse] token: '=='?
	[okinaHookSwitchToken] token: '=='?
	[nablaJobParse] primaryExpression=primary_expression child->token=2
	[nablaVariableFind] looking for '2' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '2'?
	[okinaHookSwitchToken] token: '2'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
[nablaJobParse] token: '/*call*/'?
	[okinaHookSwitchToken] token: '/*call*/'?
	[nablaJobParse] primaryExpression=primary_expression child->token=u0_Test2_for_linear_advection_discontinuous_data
	[nablaVariableFind] looking for 'u0_Test2_for_linear_advection_discontinuous_data' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'u0_Test2_for_linear_advection_discontinuous_data'?
	[okinaHookSwitchToken] token: 'u0_Test2_for_linear_advection_discontinuous_data'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '/*args*/'?
	[okinaHookSwitchToken] token: '/*args*/'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: '}'?
	[okinaHookSwitchToken] token: '}'?
[nablaJobParse] token: 'COMPOUND_JOB_END'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_END'?
	[nablaJobFill] done
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit nabla_job_definition

	[nablaJobFill] named 'loop'
	[nablaJobFill] scope= region= item=nodes type_de_retour=void name=loop
	[scanForNablaJobParameter] in (node,u)
	[scanForNablaJobAtConstant] @ '1.0' 
	[nablaStoreWhen] Storing when @=1.000000 
		[dumpParameterTypeList] number_of_parameters_here+=1
	[nablaJobFill] numParams=0
	[nablaJobFill] On s'autorise un endroit pour insÈrer des paramËtres
	[nablaJobFill] Et on dump les in et les out
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookDumpNablaParameterList] Looking for variable 'u'
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaJobFill] On prÈpare le bon ENUMERATE
	[nablaJobFill] On avance jusqu'au COMPOUND_JOB_INI afin de sauter les listes de paramËtres
	[nablaJobFill] On cherche s'il y a un selection statement
	[nablaJobFill] No selection statement in this job!
	[nablaJobFill] prefixEnumerate
	[nablaJobFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=FOR_EACH_NODE%s%s(n
	[okinaHookDumpEnumerate]		warping=_WARP
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=FOR_EACH_NODE%s%s(n)
	[nablaJobFill] postfixEnumerate
	[nablaJobFill] postfixEnumerate done
	[nablaJobFill] Now parsing...
[nablaJobParse] token: 'COMPOUND_JOB_INI'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_INI'?
[nablaJobParse] token: '{'?
	[okinaHookSwitchToken] token: '{'?
[nablaJobParse] token: 'const'?
	[okinaHookSwitchToken] token: 'const'?
[nablaJobParse] token: 'Real'?
	[okinaHookSwitchToken] token: 'Real'?
[nablaJobParse] token: 'ap'?
	[okinaHookSwitchToken] token: 'ap'?
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: '/*call*/'?
	[okinaHookSwitchToken] token: '/*call*/'?
	[nablaJobParse] primaryExpression=primary_expression child->token=fmax
	[nablaVariableFind] looking for 'fmax' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'fmax'?
	[okinaHookSwitchToken] token: 'fmax'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression hits option
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=0.0
	[nablaVariableFind] looking for '0.0' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '0.0'?
	[okinaHookSwitchToken] token: '0.0'?
[nablaJobParse] token: '/*args*/'?
	[okinaHookSwitchToken] token: '/*args*/'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: 'const'?
	[okinaHookSwitchToken] token: 'const'?
[nablaJobParse] token: 'Real'?
	[okinaHookSwitchToken] token: 'Real'?
[nablaJobParse] token: 'am'?
	[okinaHookSwitchToken] token: 'am'?
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: '/*call*/'?
	[okinaHookSwitchToken] token: '/*call*/'?
	[nablaJobParse] primaryExpression=primary_expression child->token=fmin
	[nablaVariableFind] looking for 'fmin' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'fmin'?
	[okinaHookSwitchToken] token: 'fmin'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression hits option
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=0.0
	[nablaVariableFind] looking for '0.0' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '0.0'?
	[okinaHookSwitchToken] token: '0.0'?
[nablaJobParse] token: '/*args*/'?
	[okinaHookSwitchToken] token: '/*args*/'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: 'const'?
	[okinaHookSwitchToken] token: 'const'?
[nablaJobParse] token: 'Real'?
	[okinaHookSwitchToken] token: 'Real'?
[nablaJobParse] token: 'dttSx'?
	[okinaHookSwitchToken] token: 'dttSx'?
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: 'opDiv'?
	[okinaHookSwitchToken] token: 'opDiv'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=deltat
	[nablaVariableFind] looking for 'deltat' ?deltat Yes!
	[okinaHookTurnTokenToVariable] global_deltat token=deltat
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=dtx
	[nablaVariableFind] looking for 'dtx' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Yes!
	[okinaHookTurnTokenToVariable] global_dtx token=dtx
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: 'const'?
	[okinaHookSwitchToken] token: 'const'?
[nablaJobParse] token: 'Real'?
	[okinaHookSwitchToken] token: 'Real'?
[nablaJobParse] token: 'cp'?
	[okinaHookSwitchToken] token: 'cp'?
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: 'opMul'?
	[okinaHookSwitchToken] token: 'opMul'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=ap
	[nablaVariableFind] looking for 'ap' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'ap'?
	[okinaHookSwitchToken] token: 'ap'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=dttSx
	[nablaVariableFind] looking for 'dttSx' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'dttSx'?
	[okinaHookSwitchToken] token: 'dttSx'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: 'const'?
	[okinaHookSwitchToken] token: 'const'?
[nablaJobParse] token: 'Real'?
	[okinaHookSwitchToken] token: 'Real'?
[nablaJobParse] token: 'cm'?
	[okinaHookSwitchToken] token: 'cm'?
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: 'opMul'?
	[okinaHookSwitchToken] token: 'opMul'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=am
	[nablaVariableFind] looking for 'am' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'am'?
	[okinaHookSwitchToken] token: 'am'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=dttSx
	[nablaVariableFind] looking for 'dttSx' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'dttSx'?
	[okinaHookSwitchToken] token: 'dttSx'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
	[nablaJobParse] primaryExpression=primary_expression child->token=unp1
	[nablaVariableFind] looking for 'unp1' ?deltat ?time ?coord ?iteration ?u ?unp1 Yes!
	[okinaHookTurnTokenToVariable] node_unp1 token=unp1
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
[nablaJobParse] token: 'opSub'?
	[okinaHookSwitchToken] token: 'opSub'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
[nablaJobParse] token: 'opSub'?
	[okinaHookSwitchToken] token: 'opSub'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
[nablaJobParse] token: 'opMul'?
	[okinaHookSwitchToken] token: 'opMul'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=cp
	[nablaVariableFind] looking for 'cp' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'cp'?
	[okinaHookSwitchToken] token: 'cp'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=(
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
[nablaJobParse] token: 'opSub'?
	[okinaHookSwitchToken] token: 'opSub'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaVariable] Looking for 'primary_expression':
	[nablaVariable] Looking for 'nabla_item':
	[nablaVariable] Looking for 'nabla_system':
	[nablaVariable] primary_expression->token=u, nabla_item=NULL, nabla_system=NULL
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '['?
	[okinaHookSwitchToken] token: '['?
[nablaJobParse] token: '-'?
	[okinaHookSwitchToken] token: '-'?
	[nablaJobParse] primaryExpression=primary_expression child->token=1
	[nablaVariableFind] looking for '1' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '1'?
	[okinaHookSwitchToken] token: '1'?
[nablaJobParse] token: ']'?
	[okinaHookSwitchToken] token: ']'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
[nablaJobParse] token: 'opMul'?
	[okinaHookSwitchToken] token: 'opMul'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaJobParse] primaryExpression=primary_expression child->token=cm
	[nablaVariableFind] looking for 'cm' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'cm'?
	[okinaHookSwitchToken] token: 'cm'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=(
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
[nablaJobParse] token: 'opSub'?
	[okinaHookSwitchToken] token: 'opSub'?
[nablaJobParse] token: '('?
	[okinaHookSwitchToken] token: '('?
	[nablaVariable] Looking for 'primary_expression':
	[nablaVariable] Looking for 'nabla_item':
	[nablaVariable] Looking for 'nabla_system':
	[nablaVariable] primary_expression->token=u, nabla_item=NULL, nabla_system=NULL
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '['?
	[okinaHookSwitchToken] token: '['?
[nablaJobParse] token: '+'?
	[okinaHookSwitchToken] token: '+'?
	[nablaJobParse] primaryExpression=primary_expression child->token=1
	[nablaVariableFind] looking for '1' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: '1'?
	[okinaHookSwitchToken] token: '1'?
[nablaJobParse] token: ']'?
	[okinaHookSwitchToken] token: ']'?
[nablaJobParse] token: ','?
	[okinaHookSwitchToken] token: ','?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ')'?
	[okinaHookSwitchToken] token: ')'?
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: '}'?
	[okinaHookSwitchToken] token: '}'?
[nablaJobParse] token: 'COMPOUND_JOB_END'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_END'?
	[nablaJobFill] done
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit nabla_job_definition

	[nablaJobFill] named 'copyResults'
	[nablaJobFill] scope= region= item=nodes type_de_retour=void name=copyResults
	[scanForNablaJobParameter] in (node,u)
	[scanForNablaJobAtConstant] @ '2.0' 
	[nablaStoreWhen] Storing when @=2.000000 
		[dumpParameterTypeList] number_of_parameters_here+=1
	[nablaJobFill] numParams=0
	[nablaJobFill] On s'autorise un endroit pour insÈrer des paramËtres
	[nablaJobFill] Et on dump les in et les out
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookDumpNablaParameterList] Looking for variable 'u'
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaJobFill] On prÈpare le bon ENUMERATE
	[nablaJobFill] On avance jusqu'au COMPOUND_JOB_INI afin de sauter les listes de paramËtres
	[nablaJobFill] On cherche s'il y a un selection statement
	[nablaJobFill] No selection statement in this job!
	[nablaJobFill] prefixEnumerate
	[nablaJobFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=FOR_EACH_NODE%s%s(n
	[okinaHookDumpEnumerate]		warping=_WARP
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=FOR_EACH_NODE%s%s(n)
	[nablaJobFill] postfixEnumerate
	[nablaJobFill] postfixEnumerate done
	[nablaJobFill] Now parsing...
[nablaJobParse] token: 'COMPOUND_JOB_INI'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_INI'?
[nablaJobParse] token: '{'?
	[okinaHookSwitchToken] token: '{'?
	[nablaJobParse] primaryExpression=primary_expression child->token=u
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookTurnTokenToVariable] node_u token=u
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: '='?
	[okinaHookSwitchToken] token: '='?
	[nablaJobParse] primaryExpression=primary_expression child->token=unp1
	[nablaVariableFind] looking for 'unp1' ?deltat ?time ?coord ?iteration ?u ?unp1 Yes!
	[okinaHookTurnTokenToVariable] node_unp1 token=unp1
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: '}'?
	[okinaHookSwitchToken] token: '}'?
[nablaJobParse] token: 'COMPOUND_JOB_END'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_END'?
	[nablaJobFill] done
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit nabla_job_definition

	[nablaJobFill] named 'dumpSolution'
	[nablaJobFill] scope= region= item=nodes type_de_retour=void name=dumpSolution
	[scanForNablaJobParameter] in (node,u)
		[dumpParameterTypeList] number_of_parameters_here+=1
		[dumpParameterTypeList] File
		[dumpParameterTypeList] results
	[nablaJobFill] numParams=1
	[nablaJobFill] On s'autorise un endroit pour insÈrer des paramËtres
	[nablaJobFill] Et on dump les in et les out
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaVariableFind] looking for 'u' ?deltat ?time ?coord ?iteration ?u Yes!
	[okinaHookDumpNablaParameterList] Looking for variable 'u'
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[okinaHookDumpNablaParameterList]
	[nablaJobFill] On prÈpare le bon ENUMERATE
	[nablaJobFill] On avance jusqu'au COMPOUND_JOB_INI afin de sauter les listes de paramËtres
	[nablaJobFill] On cherche s'il y a un selection statement
	[nablaJobFill] No selection statement in this job!
	[nablaJobFill] prefixEnumerate
	[nablaJobFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=FOR_EACH_NODE%s%s(n
	[okinaHookDumpEnumerate]		warping=_WARP
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=FOR_EACH_NODE%s%s(n)
	[nablaJobFill] postfixEnumerate
	[nablaJobFill] postfixEnumerate done
	[nablaJobFill] Now parsing...
[nablaJobParse] token: 'COMPOUND_JOB_INI'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_INI'?
[nablaJobParse] token: '{'?
	[okinaHookSwitchToken] token: '{'?
	[nablaJobParse] primaryExpression=primary_expression child->token=results
	[nablaVariableFind] looking for 'results' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
[nablaJobParse] token: 'results'?
	[okinaHookSwitchToken] token: 'results'?
[nablaJobParse] token: '<<'?
	[okinaHookSwitchToken] token: '<<'?
	[nablaJobParse] primaryExpression=primary_expression child->token=coord
	[nablaVariableFind] looking for 'coord' ?deltat ?time ?coord Yes!
	[okinaHookTurnTokenToVariable] node_coord token=coord
	[actJobItemParse] primaryExpression hits variable
[nablaJobParse] token: ';'?
	[okinaHookSwitchToken] token: ';'?
[nablaJobParse] token: '}'?
	[okinaHookSwitchToken] token: '}'?
[nablaJobParse] token: 'COMPOUND_JOB_END'?
	[okinaHookSwitchToken] token: 'COMPOUND_JOB_END'?
	[nablaJobFill] done
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit function_definition

	[nablaFctFill] 
	[nablaFctFill] Looking for fct->rtntp:
	[nablaFctFill] fct->rtntp=void
	[nablaFctFill] On refait (sic) pour le noeud
	[nablaFctFill] On va chercher le nom de la fonction
	[nablaFctFill] Qui est: 'testForQuit'
	[nablaFctFill] CotÈ UTF-8, on a: 'testForQuit'
	[nablaFctFill] On va chercher la list des paramËtres
	[nablaFctFill] scope=NoGroup region=NoRegion item= type=void name=testForQuit
	[scanForNablaJobAtConstant] @ '4.0' 
	[nablaStoreWhen] Storing when @=4.000000 
	[nablaFctFill] Now fillinf SRC file
	[nablaFctFill] On va chercher les paramËtres standards pour le src
		[dumpParameterTypeList] number_of_parameters_here+=1
	[nablaFctFill] adding ExtraParameters
	[nablaFctFill] launching dfsForCalls
		[dumpParameterTypeList] number_of_parameters_here+=1
	[nablaFctFill] On avance jusqu'au compound_statement
	[nablaFctFill] prefixEnumerate
	[nablaFctFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=

	[okinaHookDumpEnumerate]		warping=_WARP
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=

	[nablaFctFill] postfixEnumerate
	[nablaFctFill] Now dumping function tokens
		[nablaFunctionParse] TOKEN 'if'
	[nablaVariableFind] looking for 'if' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'GlobalIteration'
	[nablaVariableFind] looking for 'GlobalIteration' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '>='
	[nablaVariableFind] looking for '>=' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'time_steps'
	[nablaFunctionParse] OPTION hit!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '{'
	[nablaVariableFind] looking for '{' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'file'
	[nablaVariableFind] looking for 'file' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'results'
	[nablaVariableFind] looking for 'results' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ','
	[nablaVariableFind] looking for ',' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'plot'
	[nablaVariableFind] looking for 'plot' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'results'
	[nablaVariableFind] looking for 'results' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '<<'
	[nablaVariableFind] looking for '<<' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '"#33 "'
	[nablaVariableFind] looking for '"#33 "' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '<<'
	[nablaVariableFind] looking for '<<' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '"globalNbCells"'
	[nablaVariableFind] looking for '"globalNbCells"' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '<<'
	[nablaVariableFind] looking for '<<' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '" "'
	[nablaVariableFind] looking for '" "' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '<<'
	[nablaVariableFind] looking for '<<' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '"globalNbNodes"'
	[nablaVariableFind] looking for '"globalNbNodes"' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '<<'
	[nablaVariableFind] looking for '<<' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '"\n"'
	[nablaVariableFind] looking for '"\n"' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '/*call*/'
	[nablaFunctionParse] CALL
	[nablaFunctionParse] CALL done
		[nablaFunctionParse] TOKEN 'dumpSolution'
	[nablaVariableFind] looking for 'dumpSolution' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'results'
	[nablaVariableFind] looking for 'results' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '/*args*/'
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'exit'
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '}'
	[nablaVariableFind] looking for '}' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '}'
	[nablaVariableFind] looking for '}' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
	[nablaFctFill] done
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit function_definition

	[nablaFctFill] 
	[nablaFctFill] Looking for fct->rtntp:
	[nablaFctFill] fct->rtntp=Real
	[nablaFctFill] On refait (sic) pour le noeud
	[nablaFctFill] On va chercher le nom de la fonction
	[nablaFctFill] Qui est: 'u0_Test1_for_linear_advection_smooth_data'
	[nablaFctFill] CotÈ UTF-8, on a: 'u0_Test1_for_linear_advection_smooth_data'
	[nablaFctFill] On va chercher la list des paramËtres
	[nablaFctFill] scope=NoGroup region=NoRegion item= type=Real name=u0_Test1_for_linear_advection_smooth_data
	[nablaFctFill] Now fillinf SRC file
	[nablaFctFill] On va chercher les paramËtres standards pour le src
		[dumpParameterTypeList] number_of_parameters_here+=1
		[dumpParameterTypeList] Real
		[dumpParameterTypeList] x
	[nablaFctFill] adding ExtraParameters
	[nablaFctFill] launching dfsForCalls
		[dumpParameterTypeList] number_of_parameters_here+=1
		[dumpParameterTypeList] Real
		[dumpParameterTypeList] x
	[nablaFctFill] On avance jusqu'au compound_statement
	[nablaFctFill] prefixEnumerate
	[nablaFctFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=

	[okinaHookDumpEnumerate]		warping=_WARP
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=

	[nablaFctFill] postfixEnumerate
	[nablaFctFill] Now dumping function tokens
		[nablaFunctionParse] TOKEN 'return'
	[nablaVariableFind] looking for 'return' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'opMul'
	[nablaVariableFind] looking for 'opMul' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'al'
	[nablaFunctionParse] OPTION hit!
		[nablaFunctionParse] TOKEN ','
	[nablaVariableFind] looking for ',' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '/*call*/'
	[nablaFunctionParse] CALL
	[nablaFunctionParse] CALL done
		[nablaFunctionParse] TOKEN 'exp'
	[nablaVariableFind] looking for 'exp' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'opMul'
	[nablaVariableFind] looking for 'opMul' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '-'
	[nablaVariableFind] looking for '-' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'bt'
	[nablaFunctionParse] OPTION hit!
		[nablaFunctionParse] TOKEN ','
	[nablaVariableFind] looking for ',' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'pow'
	[nablaVariableFind] looking for 'pow' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'x'
	[nablaVariableFind] looking for 'x' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ',2.0'
	[nablaVariableFind] looking for ',2.0' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '/*args*/'
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '}'
	[nablaVariableFind] looking for '}' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
	[nablaFctFill] done
	[nablaMiddlendParseAndHook] done
	[nablaMiddlendParseAndHook] rule hit function_definition

	[nablaFctFill] 
	[nablaFctFill] Looking for fct->rtntp:
	[nablaFctFill] fct->rtntp=Real
	[nablaFctFill] On refait (sic) pour le noeud
	[nablaFctFill] On va chercher le nom de la fonction
	[nablaFctFill] Qui est: 'u0_Test2_for_linear_advection_discontinuous_data'
	[nablaFctFill] CotÈ UTF-8, on a: 'u0_Test2_for_linear_advection_discontinuous_data'
	[nablaFctFill] On va chercher la list des paramËtres
	[nablaFctFill] scope=NoGroup region=NoRegion item= type=Real name=u0_Test2_for_linear_advection_discontinuous_data
	[nablaFctFill] Now fillinf SRC file
	[nablaFctFill] On va chercher les paramËtres standards pour le src
		[dumpParameterTypeList] number_of_parameters_here+=1
		[dumpParameterTypeList] Real
		[dumpParameterTypeList] x
	[nablaFctFill] adding ExtraParameters
	[nablaFctFill] launching dfsForCalls
		[dumpParameterTypeList] number_of_parameters_here+=1
		[dumpParameterTypeList] Real
		[dumpParameterTypeList] x
	[nablaFctFill] On avance jusqu'au compound_statement
	[nablaFctFill] prefixEnumerate
	[nablaFctFill] dumpEnumerate
	[okinaHookDumpEnumerate] Preparing:
	[okinaHookDumpEnumerate]		forall=

	[okinaHookDumpEnumerate]		warping=_WARP
	[okinaHookDumpEnumerate] No returnFromArgument
[okinaHookDumpEnumerate] format=

	[nablaFctFill] postfixEnumerate
	[nablaFctFill] Now dumping function tokens
		[nablaFunctionParse] TOKEN 'if'
	[nablaVariableFind] looking for 'if' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'x'
	[nablaVariableFind] looking for 'x' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '<'
	[nablaVariableFind] looking for '<' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '0.3'
	[nablaVariableFind] looking for '0.3' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'return'
	[nablaVariableFind] looking for 'return' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '0.0'
	[nablaVariableFind] looking for '0.0' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'if'
	[nablaVariableFind] looking for 'if' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '('
	[nablaVariableFind] looking for '(' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'x'
	[nablaVariableFind] looking for 'x' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '<'
	[nablaVariableFind] looking for '<' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '0.7'
	[nablaVariableFind] looking for '0.7' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ')'
	[nablaVariableFind] looking for ')' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'return'
	[nablaVariableFind] looking for 'return' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '1.0'
	[nablaVariableFind] looking for '1.0' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN 'return'
	[nablaVariableFind] looking for 'return' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '0.0'
	[nablaVariableFind] looking for '0.0' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN ';'
	[nablaVariableFind] looking for ';' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
		[nablaFunctionParse] TOKEN '}'
	[nablaVariableFind] looking for '}' ?deltat ?time ?coord ?iteration ?u ?unp1 ?dtxp ?dtxm ?dtx Nope!
	[nablaFctFill] done
	[nablaMiddlendParseAndHook] done
[nccOkinaMainVarInit]
	[nccOkina] okinaMesh 1D !
[nccOkinaMainPrefix]
[okinaGenerateVariableDim0] variable coord
[okinaGenerateVariableDim0] variable coord
[okinaGenerateVariableDim0] variable u
[okinaGenerateVariableDim0] variable u
[okinaGenerateVariableDim0] variable unp1
[okinaGenerateVariableDim0] variable unp1
[okinaGenerateVariableDim0] variable dtxp
[okinaGenerateVariableDim0] variable dtxp
[okinaGenerateVariableDim0] variable dtxm
[okinaGenerateVariableDim0] variable dtxm
[okinaGenerateVariableDim0] variable dtx
[okinaGenerateVariableDim0] variable dtx
[nccOkinaMainMeshPrefix]
[nccOkinaMainPreInit]
[nccOkinaMainVarInitCall]
[nccOkinaMain]
	[nablaNumberOfEntryPoints] iniGlobals: whenx=1 @ -5.000000 
	[nablaNumberOfEntryPoints] inidtx: whenx=1 @ -5.000000 
	[nablaNumberOfEntryPoints] ini: whenx=1 @ -4.000000 
	[nablaNumberOfEntryPoints] loop: whenx=1 @ 1.000000 
	[nablaNumberOfEntryPoints] copyResults: whenx=1 @ 2.000000 
	[nablaNumberOfEntryPoints] testForQuit: whenx=1 @ 4.000000 
	[nablaNumberOfEntryPoints] iniGlobals: whenx=1 @ -5.000000 
	[nablaNumberOfEntryPoints] inidtx: whenx=1 @ -5.000000 
	[nablaNumberOfEntryPoints] ini: whenx=1 @ -4.000000 
	[nablaNumberOfEntryPoints] loop: whenx=1 @ 1.000000 
	[nablaNumberOfEntryPoints] copyResults: whenx=1 @ 2.000000 
	[nablaNumberOfEntryPoints] testForQuit: whenx=1 @ 4.000000 
[nablaEntryPointsSort] found 6 entry-points
	[nablaEntryPointsSort] dumping #2: iniGlobals @ -5.000000
	[nablaEntryPointsSort] dumping #3: inidtx @ -5.000000
	[nablaEntryPointsSort] dumping #4: ini @ -4.000000
	[nablaEntryPointsSort] dumping #5: loop @ 1.000000
	[nablaEntryPointsSort] dumping #6: copyResults @ 2.000000
	[nablaEntryPointsSort] dumping #7: testForQuit @ 4.000000
[timeTreeSave] Saving time tree for upwind
[timeTreeSave] timeTreeSaveNodes
[timeTreeSaveNodes] number_of_entry_points=8

	[nccOkinaMain] sorted #0: iniGlobals @ -5.000000 in 'init'
	[nccOkinaMain] sorted #1: inidtx @ -5.000000 in 'init'
	[nccOkinaMain] sorted #2: ini @ -4.000000 in 'init'
	[nccOkinaMain] sorted #4: loop @ 1.000000 in 'compute-loop'
	[nccOkinaMain] sorted #5: copyResults @ 2.000000 in 'compute-loop'
[nccOkinaMainPostInit]
[nccOkinaMainMeshPostfix]
[okinaGenerateVariableDim0] variable coord
[okinaGenerateVariableDim0] variable u
[okinaGenerateVariableDim0] variable unp1
[okinaGenerateVariableDim0] variable dtxp
[okinaGenerateVariableDim0] variable dtxm
[okinaGenerateVariableDim0] variable dtx
[nccOkinaMainPostfix] OKINA_MAIN_POSTFIX
[nccOkinaMainPostfix] okinaSourceMesh
[nccOkinaMainPostfix] NABLA_OK