with ℝ;

ofstream results("results.plot");

// αβγδδδεεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ
// ∀
// ℝℕℤ
// ²³√½⅓¼⅛


// ****************************************************************************
// * Options
// ****************************************************************************
options{
  ℝ LENGTH                    = 1.125;
  ℕ X_EDGE_ELEMS              = 8;
  ℕ Y_EDGE_ELEMS              = 8;
  ℕ Z_EDGE_ELEMS              = 8;
  ℝ xmin = 0.0;
  ℝ xmax = 1.125;
  ℝ π = 4.0*atan(1.0);
  ℝ σ=1.0;
  ℝ Φ=½*(1+√(5));
  ℝ ε=Φ-1.0;
  ℝ α=Φ;
  ℝ β=1.0;
  // Yet required options for backends
  ℝ option_δt_initial = 0.005;
  ℝ option_stoptime =1.0;
  ℕ option_max_iterations = 32768;
};


// **************************************************************************
// * Node Variables
// ****************************************************************************
cells{
  ℝ cP;
  ℝ cp1P;
  ℝ cU;
  ℝ cp1U;
  ℝ center;
};


// ****************************************************************************
// * Cell Variables
// ****************************************************************************
nodes{
  ℝ nP;
  ℝ nU;
};


// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ℝ δx;
};


// ****************************************************************************
// * Initialization Part @ ]-∞,-0.0[
// ****************************************************************************

void iniGlobals(void) @ -5.0{
  δx=(xmax-xmin)/X_EDGE_ELEMS;
  δt=δx;
  printf("\n\t\t\33[7m[iniGlobals] δx=%f\33[m", (double)δx);
  printf("\n\t\t\33[7m[iniGlobals] δt=%f\33[m", (double)δt);
  assert(δt>=0.0);
}

// ****************************************************************************
// * iniCellCenter
// ****************************************************************************
∀ cells void iniCellCenter(void) out (/*node coord,*/ cell center) @ -5.0 {
  center=0.0;
  ∀ node center+=coord;
  center *= ½;
}

∀ cells void inicellP(void) in (cell center) out (cell cP) @ -4.0 {
  cP =  E(0.0,center);
}

∀ cells void iniCellU(void) in (cell center) out (cell cU) @ -4.0 {
  cU = F(0.0,center);
}


// ****************************************************************************
// * Compute loop @ ]+0,+∞[
// ****************************************************************************


void dbgLoop(void) @ 1.0 {
  printf("\n\t\t\33[7m[Loop] #%d, time=%f\33[m", iteration,time);
}

// !!!!!
∀ nodes void flushNodePU(void) @ 1.0{
  nP=nU=0.0;
}

// nP au centre
∀ nodes void computeNodP(void)  /*in (cell center, cell cU)*/  out (node nP) @ 2.0 {
//∀ nodes @ 2.0 {
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  ∀ cell {
    // maille de droite, on ajoute l'invariant de Rieman pour la vp -1
    if (center>coord){
      nP+=cP-cU ;
      // maille de gauche, on ajoute l'invariant de Rieman pour la vp 1
    }else{
      nP+=cP+cU;
    }
  }
  nP*=½;
}

// nU au centre
∀ nodes void computeNodU(void)
  //in (cell center, cell cP)
  out (node nU) @ 2.3 {
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  ∀ cell {
    if (center>coord)
      nU+=cU-cP;
    else
      nU+=cU+cP;
  }
  nU*=½;
}


// nP et nU à 0.0
∀ nodes void outer0Loop1(void) @ 2.4 {
  if (n!=0) continue;
  const ℝ t = time;
  ∀ cell {
    if (c==0) continue;
    nP+=cP-cU;
    nU+=cU-cP;
  }
  nP+=½*(E(t,-½*δx)+F(t,-½*δx));
  nU+=½*(E(t,-½*δx)+F(t,-½*δx));
}


// nP et nU à NABLA_NB_NODES
∀ nodes void outer0Loop2(void) @ 2.45 {
  if (n!=(NABLA_NB_NODES-1)) continue;
  const ℝ t=time;
  ∀ cell {
    if (c==0) continue;
    nP+=cP +cU;
    nU+=cP +cU;
  }
  nP+= ½*(E(t,xmax+½*δx)-F(t,xmax+½*δx));
  nU+=-½*(E(t,xmax+½*δx)+F(t,xmax+½*δx));
}


// cp1P partout
∀ cells void loop1(void) in (cell cP/*, node nP, node nU*/)  @ 2.6 {
  const ℝ δtSx = δt/(δx);
  cp1P = cP;  
  ∀ node {    
    if (coord<center){
      cp1P += δtSx*nU ;        
    }else{
      cp1P += -δtSx*nU ;
    }
  }
}

// cp1U partout 
∀ cells void loop2(void) in (cell cU) @ 2.6 {
  const ℝ δtSx = δt/(δx);
  cp1U = cU-σ*cU*δt;
  ∀ node {
    if (center<coord)
      cp1U += -δtSx*nP;
    else 
      cp1U += δtSx*nP;
  }
}


// Copy results
∀ cells  void copyResults(void) in (cell cP, cell cU) @ 2.7 {
  cP = cp1P;
  cU = cp1U;
 //printf(y"\n\t\t[copyResults] u[%d] = %f", n,u);
}


// ****************************************************************************
// * Test for Quit & Dump Solution Found
// ****************************************************************************
∀ cells dumpSolution @ 3.9 if (time>=(option_stoptime-δt)){
  printf("\n\t[testForQuit] iteration>time_steps, \33[7mdumping\33[m\n");
  results << "\t" << center
          << "\t" << δx
          << "\t" << cP
          << "\t" << cU
          << "\n";
}


void tstForQuit(void) @ 4.0 {
  //printf("\n\t[testForQuit] iteration =%d, time=%f, delta_t=%f", iteration, time,(double)δt);
  if ((time<(option_stoptime-δt))) return;
  exit;
}
