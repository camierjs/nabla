///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): RAMBAUD Alb√©ric                                           //
//                 BUET Christophe - Christophe.Buet@cea.fr                  //
//                 CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñù;

// ****************************************************************************
// * Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÇœÉœÑœÖœÜœáœàœâŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©
// * ‚àÄ ‚Ñù‚Ñï‚Ñ§‚Ñæ ‚àö‚àõ ¬Ω‚Öì¬º‚Öõ ùúï‚Ñµ‚àÇ * ‚ãÖ‚®Ø‚§´‚äó‚®Ç‚äõ ‚àû ‚Å∞¬π¬≤¬≥‚Å±‚Åø‚Å∫‚Åº
// ****************************************************************************

ofstream output("schema1.plot");


// ****************************************************************************
// * Options
// ****************************************************************************
options{
  // Mesh options
  ‚Ñù LENGTH                    = 1.0;
  ‚Ñï X_EDGE_ELEMS              = 8;
  ‚Ñï Y_EDGE_ELEMS              = 1;
  ‚Ñï Z_EDGE_ELEMS              = 1;
  ‚Ñù option_a = 1.0;
  ‚Ñù xmin = 0.0;
  ‚Ñù xmax = 1.0; // A mettre √† jour en mleme temps dans le Makefile.nabla.okina
  ‚Ñï test = 1;
  ‚Ñï test2 = 1;
  ‚Ñù pi =atan(1)*4;  
  ‚Ñï time_steps = 0.0005;
  ‚Ñù final_time = 5.0;
  ‚Ñù sigma=1.0;    
  // Yet required options for Okina 
  ‚Ñù option_Œ¥t_initial = 0.000010;
  ‚Ñù option_stoptime=10.0;//0.2;//10.
  ‚Ñï option_max_iterations = 32768;
  ‚Ñù tau =0.25;    
  ‚Ñù epsilon = 1.0;   
  ‚Ñù CFL =0.4;
};

// **************************************************************************
// * Node Variables
// ****************************************************************************
cells{  
  ‚Ñù cU;
  ‚Ñù cP;
  ‚Ñù cp1P;
  ‚Ñù cp1U;  
  ‚Ñù cT; 
  ‚Ñù cp1T;
  ‚Ñù center;
  ‚Ñù cM;
};

// ****************************************************************************
// * Cell Variables
// ****************************************************************************
nodes{
  ‚Ñù nU;  
  ‚Ñù nP;
  ‚Ñù nM;
};

// ****************************************************************************
// * Global Variables
// ****************************************************************************
global{
  ‚Ñù Œ¥x;
  ‚Ñù Integrale;
  ‚Ñù n_time;
  ‚Ñù iŒ¥x;
  ‚Ñù L2;
  ‚Ñù N1;  
  ‚Ñù Intu;  
  ‚Ñù Intt;  
  ‚Ñù Intp;  
};


// ****************************************************************************
// * Initialization Part @ ]-‚àû,-0.0[
// ****************************************************************************

void iniGlobals(void) @ -5.0{
  Œ¥x=(xmax-xmin)/X_EDGE_ELEMS;
  //Œ¥t=(1-CFL)*(epsilon¬≤/(2*tau))*(log(tau)+log(1+ Œ¥x/epsilon)) + CFL*0.75*epsilon*Œ¥x;
   Œ¥t=epsilon*CFL*Œ¥x;
  iŒ¥x=1./Œ¥x;
  printf("\n\t\t\33[7m[iniGlobals] Œ¥x=%f\33[m", (double)Œ¥x);
  printf("\n\t\t\33[7m[iniGlobals] Œ¥t=%f\33[m", (double)Œ¥t);
  assert(Œ¥t>=0.0);
}

// ****************************************************************************
// * Compute loop @ ]+0,+‚àû[
// ****************************************************************************
void dbgLoop(void) @ 1.0 {
  printf("\n\33[7m[Loop] #%d, time=%f\33[m", iteration,time);
}


// ********************************************************
// cpB1 partout
// ********************************************************
‚àÄ cells void loop1(void)
  in (cell cU, cp1U, cM /*, node nP, node nU*/)  @ 2.6 {
  const ‚Ñù Œ¥tSx = Œ¥t/(epsilon*Œ¥x);
  // Que les termes aux mailles
  cp1U = cU;
  ‚àÄ node {    
    if (coord<center){
      cp1U += (-Œ¥tSx*cM*nU +Œ¥tSx*(nP+ nM*nU));        
      // info()<<"\t\t[loop1] then: cp1P="<<cp1U<<", nP="<<coord;
    }else{
      cp1U += (+Œ¥tSx*cM*nU -Œ¥tSx*(nP +nM*nU)) ;
      //info()<<"\t\t[loop1] then: cp1P="<<cp1U<<", nP="<<coord;
    }
  }
  info()<<"\t\t[loop1] then: cp1P="<<cp1U<<", nP="<<center;
  //if (fabs(cpB1-1.0)>1.e-14){  
  //info()<<"\t[loop1] cB1="<<cpB1 <<" center=" << center;
  //exit;
}//info()<<"\t\t[loop1]  cB1(1)="<<cpB1;
 

// cp1T partout
‚àÄ cells void loop3(void) in (cell cT) @ 2.5 {
  const ‚Ñù e1 =0.5*(1 - exp(-2*tau*Œ¥t/epsilon¬≤));//tau*Œ¥t/(epsilon¬≤+2*tau*Œ¥t);
  const ‚Ñù e2 = exp(-2*tau*Œ¥t);
  cp1T = cT - e1*cT +e1*cP;
  //info()<<"\t\t[loop1]  cT(1)="<<cp1T ;
}


//void exitHere(void)@2.04{exit;}
              
// cB2 partout 
‚àÄ cells void loop2(void)
  in (cell cU, cell cP, cell cM) @ 2.6 {
  const ‚Ñù Œ¥tSx = Œ¥t/(epsilon*Œ¥x);
  const ‚Ñù e1 = 0.5*(1 - exp(-2*tau*Œ¥t/epsilon¬≤));//tau*Œ¥t/(epsilon¬≤+2*tau*Œ¥t);
  const ‚Ñù a=‚àö(0.5 + 0.5*exp(-2*tau*Œ¥t/epsilon¬≤));
  cp1P= cP +e1*(cT-cP) ;
  ‚àÄ node {
    //info()<<"\t[loop2] node="<<n;
    if (center<coord)
      cp1P += -nU*Œ¥t/(Œ¥x);
     else
      cp1P+= nU*Œ¥t/(Œ¥x) ;
  }  
  //cp1P/=(1+e1);
}

// npT partout
/*‚àÄ nodes void loop4(void) in (node cT) @ 2.6 {
  const ‚Ñù e1 = 0.5*(1. -exp(-2*tau*Œ¥t));
  const ‚Ñù e2 = exp(-2*tau*Œ¥t);
  const ‚Ñù e3 =e1/(1-e1) ;
  npT = e2*nT + e3*(nB2-nM*nB1);
  }*/

// Copy results
‚àÄ cells  void copyResults(void)
  in (cell cU, cell cP,cell cT ) @ 2.7 {
  cU = cp1U;
  cP = cp1P;
  cT= cp1T;
 //printf(y"\n\t\t[copyResults] u[%d] = %f", n,u);
}


// ****************************************************************************
// * Test for Quit & Dump Solution Found
// ****************************************************************************
‚àÄ cells void dumpSolution(File results){
  results << "\t" << center
          << "\t" << cU
          << "\t" << cP
          << "\t" << cT
          << "\n";
}

‚àÄ cells void dumpOutput(void) {
  output << n_time
         << "\t|\t" << center
         << "\t|\t" << cU
         << "\t|\t" << cP
         << "\t|\t" << cT
         << "\t|\t" << P_condlimi(center ,n_time)-cP
         << "\t|\t" << U_condlimi(center ,n_time) - cU
         << "\n";
} 

void tstForQuit(void) @ 4.0 {
  printf("\n\t[testForQuit] GlobalIteraution =%d, time=%f, delta_t=%f",
         iteration, time,(double)Œ¥t);
  dumpOutput(NABLA_NB_CELLS_WARP,NABLA_NB_CELLS,&n_time,center,cU,cP,cT);
  output << "\n";
  //file(resultsvstime ,plot);
  //dumpVsTimeSolution(resultsvstime);
  if ((time<(option_stoptime-Œ¥t))) return;
  //if ((iteration==time_steps)){
  {
    file(results,plot);
    printf("\n\t[testForQuit] iteration>time_steps, \33[7mdumping\33[m\n");
    //results << "#33 "<<"globalNbCells"<<" "<<"globalNbNodes"<<"\n";
    dumpSolution(results,NABLA_NB_CELLS_WARP,NABLA_NB_CELLS,center,cU,cP,cT);
  }
  exit;
}


