///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): RAMBAUD Albéric                                           //
//                 BUET Christophe - Christophe.Buet@cea.fr                  //
//                 CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

∀ nodes void flushNodeB(void)@ 1.0{
  nP=nU=0.0;
}


// ********************************************************
// nB1 au centre
// ********************************************************
∀ nodes void computeNodB1(void)
  /*in (cell center, cell cU)*/
  out (node nU) @ 2.0 {
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  const ℝ b= exp(-2*tau*δt/epsilon²);
  const ℝ a=√(0.5 + 0.5*exp(-2*tau*δt/epsilon²));
  const ℝ r=epsilon/(2*epsilon*a+sigma*δx);
  nU=0.0;
  ∀ cell {
    // maille de droite, on ajoute l'invariant de Rieman pour la vp 1
    if (center>coord){
      nU+=a*cU -a²*(cP+cT)+b*cT;            
      // maille de gauche, on ajoute l'invariant de Rieman pour la vp 1
    }else{
      nU += a*cU + a²*(cP+cT)- b*cT ;            
    }
  }
  nU*=r;
  //info()<<"\t[computeNB1] nB1="<<nU;
}



// ********************************************************
// nB2 au centre
// ********************************************************
∀ nodes void computeNodB2(void)
  /*in (cell center, cell cU)*/
  out (node nP) @ 2.1 {
  if (n==0) continue;
  if (n==(NABLA_NB_NODES-1)) continue;
  const ℝ b=exp(-2*tau*δt/epsilon²);
  const ℝ a=√(0.5 + 0.5*exp(-2*tau*δt/epsilon²));
  const ℝ r=epsilon/(2*epsilon*a+sigma*δx);
  nP=0.0;
  ∀ cell {
    // maille de droite, on ajoute l'invariant de Rieman pour la vp 1
    if (center>coord){
      nP+=a²*(cP+cT)-b*cT - a*cU ;
      // maille de gauche, on ajoute l'invariant de Rieman pour la vp 1
    }else{
      nP+= a²*(cP+cT)-b*cT + a*cU ;
    }
  }
  nP*=0.5;
  //info()<<"\t[computeNB1] nB2="<<nB2;
  // info()<<"\t[computeNB1] nT="<<nT;
}


// ********************************************************
// nB1 et nB2 à 0.0
// ********************************************************
∀ nodes void outer0Loop1(void) 
  in (node nU, node nP/*, node nP, node nU*/)
  out (node nU,node nP)@ 2.4 {
  if (n!=0) continue;
  const ℝ b=  exp(-2*tau*δt/epsilon²);
  const ℝ a=√(0.5 + 0.5*exp(-2*tau*δt/epsilon²));
  const ℝ r=epsilon/(2*epsilon*a+sigma*δx);
  ∀ cell {
    if (c==0) continue;
    nU=a*cU - a²*(cP+cT)+b*cT;
    nP=a²*(cP+cT)-b*cT-a*cU ;
  }
  nU+= a*U_condlimi(coord-δx*0.5,n_time) +a²*( P_condlimi(coord-δx*0.5,n_time)+ T_condlimi(coord-δx*0.5)) - b*T_condlimi(coord-δx*0.5);
  nU*=r;
  nP+= a*U_condlimi(coord-δx*0.5,n_time) + a²*(P_condlimi(coord-δx*0.5,n_time) + T_condlimi(coord-δx*0.5)) - b*T_condlimi(coord-δx*0.5);
  nP*=0.5;
  //info()<<"\t[outer0Loop2] node_bbord1="<<nU <<"et "<< nP;
  //info()<<"\t[outer0Loop2] coord="<<coord ;   
}


// ********************************************************
// nP et nU à NABLA_NB_NODES
// ********************************************************
∀ nodes void outer0Loop2(void)
  in (node nU, node nP/*, node nP, node nU*/)
  out (node nU, node nP)@ 2.45 {
  const ℝ b= exp(-2*tau*δt/epsilon²);
  const ℝ a=√(0.5 + 0.5*exp(-2*tau*δt/epsilon²));
  const ℝ r=epsilon/(2*epsilon*a+sigma*δx);
  if (n!=(NABLA_NB_NODES-1)) continue;
  //info()<<"[outer0Loop2] node="<<n;
  ∀ cell {
    if (c==0) continue;
    // info()<<"\t[outer0Loop2] cell="<<c;
    // info()<<"\t[outer0Loop2] center="<<center;
    nU= a*cU + a²*(cP+cT)-b*cT;
    nP= a*cU + a²*(cP+cT)-b*cT;
  }
  nU+= a*U_condlimi(coord+δx*0.5,n_time) -a²*(P_condlimi(coord+δx*0.5,n_time)+T_condlimi(coord+δx*0.5))+b*T_condlimi(coord+δx*0.5); 
  nU*=r;
  nP+= -a*U_condlimi(coord+δx*0.5,n_time)  +a²*(P_condlimi(coord+δx*0.5,n_time)+T_condlimi(coord+δx*0.5))-b*T_condlimi(coord+δx*0.5) ; 
  nP*=0.5;
  //info()<<"\t[outer0Loop2] node_bbord2="<<nU <<"et "<< nP;
  //info()<<"\t[outer0Loop2] coord="<<coord <<"et "<< nB2;
  n_time+=δt;
}
