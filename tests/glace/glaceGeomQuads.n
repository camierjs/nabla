///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
// Calcul des aires orientées des faces
∀ cells void geom_computeSurfaceAndVolume_Quad(void) @ -20.0,23.0 if (option_quads){
  const Real3 fst_edge = coord[2]-coord[0];
  const Real3 snd_edge = coord[3]-coord[1];
  V=½*cross2D(fst_edge,snd_edge);
}


// Calcul des résultantes aux sommets des mailles
∀ cells void geom_computeNormal_Quad(void) @ -20.0,24.0 if (option_quads){
  const Real3 s0=coord[0];
  const Real3 s1=coord[1];
  const Real3 s2=coord[2];
  const Real3 s3=coord[3];
  const Real3 c0 = ½*(s0+s1);
  const Real3 c1 = ½*(s1+s2);
  const Real3 c2 = ½*(s2+s3);
  const Real3 c3 = ½*(s3+s0);
  const Real3 length20 = ½*(c2-c0);
  const Real3 length31 = ½*(c3-c1);
  CQs[0].x = -(length31.y+length20.y);
  CQs[0].y =  (length31.x+length20.x); 
  CQs[0].z = 0.0;
  absCQs[0]=CQs[0].abs();
  CQs[1].x = -(length31.y-length20.y);
  CQs[1].y =  (length31.x-length20.x);
  CQs[1].z = 0.0;
  absCQs[1]=CQs[1].abs();
  CQs[2].x = -(-length31.y-length20.y);
  CQs[2].y =  (-length31.x-length20.x); 
  CQs[2].z = 0.0;
  absCQs[2]=CQs[2].abs();
  CQs[3].x = -(-length31.y+length20.y);
  CQs[3].y =  (-length31.x+length20.x); 
  CQs[3].z = 0.0;
  absCQs[3]=CQs[3].abs();
}
