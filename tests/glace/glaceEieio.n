///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
/*void hydroInit(void) @ -25.0{
  const Integer maxNodePerCell=mesh()->cellFamily()->maxNodePerItem();
  CQs.resize(maxNodePerCell);
  absCQs.resize(maxNodePerCell);
  AQs.resize(maxNodePerCell);
  reconstructed_u.resize(maxNodePerCell);
  reconstructed_p.resize(maxNodePerCell);
  δt=option_δt_ini;
  assert(option_triangles^option_quads);
}
*/
//void eieioM(void)@ -18.9{synchronize(m);}
//void eieioρΕc(void)@ -17.9{synchronize(ρΕ);synchronize(c);}


/*outer faces void applyBoundaryConditionsSymmetries(void) @ 13.1{
  const Real Y_MIN = option_y_min;
  const Real Y_MAX = option_y_max;
  const Real3x3 I = math::matrix3x3Id();
  //const Real3 vector = (coord[1]-coord[0])/(coord[1]-coord[0]).abs();
  foreach node{
    if ((coord.y==Y_MIN)||(coord.y==Y_MAX)){
      //|| (coord.x==X_MIN)||(coord.x==X_MAX))) continue;
      //const Real orientation = (coord[1].abs()>coord[0].abs())?-1.0:1.0;
      const Real orientation = (coord.y==Y_MIN)?-1.0:1.0;
      //const Real3 normal = orientation*Real3(-vector.y,vector.x,0.);
      const Real3 normal = orientation*Real3(0.0,1.0,0.0);
      const Real3x3 nxn = normal⊗normal;
      const Real3x3 P = I-nxn;
      node_u_matrix = node_u_matrix ⊛ P; 
      node_u_matrix = P ⊛ node_u_matrix;
      node_u_matrix += nxn*(node_u_matrix.x.x +
                            node_u_matrix.y.y +
                            node_u_matrix.z.z );
      node_u_second_member = P ⨂ node_u_second_member;
    }
  }
  }*/
//void eieio(void)@ 14.1{synchronize(node_u);}
