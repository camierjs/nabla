///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2015 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
// **********************************************************
// * Conditions aux limites dans le cas 2D Triangles ou Quads
// **********************************************************
∀ outer faces void applyBoundaryConditionsSymmetries(void) @ 13.1 if (option_triangles ||
                                                                    option_quads ||
                                                                    option_hexa){
  const Real Y_MIN = option_y_min;
  const Real Y_MAX = option_y_max;
  const Real3x3 I = matrix3x3Id();
  const Real3 normaleY={0.0,1.0,0.0};
  foreach node{
    if ((coord.y==Y_MIN)||(coord.y==Y_MAX)){
      const Real orientation = (coord.y==Y_MIN)?-1.0:1.0;
      const Real3 normal = orientation*normaleY;
      const Real3x3 nxn = normal⊗normal;
      const Real3x3 P = I-nxn;
      node_u_matrix = node_u_matrix ⊛ P; 
      node_u_matrix = P ⊛ node_u_matrix;
      node_u_matrix += nxn*(node_u_matrix.x.x +
                            node_u_matrix.y.y +
                            node_u_matrix.z.z );
      node_u_second_member = P ⨂ node_u_second_member;
    }
  }
}

∀ outer faces void applyBoundaryConditionsVelocities(void) @ 13.3 if (option_triangles ||
                                                                    option_quads||
                                                                    option_hexa){
  const Real X_MIN = option_x_min;
  const Real X_MAX = option_x_max;
  const Real value = option_u_ini;
  const Real3x3 I = matrix3x3Id();
  if (!(((coord[1].x==X_MIN)∧(coord[0].x==X_MIN)) ||
        ((coord[1].x==X_MAX)∧(coord[0].x==X_MAX)))) continue;
  foreach node{
    node_u_matrix = I;
    node_u_second_member = value;
  }
}


// ************************************************
// * Conditions aux limites dans le cas d'hexaèdres
// ************************************************
inline Real rnd(Real i){
  const Real ε=10.0*__DBL_EPSILON__;
  return round(i/ε)*ε;
}

void pointIt(void){//@ 13.3 {
  //file(allPoints,pnt);
  
  //allPoints<<"{{0.,0.,0.}";
  //allPoints<<"{{{0.,0.,0.},{0.,0.,0.}}";
  //applyBoundaryConditionsSymmetries3DCylinder(allPoints);
  //applyBoundaryConditionsSymmetries3DCylinderHardCodedNodeTangent(allPoints);
  //allPoints<<"}";

  //allPoints<<"{{0.,0.,0.}";
  //applyBoundaryConditionsVelocities3DCylinder(allPoints);
  //allPoints<<"}";
  
  //exit;
}

∀ outer nodes void flushBoundaryConditionsSymmetries3DCylinder(void) @ 13.09 if (option_cylinder){
  node_got_tgt=false;
  node_tangent=0.0;
}


∀ outer nodes void applyBoundaryConditionsSymmetries3DCylinderHardCodedNodeTangent(void) @ 13.1 if (option_cylinder){//File allPoints){//
  const Real3x3 I = matrix3x3Id();
  //foreach node{
    //const Real cx=rnd(coord.x);    const Real cy=rnd(coord.y);    const Real cz=rnd(coord.z);
    node_tangent=Real3(1.0,0.0,0.0);
    //allPoints<<",{{"<<cx<<","<<cy<<","<<cz<<"},{"<<rnd(cx+node_tangent.x)<<","<<rnd(cy+node_tangent.y)<<","<<rnd(cz+node_tangent.z)<<"}}";
    {
      const Real3x3 txt = node_tangent⊗node_tangent;
      const Real3x3 P = txt;
      node_u_matrix = node_u_matrix ⊛ P;
      node_u_matrix = P ⊛ node_u_matrix;
      node_u_matrix += (I-txt)*(node_u_matrix.x.x + node_u_matrix.y.y + node_u_matrix.z.z);
      node_u_second_member = txt ⨂ node_u_second_member;
    }
    //}
}


∀ outer nodes void applyBoundaryConditionsVelocities3DCylinder(void)@ 13.3 if (option_hexa||option_cylinder){//File allPoints){//
  //const Real X_MIN = option_x_min;
  //const Real X_MAX = option_x_max;
  //const Real value = option_u_ini;
  //const Real3x3 I = math::matrix3x3Id();
  //const Real3 normale = ½*(coord[0]-coord[1])⨯(coord[0]-coord[3]);
  //const Real3 Xvector=Real3(1.0,0.0,0.0);
  //const Real dot=fabs(normale⋅Xvector);
  //if (dot==0.0) continue;
  //if (!(((rnd(coord[3].x)<=X_MIN)∧(rnd(coord[2].x)<=X_MIN)∧(rnd(coord[1].x)<=X_MIN)∧(rnd(coord[0].x)<=X_MIN)) || ((rnd(coord[3].x)>=X_MAX)∧(rnd(coord[2].x)>=X_MAX)∧(rnd(coord[1].x)>=X_MAX)∧(rnd(coord[0].x)>=X_MAX)))) continue;
  //info()<<"[applyBoundaryConditionsVelocities3DCylinder] normale="<<normale<<", dot="<<dot;
  //foreach node{
    if (!node_x_min_max) continue;
    //const Real cx=rnd(coord.x);    const Real cy=rnd(coord.y);    const Real cz=rnd(coord.z);
    //allPoints<<",{"<<cx<<","<<cy<<","<<cz<<"}";
    node_u_matrix = matrix3x3Id();
    node_u_second_member = 0.0;
    //}
}


∀ outer faces void applyBoundaryConditionsSymmetries3DCylinder(void) @ 13.1 if (option_cylinder){
  //const Real ε=10.0*__DBL_EPSILON__;
  //const Integer fid=uid;
  const Real3x3 I = matrix3x3Id();
  const Real3 Xvector=Real3(1.0,0.0,0.0);
  //const Real3 center = ¼*(coord[0]+coord[1]+coord[2]+coord[3]);
  //const Real3 normale = ½*(coord[0]-center)⨯(coord[3]-center);
  const Real3 normale = ½*(coord[0]-coord[1])⨯(coord[0]-coord[3]);
  // Si on est pas un noeud sur le cylindre (pas xmin ou xmax), on continue
  //if (rnd(normale.x)!=0.0) continue;
  //info()<<"Face #"<<fid;
  // On revient quatre fois par noeuds afin de récupérer les deux vecteurs
  foreach node{
    //const Real rayon = 1.0;//½*(option_y_max-option_y_min);
    //const Real r=√(coord.y²+coord.z²);
    //if (r>rayon) info()<<"\t\33[33m[applyBoundaryConditionsSymmetries3DCylinder] r="<<r<<"!\33[m";
    //assert(r<=rayon);
    // Si on est pas un noeud du bord, on continue
    // Noeuds des faces du bords, pas besoin de filtrer via le rayon (!test 'exact'!)
    // if (r<rayon) continue;
    {
      const Real3 on = normale;
      //if (norm(on)!=1.0){info()<<"norm(on)!=1.0: "<<norm(on);}
      //assert(norm(on)==1.0);
      //const Real cx=rnd(coord.x);      const Real cy=rnd(coord.y);      const Real cz=rnd(coord.z);
      //const Real nx=rnd(on.x); const Real ny=rnd(on.y); const Real nz=rnd(on.z);
      // Premier passage, on copie 'on'
      if (!node_got_tgt && norm(node_tangent)==0.0){ node_tangent=on; continue;}
      // Nième passe, on regarde si on a un vecteur différent
      if (!node_got_tgt && norm(node_tangent)!=0.0){
        // S'ils ne sont pas identiques, on utilise le nouveau 'on'
        if (norm(node_tangent⨯on)!=0.0){
          node_tangent=node_tangent⨯on;
          node_tangent*=1./norm(node_tangent);
          node_tangent*=((node_tangent⋅Xvector)<0.)?-1.:1.;
          node_got_tgt=true;
          //info()<<"norm(on)="<<norm(on);
          //if (rnd(norm(node_tangent))!=1.0){info()<<"norm(node_tangent)!=1.0: "<<norm(node_tangent);}
          //assert(norm(node_tangent)==1.0);
          //info()<<"\tnode_tangent="<<node_tangent;
          //allPoints<<",{{"<<cx<<","<<cy<<","<<cz<<"},{"<<rnd(cx+node_tangent.x)<<","<<rnd(cy+node_tangent.y)<<","<<rnd(cz+node_tangent.z)<<"}}";
          {
            const Real3x3 txt = node_tangent⊗node_tangent;
            const Real3x3 P = txt;
            node_u_matrix = node_u_matrix ⊛ P;
            node_u_matrix = P ⊛ node_u_matrix;
            node_u_matrix += (I-txt)*(node_u_matrix.x.x + node_u_matrix.y.y + node_u_matrix.z.z );
            node_u_second_member = txt ⨂ node_u_second_member;
          }
        }else{
          //info()<<"\t\33[33m[applyBoundaryConditionsSymmetries3DCylinder] else!\33[m";
          node_tangent=on;
        }
      }
    }
  }
}


∀ outer faces void applyBoundaryConditionsSymmetries3DHexa(void) @ 13.1 if (option_hexa){
  const Real ε=10.0*__DBL_EPSILON__;
  const Real3x3 I = matrix3x3Id();
  const Real3 center = ¼*(coord[0]+coord[1]+coord[2]+coord[3]);
  const Real3 cntryz = Real3(0.0,center.y,center.z);
  const Real3 normale = ½*(coord[0]-center)⨯(coord[3]-center);
  foreach node{
    //const Real rayon = ½*(option_y_max-option_y_min);
    //const Real r=√(coord.y²+coord.z²);
    //assert(r<=rayon);
    // Si on est pas un noeud du bord, on continue
    // Noeuds des faces du bords, pas besoin de filtrer via le rayon (!test 'exact'!)
    // if (r<rayon) continue;
    // Si on est pas un noeud sur le cylindre (pas xmin ou xmax), on continue
    if (round(normale.x/ε)*ε!=0.0) continue;
    // Si on l'a déjà traité, on continue
    //if (node_tag) continue;
    //node_tag=true;
    {
      const Real orientation = ((normale⋅cntryz)<0.0)?-1.0:1.0;
      const Real3 on = orientation*normale/norm(normale);
      const Real3x3 nxn = on⊗on;
      const Real3x3 P = I-nxn;            // Matrice de projection
      //const Real cx=round(coord.x/ε)*ε;
      //const Real cy=round(coord.y/ε)*ε;
      //const Real cz=round(coord.z/ε)*ε;
      //const Real nx=round(on.x/ε)*ε;
      //const Real ny=round(on.y/ε)*ε;
      //const Real nz=round(on.z/ε)*ε;
      //allPoints<<",{"<<round(coord.x/ε)*ε<<","<<round(coord.y/ε)*ε<<","<<round(coord.z/ε)*ε<<"}";
      //allPoints<<",{{"<<cx<<","<<cy<<","<<cz<<"},{"<<(cx+nx)<<","<<(cy+ny)<<","<<(cz+nz)<<"}}";
      //assert(round(normale.x/ε)*ε==0.0 || (round(normale.y/ε)*ε==0.0&&round(normale.z/ε)*ε==0.0));
      node_u_matrix = node_u_matrix ⊛ P;  // ⊛ = matrixProduct
      node_u_matrix = P ⊛ node_u_matrix;  // ⊛ = matrixProduct
      node_u_matrix += nxn*(node_u_matrix.x.x + node_u_matrix.y.y + node_u_matrix.z.z );
      node_u_second_member = P ⨂ node_u_second_member; // ⨂ = prodTensVec
      //node_u_matrix.z=Real3(0.,0.,1.);
      //node_u_second_member.z=0.0;
    }
  }
}


/*outer faces void temporalSchemeBoundaryNodesVelocity(void) @ 14.1 if (option_hexa){
  const Real ε=10.0*__DBL_EPSILON__;
  const Real3 center = ¼*(coord[0]+coord[1]+coord[2]+coord[3]);
  const Real3 cntryz = Real3(0.0,center.y,center.z);
  const Real3 normale = ½*(coord[0]-center)⨯(coord[3]-center);
  foreach node{
    // Si on est pas un noeud du bord, on continue
    // Noeuds des faces du bords, pas besoin de filtrer via le rayon (!test 'exact'!)
    // if (r<rayon) continue;
    // Si on est pas un noeud sur le cylindre (pas xmin ou xmax), on continue
    if (round(normale.x/ε)*ε!=0.0) continue;
    node_u.z = 0.0;
  }
  }*/
