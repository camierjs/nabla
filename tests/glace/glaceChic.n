///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

/*faces void spatialSchemeChicComputeFaceNormals2D(void) @ 8.9 if (option_chic && (option_quads||option_triangles)){
  Real3 t = coord[1]-coord[0];
  Real3 nrml=Real3(-½*t.y, ½*t.x, 0.);
  face_normales[0] = nrml;
  face_normales[1] = nrml;
  }
*/

/*faces void spatialSchemeChicComputeFaceNormals3D(void)
  @ 8.9 if (option_chic && (option_hexa||option_cylinder)){
  Real3 X[8];
  Real3 face_center=Real3(0.,0.,0.);
  // Recopie des coordonnées locales
  foreach node X[n] = coord;
  // Calcul du centre de la face
  foreach node face_center+=coord;
  face_center*=1./nbNode;
  // Calcul des aires orientées des triangles
  foreach node{
    const Real3 x0 = X[#];
    const Real3 x1 = X[(#+1)%nbNode];
    const Real3 xg = face_center;
    faces_oriented_areas[#] = ½*((x0-xg)⨯(x1-xg));
  }
  // Calcul des normales aux sommets
  foreach node{
    face_normales[(#+1)%nbNode]=½*(faces_oriented_areas[#] + faces_oriented_areas[(#+1)%nbNode]);
  }
 }
*/
/*int loopOnThisFaceToFindTheNode(Face fc, int node_uid){
  int i=0;
  foreach fc node{
    if (node_uid==nfc->uniqueId()) break;
    i+=1;
  }
  if (i==4) fatal("loopOnThisFaceToFindTheNode");
  return i;
  }*/

/*cells void temporalScheme_spatialScheme_CHIC_computeAQsMatrices(void) @ 9.0 if (option_chic){
  //const Real ρc = λ*ρ*c;
  Real3x3 As[8];
  //Integer cell_node_uid[8];

  foreach node{
    //cell_node_uid[#]=uid;
    //As[#]=0.0;
    }
  
  foreach face{
    //const Real3 normale[8];
    //node_number=loopOnThisFaceToFindTheNode(f,);
    //normale[0]=face_normales[0];
    
    foreach node{
      Integer node_number=-1;
      for(int i=0;i<8;i++){
        if (cell_node_uid[i]!=uid)continue;
        node_number=i;
        break;
      }
      {
        Real3x3 A = As[node_number];
        const Real3 n = normale[i];
        const Real n_lenght = norm(n);
        if (n_lenght > 0.0) {
          Real3x3 mat_elem = math::prodTens(n,n);
          mat_elem *= ρc/n_lenght;
          A += mat_elem;
        }
      }
      }
  }
}
*/
