#include "assert.h"
 
// Options Hydro-Glace Euler/Sans reconstruction
options{
  Real Œ≥ = 1.4;
  Bool option_test_sod = true;  
  Bool option_quads = false;  
  Bool option_triangles = true;
  Real option_x_max = 1.0;
  Real option_y_max = 0.1;
  Real option_Œ¥t_ini = 0.0001;
  Real option_Œ¥t_min = 1e-12;
  Real option_Œ¥t_max = 0.01;
  Real option_Œ¥t_end = 0.01;
  Real option_Œ¥t_control = 0.9;            // Contr√¥le du pas de temps hydrodynamique
  Real option_Œ¥t_min_variation = 0.99;     // D√©croissance maximale tol√©r√©e du pas de temps
  Real option_Œ¥t_max_variation = 0.10;     // Amplitude maximale de croissance du pas de temps
  Bool option_Œ¥t_last_exact = true;
  Real option_ini_zg_œÅ = 1.0;
  Real option_ini_zd_œÅ = 0.125;
  Real option_ini_zg_p = 1.0; 
  Real option_ini_zd_p = 0.1;
  Real option_u_ini = 0.0;
};

// D√©claration des variables aux noeuds
nodes{
  Real3   node_u;                          // Vitesse nodale du maillage
  Real3x3 node_u_matrix;                   // Matrice aux sommets pour le calcul de la vitesse
  Real3   node_u_second_member;            // Second membre aux sommets pour le calcul de la vitesse
};

// D√©claration des variables aux mailles
cells{
  Real m;                                  // Masse
  Real V;                                  // Volume des mailles
  Real œÅ;                                  // Densit√©s
  Real p;                                  // Pression
  Real3 u;                                 // Vitesse moyenne
  Real c;
  Real S;                                  // Surface de la maille
  Real glace_Œ¥t;
  Real absCQs[nodes];
  Real3 CQs[nodes];                        // R√©sultantes aux sommets
  Real3x3 AQs[nodes];                      // Matrices de contributions aux sommets
  Real œÅŒï;                                 // √ânergie massique
  Real ŒπŒï;                                 // √ânergie interne
  Real3 reconstructed_u[nodes];            // Tableau des vitesses reconstruites
  Real reconstructed_p[nodes];             // Tableau des pressions reconstruites
  Real3 momentum_fluxes_Œ£;
  Real total_energy_fluxes_Œ£;
  Real Œª;                                  // Œª g√©om√©trique utilis√© pour retrouver Godunov 1D
};

// ****************************************************************************
// * Partie d'initialisation ]-‚àû,-0.0[
// ****************************************************************************

void hydroInit(void) @ -25.0{
  const Integer maxNodePerCell=option_triangles?3:4;//mesh()->cellFamily()->maxNodePerItem();
  //info()<<"[1;32m[hydroInit] maxNodePerCell="<<maxNodePerCell<<"[0m";
  CQs.resize(maxNodePerCell);
  absCQs.resize(maxNodePerCell);
  AQs.resize(maxNodePerCell);
  reconstructed_u.resize(maxNodePerCell);
  reconstructed_p.resize(maxNodePerCell);
  Œ¥t=option_Œ¥t_ini;
  assert(option_triangles^option_quads);
}

cells void cellHydroMaterialInitZone(void) @ -25.0{
  Real3 centre; 
  Œª=1.0;
  foreach node centre+=coord;
  centre/=nbNode;
  // On regarde si le centre de la maille est √† G ou D de la fronti√®re
  if ((option_test_sod && (coord[0].x < 0.5))
      ||(!option_test_sod && (centre.abs() < 0.5))){
    œÅ=option_ini_zg_œÅ;
    p=option_ini_zg_p;
  }else{
    œÅ=option_ini_zd_œÅ;
    p=option_ini_zd_p;
  }
}

cells void cellMassCompute(void) @ -19.0 {
  m = œÅ*V;
}
//void eieioM(void)@ -18.9{synchronize(m);}

cells void iniEOS(void) @ -18.0{
  œÅŒï = p/((Œ≥-1.0)*œÅ);
}
//void eieioœÅŒïc(void)@ -17.9{synchronize(œÅŒï);synchronize(c);}

// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+‚àû[ 
// ****************************************************************************

cells void temporalScheme_spatialScheme_computeAQsMatrices(void) @ 9.0{ // 18%
  const Real œÅc = Œª*œÅ*c;
  foreach node{
    AQs = CQs‚äóCQs;
    AQs *= œÅc/absCQs;
  }
}

cells void temporalSchemeReconstructPressure(void) @ 10.0{
  foreach node reconstructed_p=p;
}

cells void temporalSchemeReconstructVelocity(void) @ 10.0{
  foreach node reconstructed_u=u;
}

nodes void temporalSchemeIniMatricesAndSecondMember(void) @ 11.0{
  node_u_matrix=Real3x3();
  // .Z √† mettre √† 1.0 dans le cas 2D!
  node_u_matrix.z.z=1.0; // .Z √† mettre √† 0.0 dans le cas 3D!
  node_u_second_member=0.0;
}

cells void temporalSchemeAssembleMatricesAndSecondMember(void) @ 12.0{ // 16%
  foreach node{
    const Real3x3 local_matrix = AQs;
    node_u_matrix += local_matrix;
    node_u_second_member += local_matrix ‚®Ç reconstructed_u;
    node_u_second_member += CQs*reconstructed_p;
  }
}

outer faces void applyBoundaryConditionsSymmetries(void) @ 13.1{
  const Real Y_MIN = 0.0;
  const Real Y_MAX = option_y_max;
  const Real3x3 I = matrix3x3Id();
  const Real3 normaleY={0.0,1.0,0.0};
  //const Real3 vector = (coord[1]-coord[0])/(coord[1]-coord[0]).abs();
  foreach node{
    if ((coord.y==Y_MIN)||(coord.y==Y_MAX)){
      //|| (coord.x==X_MIN)||(coord.x==X_MAX))) continue;
      //const Real orientation = (coord[1].abs()>coord[0].abs())?-1.0:1.0;
      const Real orientation = (coord.y==Y_MIN)?-1.0:1.0;
      //const Real3 normal = orientation*Real3(-vector.y,vector.x,0.);
      const Real3 normal = orientation*normaleY;
      const Real3x3 nxn = normal‚äónormal;
      const Real3x3 P = I-nxn;
      node_u_matrix = node_u_matrix ‚äõ P; 
      node_u_matrix = P ‚äõ node_u_matrix;
      node_u_matrix += nxn*(node_u_matrix.x.x +
                            node_u_matrix.y.y +
                            node_u_matrix.z.z );
      node_u_second_member = P ‚®Ç node_u_second_member;
    }
  }
}

outer faces void applyBoundaryConditionsVelocities(void) @ 13.3{
  const Real X_MIN = 0.0;
  const Real X_MAX = option_x_max;
  const Real value = option_u_ini;
  const Real3x3 I = matrix3x3Id();
  if (!(((coord[1].x==X_MIN)‚àß(coord[0].x==X_MIN)) ||
        ((coord[1].x==X_MAX)‚àß(coord[0].x==X_MAX)))) continue;
  foreach node{
    node_u_matrix = I;
    node_u_second_member = value;
  }
}
void eieioNode_u_matrix_second_member(void)@ 13.4{
  synchronize(node_u_matrix);
  synchronize(node_u_second_member);
}

nodes void temporalSchemeComputeNodesVelocity(void) @ 14.0{ // 11%
  const Real determinent = matrixDeterminant(node_u_matrix);
  node_u_matrix = inverseMatrix(node_u_matrix, determinent);
  node_u = node_u_matrix ‚®Ç node_u_second_member;
  node_u.z=0.0;
}

//void eieio(void)@ 14.1{synchronize(node_u);}

cells void temporalSchemeIniFluxesSum(void) @ 15.0{
  momentum_fluxes_Œ£=total_energy_fluxes_Œ£=0.0;
}
cells void temporalSchemeComputeStandardFluxesSum(void) @ 16.0{ // 14%
  foreach node{
    const register Real3 Œîu = reconstructed_u-node_u;
    register Real3 FQs = AQs ‚®Ç Œîu;
    FQs += reconstructed_p*CQs;
    momentum_fluxes_Œ£ -= FQs;
    total_energy_fluxes_Œ£ -= FQs‚ãÖnode_u;
  }
}

cells void temporalSchemeApplyFluxesStandard(void) @ 19.0{
  u += Œ¥t*momentum_fluxes_Œ£/m;
  œÅŒï += Œ¥t*total_energy_fluxes_Œ£/m;
}

nodes void temporalSchemeMoveNodes(void) @ 22.0{
  coord += Œ¥t*node_u;
}

cells void updatePhysicalDensity(void)
  in (cell m, cell V) out (cell œÅ) @ 26.0{
  œÅ = m/V;
}

cells void computeTotalInternalEnergyFromTotalEnergy(void) @ -16.0,26.0{
  ŒπŒï = œÅŒï-¬Ω*u.abs2();
}

cells void updateTotalPressure(void) @ 27.0{
  p=(Œ≥-1.0)*œÅ*ŒπŒï;
}

cells void computeTotalSoundSpeed(void) @ -18.0,28.0{
  c=‚àö(Œ≥*p/œÅ);
}

cells Real hydroTimeStepCtrlCells(Real local_Œ¥t){ // 8%
  Real Œ£ljr=0.0;
  foreach node Œ£ljr+=absCQs;
  glace_Œ¥t=2.0*Œª*V/(c*Œ£ljr);
  if(glace_Œ¥t<local_Œ¥t)
    local_Œ¥t = min(local_Œ¥t,glace_Œ¥t);
  return local_Œ¥t;
}
void hydroTimeStepCtrl(void) @ 35.0{
  Real local_Œ¥t=hydroTimeStepCtrlCells(MAXFLOAT);
  Real new_Œ¥t=option_Œ¥t_control*mpi_reduce(ReduceMin, local_Œ¥t);
  { // on calcule les variations min et max autoris√©es
    const Real max_time_step = (1.0+option_Œ¥t_max_variation)*Œ¥t;
    const Real min_time_step = (1.0-option_Œ¥t_min_variation)*Œ¥t;
    if (new_Œ¥t > max_time_step) new_Œ¥t=max_time_step;
    if (new_Œ¥t < min_time_step) new_Œ¥t=min_time_step;
  }
  new_Œ¥t = min(new_Œ¥t, option_Œ¥t_max);
  new_Œ¥t = max(new_Œ¥t, option_Œ¥t_min);
  // le dernier calcul se fait exactement au temps final
  if (option_Œ¥t_last_exact && ((time + new_Œ¥t) > option_Œ¥t_end)) 
      new_Œ¥t = option_Œ¥t_end - time;
  if ((time>=option_Œ¥t_end) || (new_Œ¥t==0.0)) exit;
  Œ¥t=new_Œ¥t;
  info()<<"[1;32m final Œ¥t="<<Œ¥t<<"[0m";
}

// Calcul des aires orient√©es des faces
cells void geom_computeSurfaceAndVolume_Triangle(void) @ -20.0,23.0 if (option_triangles){
  const Real3 fst_edge = coord[2]-coord[0];
  const Real3 snd_edge = coord[0]-coord[1];
  S=V=¬Ω*cross2D(fst_edge,snd_edge);
}
cells void geom_computeSurfaceAndVolume_Quad(void) @ -20.0,23.0 if (option_quads){
  const Real3 fst_edge = coord[2]-coord[0];
  const Real3 snd_edge = coord[3]-coord[1];
  S=V=¬Ω*cross2D(fst_edge,snd_edge);
}

// Calcul des r√©sultantes aux sommets des mailles
cells void geom_computeNormal_Triangle(void) @ -20.0,24.0 if (option_triangles){
  const register Real3 s0=coord[0];
  const register Real3 s1=coord[1];
  const register Real3 s2=coord[2];
  const register Real3 c0 = ¬Ω*(s0+s1);
  const register Real3 c1 = ¬Ω*(s1+s2);
  const register Real3 c2 = ¬Ω*(s2+s0);
  const register Real3 c3 = s0;
  const register Real3 length20 = ¬Ω*(c2-c0);
  const register Real3 length31 = ¬Ω*(c3-c1);
  //info()<<"[1;32m[geom_computeNormal_Triangle] #"<<uid<<"[0m";
  CQs[0].x = -(2.0*length20.y);
  CQs[0].y =  (2.0*length20.x);
  CQs[0].z = 0.0;
  absCQs[0]=CQs[0].abs();
  CQs[1].x = -(length31.y-length20.y);
  CQs[1].y =  (length31.x-length20.x); 
  CQs[1].z = 0.0;
  absCQs[1]=CQs[1].abs();
  CQs[2].x = -(-length31.y-length20.y);
  CQs[2].y =  (-length31.x-length20.x); 
  CQs[2].z = 0.0;
  absCQs[2]=CQs[2].abs();
}
cells void geom_computeNormal_Quad(void) @ -20.0,24.0 if (option_quads){
  const register Real3 s0=coord[0];
  const register Real3 s1=coord[1];
  const register Real3 s2=coord[2];
  const register Real3 s3=coord[3];
  const register Real3 c0 = ¬Ω*(s0+s1);
  const register Real3 c1 = ¬Ω*(s1+s2);
  const register Real3 c2 = ¬Ω*(s2+s3);
  const register Real3 c3 = ¬Ω*(s3+s0);
  const register Real3 length20 = ¬Ω*(c2-c0);
  const register Real3 length31 = ¬Ω*(c3-c1);
  CQs[0].x = -(length31.y+length20.y);
  CQs[0].y =  (length31.x+length20.x); 
  CQs[0].z = 0.0;
  absCQs[0]=CQs[0].abs();
  CQs[1].x = -(length31.y-length20.y);
  CQs[1].y =  (length31.x-length20.x);
  CQs[1].z = 0.0;
  absCQs[1]=CQs[1].abs();
  CQs[2].x = -(-length31.y-length20.y);
  CQs[2].y =  (-length31.x-length20.x); 
  CQs[2].z = 0.0;
  absCQs[2]=CQs[2].abs();
  CQs[3].x = -(-length31.y+length20.y);
  CQs[3].y =  (-length31.x+length20.x); 
  CQs[3].z = 0.0;
  absCQs[3]=CQs[3].abs();
}
