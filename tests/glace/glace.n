///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
#include "assert.h"

// Options Hydro-Glace Euler/Sans reconstruction
options{
  Bool option_glace = true;
  Bool option_chic = false;
  Real γ = 1.4;
  Bool option_test_sod = true;  
  Bool option_quads = false;  
  Bool option_triangles = false;
  Bool option_hexa = true;
  Bool option_cylinder = false;
  Real option_x_interface = 0.5;
  Real option_x_min = 0.0;
  Real option_y_min = 0.0;
  Real option_z_min = 0.0;
  Real option_x_max = 1.0;
  Real option_y_max = 1.0;
  Real option_z_max = 1.0;
  Real option_δt_ini = 0.0001;
  Real option_δt_min = 1e-12;
  Real option_δt_max = 0.01;
  Real option_δt_end = 0.01;
  Real option_δt_control = 0.9;            // Contrôle du pas de temps hydrodynamique
  Real option_δt_min_variation = 0.99;     // Décroissance maximale tolérée du pas de temps
  Real option_δt_max_variation = 0.10;     // Amplitude maximale de croissance du pas de temps
  Bool option_δt_last_exact = true;
  Integer option_max_iterations = 1024;
  Real option_ini_zg_ρ = 1.0;
  Real option_ini_zd_ρ = 0.125;
  Real option_ini_zg_p = 1.0; 
  Real option_ini_zd_p = 0.1;
  Real option_u_ini = 0.0;
};

// Déclaration des variables aux faces
faces{
  Real3 face_normales[nodes];               // Pour Chic
  Real3 faces_oriented_areas[nodes];
};

// Déclaration des variables aux noeuds
nodes{
  Bool    node_x_min_max;
  Bool    node_got_tgt;
  Real3   node_tangent;
  Real3   node_u;                          // Vitesse nodale du maillage
  Real3x3 node_u_matrix;                   // Matrice aux sommets pour le calcul de la vitesse
  Real3   node_u_second_member;            // Second membre aux sommets pour le calcul de la vitesse
};

// Déclaration des variables aux mailles
cells{  
  Real ZG;                                 // Group ZG
  Real ZD;                                 // Group ZD
  Real m;                                  // Masse
  Real V;                                  // Volume des mailles
  Real ρ;                                  // Densités
  Real p;                                  // Pression
  Real3 u;                                 // Vitesse moyenne
  Real c;
  //Real S;                                  // Surface de la maille
  Real glace_δt;
  Real absCQs[nodes];
  Real3 CQs[nodes];                        // Résultantes aux sommets
  Real3x3 AQs[nodes];                      // Matrices de contributions aux sommets
  Real ρΕ;                                 // Énergie massique
  Real ιΕ;                                 // Énergie interne
  Real3 reconstructed_u[nodes];            // Tableau des vitesses reconstruites
  Real reconstructed_p[nodes];             // Tableau des pressions reconstruites
  Real3 momentum_fluxes_Σ;
  Real total_energy_fluxes_Σ;
  Real λ;                                  // λ géométrique utilisé pour retrouver Godunov 1D
};


// ****************************************************************************
// * Globals
// ****************************************************************************
global{
  ℝ global_δt;
};


// ****************************************************************************
// * Partie d'initialisation ]-∞,-0.0[
// ****************************************************************************

hydroInit @ -25.0{
  δt=option_δt_ini;
  assert(option_triangles^option_quads^option_hexa^option_cylinder);
}

∀ cells cellHydroMaterialInitZone @ -25.0{
  Real3 centre; 
  λ=1.0;
  foreach node centre+=coord;
  centre/=nbNode;
  // On regarde si le centre de la maille est à G ou D de la frontière
  if ((option_test_sod && (centre.x < option_x_interface))
      ||(!option_test_sod && (centre.abs() < option_x_interface))){
    ρ=option_ini_zg_ρ;
    p=option_ini_zg_p;
    ZG=p;
  }else{
    ρ=option_ini_zd_ρ;
    p=option_ini_zd_p;
    ZD=p;
  }
}

∀ cells cellIniMassCompute @ -19.0 {
  c=0.0;
  u = 0.0;
  m = ρ*V;
}

∀ cells iniEOS @ -18.0{
  ρΕ = p/((γ-1.0)*ρ);
}

∀ nodes flushNodeGroups @ -18.0{
  //node_u=0;
  node_x_min_max=false;
}

∀ outer nodes iniNodeGroups @ -17.0{
  //if (!(coord.x==option_x_min || coord.x==option_x_max)) continue;
  if (coord.x<=(option_x_min+0.01) || coord.x>=(option_x_max-0.01))
    node_x_min_max=true;
}

// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+∞[ 
// ****************************************************************************

∀ cells temporalScheme_spatialScheme_GLACE_computeAQsMatrices @ 9.0 if (option_glace){ // 18%
  const Real ρc = λ*ρ*c;
  foreach node{
    AQs = CQs⊗CQs;
    AQs *= ρc/absCQs;
  }
}
∀ cells temporalSchemeReconstructPressure @ 10.0{
  foreach node reconstructed_p=p;
}

∀ cells temporalSchemeReconstructVelocity @ 10.0{
  foreach node reconstructed_u=u;
}

∀ nodes temporalSchemeIniMatricesAndSecondMember @ 11.0{
  node_u_matrix=Real3x3();
//#warning 3D Real3(0,0,1));
  //Real3(0,0,1));
  node_u_second_member=0.0;//Real3(0,0,0);
}

∀ cells temporalSchemeAssembleMatricesAndSecondMember @ 12.0{ // 16%
  foreach node{
    const Real3x3 local_matrix = AQs;
    node_u_matrix += local_matrix;
    node_u_second_member += local_matrix ⨂ reconstructed_u;
    node_u_second_member += CQs*reconstructed_p;
  }
}

eieioNode_u_matrix_second_member @ 13.4{
  synchronize(node_u_matrix);
  synchronize(node_u_second_member);
}

∀ nodes temporalSchemeComputeNodesVelocity @ 14.0{ // 11%
  const Real determinent = matrixDeterminant(node_u_matrix);
  node_u_matrix = inverseMatrix(node_u_matrix, determinent);
  node_u = node_u_matrix ⨂ node_u_second_member;
//#warning 3D node_u.z=0.0;
  //node_u.z=0.0;
}
  
∀ cells temporalSchemeIniFluxesSum @ 15.0{
  momentum_fluxes_Σ=total_energy_fluxes_Σ=0.0;
}
∀ cells temporalSchemeComputeStandardFluxesSum @ 16.0{ // 14%
  foreach node{
    const Real3 Δu = reconstructed_u-node_u;
    Real3 FQs = AQs ⨂ Δu;
    FQs += reconstructed_p*CQs;
    momentum_fluxes_Σ -= FQs;
    total_energy_fluxes_Σ -= FQs⋅node_u;
  }
}

∀ cells temporalSchemeApplyFluxesStandard @ 19.0{
  u += δt*momentum_fluxes_Σ/m;
  ρΕ += δt*total_energy_fluxes_Σ/m;
}

∀ nodes temporalSchemeMoveNodes @ 22.0{
  coord += δt*node_u;
}
/*#warning Still ReMaxMin
nodes void temporalSchemeMoveNodesReMaxMin(void) @ 23.0{
  if (coord.x<=option_x_min) coord.x=option_x_min;
  if (coord.x>=option_x_max) coord.x=option_x_max;
  }*/

∀ cells updatePhysicalDensity @ 26.0{
  ρ = m/V;
}

∀ cells computeTotalInternalEnergyFromTotalEnergy @ -16.0,26.0{
  ιΕ = ρΕ-½*u.abs2();
}

∀ cells updateTotalPressure @ 27.0{
  p=(γ-1.0)*ρ*ιΕ;
}

∀ cells updateTotalPressureZgZd @ 28.0{
  Real3 centre; 
  ∀ node centre+=coord;
  centre/=nbNode;
  // On regarde si le centre de la maille est à G ou D de la frontière
  if ((option_test_sod && (centre.x < option_x_interface))
      ||(!option_test_sod && (centre.abs() < option_x_interface))){
    ZG=p;
  }else{
    ZD=p;
  }
}

∀ cells computeTotalSoundSpeed @ -18.0,28.0{
  c=√(γ*p/ρ);
}

// Calcul du δt par maille
∀ cells hydroTimeStepCtrlCells @ 30.0{ // 8%
  Real Σljr=0.0;
  ∀ node Σljr+=absCQs;
  glace_δt=2.0*λ*V/(c*Σljr);
}

// Réduction min vers le global_δt
∀ cells global_δt <?= glace_δt @ 31.0;

hydroTimeStepCtrl @ 35.0{
  Real new_δt=option_δt_control*global_δt;
  // on calcule les variations min et max autorisées
  const Real max_time_step = (1.0+option_δt_max_variation)*δt;
  const Real min_time_step = (1.0-option_δt_min_variation)*δt;
  if (new_δt > max_time_step) new_δt=max_time_step;
  if (new_δt < min_time_step) new_δt=min_time_step;
  new_δt = min(new_δt, option_δt_max);
  new_δt = max(new_δt, option_δt_min);
  // le dernier calcul se fait exactement au temps final
  if (option_δt_last_exact && ((time + new_δt) > option_δt_end)) 
      new_δt = option_δt_end - time;
  if ((time>=option_δt_end) || (new_δt==0.0)) exit;
  δt=new_δt;
  info()<<"[1;32m final δt="<<δt<<"[0m";
  if (option_max_iterations!=0 && GlobalIteration >= option_max_iterations) exit;
}
