///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): RAMBAUD Albéric                                           //
//                 BUET Christophe - Christophe.Buet@cea.fr                  //
//                 CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

ℝ U_condlimi(ℝ x,ℝ t){
  return 0.0;
  //(1-x)*x*exp(-t/epsilon);
}

  
// Test 2 for linear  advection (discontinuous data)
ℝ P_condlimi(ℝ x,ℝ t){
  return 1.0;
  /*ℝ S ;
  S=0;
  double  w[4], y[4];
  w[0] = 0.347854845137454;   y[0] = -0.861136311594053;
  w[1] = 0.652145154862546;   y[1] = -0.339981043584856;
  w[2] = 0.652145154862546;   y[2] =  0.339981043584856;
  w[3] = 0.347854845137454;   y[3] =  0.861136311594053;
  for (int i=1; i<=N; i++)
    {
      for (int k=0; k < 4;k++)
        {
         S+=0.5*w[k]*exp(-0.5*((x/(sqrt(t))*(2*i-1+ y[k]))/(2*N))²);
        }
     }
  S*=x/(sqrt(t)*N);
  if (t!=0) return  S + 0.5*(-sqrt(pi/2)+2) ;
  else return 0.5*(sqrt(pi/2)+2);*/
  } 

ℝ T_condini(ℝ x){
  return 10; 
}
  


  
ℝ P_condini(ℝ x,ℝ t){
  return 0.05;//sqrt(pi/2);
  //if (x<=0.5) return 1;
  //else return 0.0;
}

ℝ U_condini(ℝ x,ℝ t){
  return 0.0; //(x+1)*exp(-sigma*t);
}
    
  
ℝ f_sigma(ℝ x){
   return 1.0;
   //if (x<=0.5-δx) return 1;
   //else return 2;
  //assert(false);// Jamais on doit passer par ici
  // return 0.0;
}

// ****************************************************************************
// * primitive f_sigma : Méthode de Gauss-legendre
// ****************************************************************************
ℝ F_sigma(ℝ x){
  return x;
  /*ℝ S ;
  S=0;
  double  w[4], y[4];
  w[0] = 0.347854845137454;   y[0] = -0.861136311594053;
  w[1] = 0.652145154862546;   y[1] = -0.339981043584856;
  w[2] = 0.652145154862546;   y[2] =  0.339981043584856;
  w[3] = 0.347854845137454;   y[3] =  0.861136311594053;
  for (int i=1; i<=N; i++)
    {
      for (int k=0; k < 4;k++)
        {
        
          S+=0.5*w[k]*f_sigma((x*(2*i-1+ y[k]))/(2*N));
        }
     }
  S*=x/N;
  return S ;*/
  }

/*ℝ F_sigma(ℝ x)
{
  // return sin(x);
  if (x<=0.5-δx) return x;
  else return 2*x;
  //assert(false);// Jamais on doit passer par ici
  // return 0.0;
  }*/


ℝ coeff(ℝ x,ℝ a,ℝ b){
  if (a*x/(b*b+a)>10e-4)
    return (1.0/x)*(1.0-1.0/(pow(1.0+3.0*a*x/(b*b+a),1./3.0)));
  return 1.0;
}
