#define MACRO_calcElemShapeFunctionDerivatives(Cx,Cy,Cz,bx,by,bz,rtn){  \
    const Real fjxxi = ⅛*((Cx[6]-Cx[0])+(Cx[5]-Cx[3])-(Cx[7]-Cx[1])-(Cx[4]-Cx[2])); \
    const Real fjyxi = ⅛*((Cx[6]-Cx[0])+(Cx[5]-Cx[3])-(Cx[7]-Cx[1])-(Cx[4]-Cx[2])); \
    const Real fjzxi = ⅛*((Cx[6]-Cx[0])+(Cx[5]-Cx[3])-(Cx[7]-Cx[1])-(Cx[4]-Cx[2])); \
    const Real fjxet = ⅛*((Cy[6]-Cy[0])-(Cy[5]-Cy[3])+(Cy[7]-Cy[1])-(Cy[4]-Cy[2])); \
    const Real fjyet = ⅛*((Cy[6]-Cy[0])-(Cy[5]-Cy[3])+(Cy[7]-Cy[1])-(Cy[4]-Cy[2])); \
    const Real fjzet = ⅛*((Cy[6]-Cy[0])-(Cy[5]-Cy[3])+(Cy[7]-Cy[1])-(Cy[4]-Cy[2])); \
    const Real fjxze = ⅛*((Cz[6]-Cz[0])+(Cz[5]-Cz[3])+(Cz[7]-Cz[1])+(Cz[4]-Cz[2])); \
    const Real fjyze = ⅛*((Cz[6]-Cz[0])+(Cz[5]-Cz[3])+(Cz[7]-Cz[1])+(Cz[4]-Cz[2])); \
    const Real fjzze = ⅛*((Cz[6]-Cz[0])+(Cz[5]-Cz[3])+(Cz[7]-Cz[1])+(Cz[4]-Cz[2])); \
    const Real cjxxi =   (fjyet * fjzze) - (fjzet * fjyze);             \
    const Real cjyxi = - (fjxet * fjzze) + (fjzet * fjxze);             \
    const Real cjzxi =   (fjxet * fjyze) - (fjyet * fjxze);             \
    const Real cjxet = - (fjyxi * fjzze) + (fjzxi * fjyze);             \
    const Real cjyet =   (fjxxi * fjzze) - (fjzxi * fjxze);             \
    const Real cjzet = - (fjxxi * fjyze) + (fjyxi * fjxze);             \
    const Real cjxze =   (fjyxi * fjzet) - (fjzxi * fjyet);             \
    const Real cjyze = - (fjxxi * fjzet) + (fjzxi * fjxet);             \
    const Real cjzze =   (fjxxi * fjyet) - (fjyxi * fjxet);             \
    bx[0] = - cjxxi-cjxet-cjxze;                                        \
    bx[1] =   cjxxi-cjxet-cjxze;                                        \
    bx[2] =   cjxxi+cjxet-cjxze;                                        \
    bx[3] = - cjxxi+cjxet-cjxze;                                        \
    bx[4] = -bx[2];                                                     \
    bx[5] = -bx[3];                                                     \
    bx[6] = -bx[0];                                                     \
    bx[7] = -bx[1];                                                     \
    by[0] = - cjyxi-cjyet-cjyze;                                        \
    by[1] =   cjyxi-cjyet-cjyze;                                        \
    by[2] =   cjyxi+cjyet-cjyze;                                        \
    by[3] = - cjyxi+cjyet-cjyze;                                        \
    by[4] = -by[2];                                                     \
    by[5] = -by[3];                                                     \
    by[6] = -by[0];                                                     \
    by[7] = -by[1];                                                     \
    bz[0] = - cjzxi-cjzet-cjzze;                                        \
    bz[1] =   cjzxi-cjzet-cjzze;                                        \
    bz[2] =   cjzxi+cjzet-cjzze;                                        \
    bz[3] = - cjzxi+cjzet-cjzze;                                        \
    bz[4] = -bz[2];                                                     \
    bz[5] = -bz[3];                                                     \
    bz[6] = -bz[0];                                                     \
    bz[7] = -bz[1];                                                     \
    rtn = 8.0*(fjxet*cjxet + fjyet*cjyet + fjzet*cjzet);                \
  }

#define MACRO_sumElemFaceNormal(B0x,B0y,B0z,B1x,B1y,B1z,B2x,B2y,B2z,B3x,B3y,B3z,ia,ib,ic,id,Cx,Cy,Cz){ \
    const Real bisect0x = ½*(Cx[id]+Cx[ic]-Cx[ib]-Cx[ia]);              \
    const Real bisect0y = ½*(Cy[id]+Cy[ic]-Cy[ib]-Cy[ia]);              \
    const Real bisect0z = ½*(Cz[id]+Cz[ic]-Cz[ib]-Cz[ia]);              \
    const Real bisect1x = ½*(Cx[ic]+Cx[ib]-Cx[id]-Cx[ia]);              \
    const Real bisect1y = ½*(Cy[ic]+Cy[ib]-Cy[id]-Cy[ia]);              \
    const Real bisect1z = ½*(Cz[ic]+Cz[ib]-Cz[id]-Cz[ia]);              \
    const Real areax = ¼*(bisect0y*bisect1z - bisect0z*bisect1y);       \
    const Real areay = ¼*(bisect0z*bisect1x - bisect0x*bisect1z);       \
    const Real areaz = ¼*(bisect0x*bisect1y - bisect0y*bisect1x);       \
    B0x += areax;                                                       \
    B1x += areax;                                                       \
    B2x += areax;                                                       \
    B3x += areax;                                                       \
    B0y += areay;                                                       \
    B1y += areay;                                                       \
    B2y += areay;                                                       \
    B3y += areay;                                                       \
    B0z += areaz;                                                       \
    B1z += areaz;                                                       \
    B2z += areaz;                                                       \
    B3z += areaz;                                                       \
  }

#define MACRO_calcElemFBHourglassForce(xd,yd,zd,coefficient,hgfx,hgfy,hgfz){ \
  const Real h00x =                                                     \
    hourgam0[0]*xd[0] + hourgam1[0]*xd[1] + hourgam2[0]*xd[2] + hourgam3[0]*xd[3]  + \
    hourgam4[0]*xd[4] + hourgam5[0]*xd[5] + hourgam6[0]*xd[6] + hourgam7[0]*xd[7]; \
  const Real h01x =                                                     \
    hourgam0[1]*xd[0] + hourgam1[1]*xd[1] + hourgam2[1]*xd[2] + hourgam3[1]*xd[3]  + \
    hourgam4[1]*xd[4] + hourgam5[1]*xd[5] + hourgam6[1]*xd[6] + hourgam7[1]*xd[7]; \
  const Real h02x =                                                     \
    hourgam0[2]*xd[0] + hourgam1[2]*xd[1] + hourgam2[2]*xd[2] + hourgam3[2]*xd[3] + \
    hourgam4[2]*xd[4] + hourgam5[2]*xd[5] + hourgam6[2]*xd[6] + hourgam7[2]*xd[7]; \
  const Real h03x =                                                     \
    hourgam0[3]*xd[0] + hourgam1[3]*xd[1] + hourgam2[3]*xd[2] + hourgam3[3]*xd[3]  + \
    hourgam4[3]*xd[4] + hourgam5[3]*xd[5] + hourgam6[3]*xd[6] + hourgam7[3]*xd[7]; \
                                                                        \
  const Real h00y =                                                     \
    hourgam0[0]*yd[0] + hourgam1[0]*yd[1] + hourgam2[0]*yd[2] + hourgam3[0]*yd[3]  + \
    hourgam4[0]*yd[4] + hourgam5[0]*yd[5] + hourgam6[0]*yd[6] + hourgam7[0]*yd[7]; \
  const Real h01y =                                                     \
    hourgam0[1]*yd[0] + hourgam1[1]*yd[1] + hourgam2[1]*yd[2] + hourgam3[1]*yd[3]  + \
    hourgam4[1]*yd[4] + hourgam5[1]*yd[5] + hourgam6[1]*yd[6] + hourgam7[1]*yd[7]; \
  const Real h02y =                                                     \
    hourgam0[2]*yd[0] + hourgam1[2]*yd[1] + hourgam2[2]*yd[2] + hourgam3[2]*yd[3] + \
    hourgam4[2]*yd[4] + hourgam5[2]*yd[5] + hourgam6[2]*yd[6] + hourgam7[2]*yd[7]; \
  const Real h03y =                                                     \
    hourgam0[3]*yd[0] + hourgam1[3]*yd[1] + hourgam2[3]*yd[2] + hourgam3[3]*yd[3]  + \
    hourgam4[3]*yd[4] + hourgam5[3]*yd[5] + hourgam6[3]*yd[6] + hourgam7[3]*yd[7]; \
                                                                        \
  const Real h00z =                                                     \
    hourgam0[0]*zd[0] + hourgam1[0]*zd[1] + hourgam2[0]*zd[2] + hourgam3[0]*zd[3]  + \
    hourgam4[0]*zd[4] + hourgam5[0]*zd[5] + hourgam6[0]*zd[6] + hourgam7[0]*zd[7]; \
  const Real h01z =                                                     \
    hourgam0[1]*zd[0] + hourgam1[1]*zd[1] + hourgam2[1]*zd[2] + hourgam3[1]*zd[3]  + \
    hourgam4[1]*zd[4] + hourgam5[1]*zd[5] + hourgam6[1]*zd[6] + hourgam7[1]*zd[7]; \
  const Real h02z =                                                     \
    hourgam0[2]*zd[0] + hourgam1[2]*zd[1] + hourgam2[2]*zd[2] + hourgam3[2]*zd[3] + \
    hourgam4[2]*zd[4] + hourgam5[2]*zd[5] + hourgam6[2]*zd[6] + hourgam7[2]*zd[7]; \
  const Real h03z =                                                     \
    hourgam0[3]*zd[0] + hourgam1[3]*zd[1] + hourgam2[3]*zd[2] + hourgam3[3]*zd[3]  + \
    hourgam4[3]*zd[4] + hourgam5[3]*zd[5] + hourgam6[3]*zd[6] + hourgam7[3]*zd[7]; \
                                                                        \
  hgfx[0] = coefficient*(hourgam0[0]*h00x + hourgam0[1]*h01x + hourgam0[2]*h02x + hourgam0[3]*h03x); \
  hgfx[1] = coefficient*(hourgam1[0]*h00x + hourgam1[1]*h01x + hourgam1[2]*h02x + hourgam1[3]*h03x); \
  hgfx[2] = coefficient*(hourgam2[0]*h00x + hourgam2[1]*h01x + hourgam2[2]*h02x + hourgam2[3]*h03x); \
  hgfx[3] = coefficient*(hourgam3[0]*h00x + hourgam3[1]*h01x + hourgam3[2]*h02x + hourgam3[3]*h03x); \
  hgfx[4] = coefficient*(hourgam4[0]*h00x + hourgam4[1]*h01x + hourgam4[2]*h02x + hourgam4[3]*h03x); \
  hgfx[5] = coefficient*(hourgam5[0]*h00x + hourgam5[1]*h01x + hourgam5[2]*h02x + hourgam5[3]*h03x); \
  hgfx[6] = coefficient*(hourgam6[0]*h00x + hourgam6[1]*h01x + hourgam6[2]*h02x + hourgam6[3]*h03x); \
  hgfx[7] = coefficient*(hourgam7[0]*h00x + hourgam7[1]*h01x + hourgam7[2]*h02x + hourgam7[3]*h03x); \
                                                                        \
  hgfy[0] = coefficient*(hourgam0[0]*h00y + hourgam0[1]*h01y + hourgam0[2]*h02y + hourgam0[3]*h03y); \
  hgfy[1] = coefficient*(hourgam1[0]*h00y + hourgam1[1]*h01y + hourgam1[2]*h02y + hourgam1[3]*h03y); \
  hgfy[2] = coefficient*(hourgam2[0]*h00y + hourgam2[1]*h01y + hourgam2[2]*h02y + hourgam2[3]*h03y); \
  hgfy[3] = coefficient*(hourgam3[0]*h00y + hourgam3[1]*h01y + hourgam3[2]*h02y + hourgam3[3]*h03y); \
  hgfy[4] = coefficient*(hourgam4[0]*h00y + hourgam4[1]*h01y + hourgam4[2]*h02y + hourgam4[3]*h03y); \
  hgfy[5] = coefficient*(hourgam5[0]*h00y + hourgam5[1]*h01y + hourgam5[2]*h02y + hourgam5[3]*h03y); \
  hgfy[6] = coefficient*(hourgam6[0]*h00y + hourgam6[1]*h01y + hourgam6[2]*h02y + hourgam6[3]*h03y); \
  hgfy[7] = coefficient*(hourgam7[0]*h00y + hourgam7[1]*h01y + hourgam7[2]*h02y + hourgam7[3]*h03y); \
                                                                        \
  hgfz[0] = coefficient*(hourgam0[0]*h00z + hourgam0[1]*h01z + hourgam0[2]*h02z + hourgam0[3]*h03z); \
  hgfz[1] = coefficient*(hourgam1[0]*h00z + hourgam1[1]*h01z + hourgam1[2]*h02z + hourgam1[3]*h03z); \
  hgfz[2] = coefficient*(hourgam2[0]*h00z + hourgam2[1]*h01z + hourgam2[2]*h02z + hourgam2[3]*h03z); \
  hgfz[3] = coefficient*(hourgam3[0]*h00z + hourgam3[1]*h01z + hourgam3[2]*h02z + hourgam3[3]*h03z); \
  hgfz[4] = coefficient*(hourgam4[0]*h00z + hourgam4[1]*h01z + hourgam4[2]*h02z + hourgam4[3]*h03z); \
  hgfz[5] = coefficient*(hourgam5[0]*h00z + hourgam5[1]*h01z + hourgam5[2]*h02z + hourgam5[3]*h03z); \
  hgfz[6] = coefficient*(hourgam6[0]*h00z + hourgam6[1]*h01z + hourgam6[2]*h02z + hourgam6[3]*h03z); \
  hgfz[7] = coefficient*(hourgam7[0]*h00z + hourgam7[1]*h01z + hourgam7[2]*h02z + hourgam7[3]*h03z); \
  }


#define MACRO__computeHourglassModes(i){                                \
    const Real volinv=1.0/determ;                                       \
    const Real *gmm=gamma [ i ];                                        \
    const Real hourmodx =                                               \
      Xx[0]*gamma[i][0] + Xx[1]*gamma[i][1] +                     \
      Xx[2]*gamma[i][2] + Xx[3]*gamma[i][3] +                           \
      Xx[4]*gamma[i][4] + Xx[5]*gamma[i][5] +                           \
      Xx[6]*gamma[i][6] + Xx[7]*gamma[i][7];                            \
    const Real hourmody =                                               \
      Xy[0]*gamma[i][0] + Xy[1]*gamma[i][1] +                           \
      Xy[2]*gamma[i][2] + Xy[3]*gamma[i][3] +                           \
      Xy[4]*gamma[i][4] + Xy[5]*gamma[i][5] +                           \
      Xy[6]*gamma[i][6] + Xy[7]*gamma[i][7];                            \
    const Real hourmodz =                                               \
      Xz[0]*gamma[i][0] + Xz[1]*gamma[i][1] +                           \
      Xz[2]*gamma[i][2] + Xz[3]*gamma[i][3] +                           \
      Xz[4]*gamma[i][4] + Xz[5]*gamma[i][5] +                           \
      Xz[6]*gamma[i][6] + Xz[7]*gamma[i][7];                            \
    hourgam0[i] = gamma[i][0]-volinv*((dvdx[0]*hourmodx)+(dvdy[0]*hourmody)+(dvdz[0]*hourmodz)); \
    hourgam1[i] = gamma[i][1]-volinv*((dvdx[1]*hourmodx)+(dvdy[1]*hourmody)+(dvdz[1]*hourmodz)); \
    hourgam2[i] = gamma[i][2]-volinv*((dvdx[2]*hourmodx)+(dvdy[2]*hourmody)+(dvdz[2]*hourmodz)); \
    hourgam3[i] = gamma[i][3]-volinv*((dvdx[3]*hourmodx)+(dvdy[3]*hourmody)+(dvdz[3]*hourmodz)); \
    hourgam4[i] = gamma[i][4]-volinv*((dvdx[4]*hourmodx)+(dvdy[4]*hourmody)+(dvdz[4]*hourmodz)); \
    hourgam5[i] = gamma[i][5]-volinv*((dvdx[5]*hourmodx)+(dvdy[5]*hourmody)+(dvdz[5]*hourmodz)); \
    hourgam6[i] = gamma[i][6]-volinv*((dvdx[6]*hourmodx)+(dvdy[6]*hourmody)+(dvdz[6]*hourmodz)); \
    hourgam7[i] = gamma[i][7]-volinv*((dvdx[7]*hourmodx)+(dvdy[7]*hourmody)+(dvdz[7]*hourmodz)); \
  }
