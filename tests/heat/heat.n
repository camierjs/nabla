///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
// ℝℕℤ²³√½⅓¼⅛
with ℵ;

// ****************************************************************************
// * Déclaration des options
// ****************************************************************************
options{
  // Mesh options
  ℝ LENGTH                    = 1.0;
  ℕ X_EDGE_ELEMS              = 8;
  ℕ Y_EDGE_ELEMS              = 8;
  ℕ Z_EDGE_ELEMS              = 8;
  Bool option_quads          = true;
  Bool option_triangles      = false;  
  ℝ option_deltat            = 0.0001;
  ℝ option_δt_initial        = 0.0;
  ℝ option_stoptime          = 0.1;
  ℝ option_ini_temperature   = 300.0;
  ℝ option_hot_temperature   = 700.0;
  ℕ option_max_iterations    = 1;
  // Options d'Aleph
  ℝ alephEpsilon             = 1.e-10;
  ℕ alephUnderlyingSolver    = 2;
  ℕ alephMaxIterations       = 16384;
  ℕ alephPreconditionerMethod = 2; // DIAGONAL=0, AINV=1, AMG=2, IC=3, POLY=4, ILU=5, ILUp=6,
                                   // SPAIstat=7, SPAIdyn=8, DDMCriteriaAdaptedSelector=9, NONE=10
  ℕ alephSolverMethod     = 0; //PCG=0, BiCGStab=1 , BiCGStab2=2, GMRES=3, SAMG=4, QMR=5, SuperLU=6
  ℕ alephNumberOfCores    = 0;
  Bool option_aleph_dump_matrix = true;
};


// ****************************************************************************
// * Déclaration des variables aux mailles
// ****************************************************************************
cells{
  ℝ θ;
};

// ****************************************************************************
// * Déclaration des variables aux faces
// ****************************************************************************
faces{
  ℝ bcθ;
  ℝ ih2;
};

/*Real geomFaceLength2(Face f){
  const ℝ³ xyz0=coord[f.node(0)];
  const ℝ³ xyz1=coord[f.node(1)];
  //info()<<"\nf.node(0)="<<f.node(0)<<", f.node(1)="<<f.node(1)<<"\n";
  //info()<<"\nyxyz0="<<xyz0<<", yxyz1="<<xyz1<<"\n";
  return (xyz0-xyz1).abs2();
  }*/

// ****************************************************************************
// * Partie d'initialisation ]-∞,-0[
// ****************************************************************************

void ini(void) @ -10.0{
  δt=option_deltat;
}

∀ cells void iniCells(void) out (cell θ) @ -10.0{
  θ=option_ini_temperature;
}

∀ faces void iniFaces(void) out (face bcθ, face ih2) @ -10.0{
  const ℝ³ s0=coord[0];
  const ℝ³ s1=coord[1];
  const ℝ f_length = norm(s0-s1);
  ih2=1.0/f_length; // geomFaceLength2(this);
  bcθ=option_ini_temperature;
}

∀ own outer faces void iniHotFaces(void) @ -9.9{
  // Si je ne suis pas sur XMIN ou YMIN, je laisse à option_ini_temperature
  if (!((coord[0].x==0.0) || (coord[0].y==0.0))) continue;
  // Sinon je force à option_hot_temperature
  bcθ=option_hot_temperature;
}


// ****************************************************************************
// * Partie de calcul ]+0,+∞[ 
// ****************************************************************************

void rhsInit(void) @ 1.0{
  ℵ rhs reset;
  ℵ lhs reset;
}

∀ own cells void addRhsCellValues(void) in (cell θ) @ 1.1{
  const ℝ value=θ;
  ℵ rhs addValue(θ,this,value);
}

∀ own outer faces void setRhsFaceValues(void) in (cell θ, face ih2, face bcθ) @ 1.2{
  const ℝ value = δt*ih2*bcθ;
  ℵ rhs addValue(θ, cell(0), value);
}

// ********************************************************
// * Initialisation ℵ
// * Could be done as: 'alephInitialize @ 2;'
// ********************************************************
void iniAleph(void) @ 2.0 { alephInitialize(); }

// ****************************************************************************
// * Partie de remplissage de la matrice
// ****************************************************************************

∀ inner faces void setInnerFacesValues(void) in (cell θ, face ih2) @ 2.1{
  const ℝ δtDivSurface = -δt*ih2;
  //info()<<"\n[setInnerFacesValues] backCell="<<backCell;
//if (backCell.isOwn())
    ℵ matrix setValue(θ,backCell, θ,frontCell, δtDivSurface);
    //if (frontCell.isOwn())
    ℵ matrix setValue(θ,frontCell, θ,backCell, δtDivSurface);
}

∀ own cells void setCellsValues(void) in (cell θ/*, face ih2*/) @ 2.2{
  ℝ diagonalTerme=0.0;
  ∀ face diagonalTerme += ih2;
  diagonalTerme*=δt;
  diagonalTerme+=1.0;
  ℵ matrix setValue(θ,this, θ,this, diagonalTerme);
}

// ****************************************************************************
// * Aleph Solve
// ****************************************************************************
void assembleAndSolve(void) @ 4.0 { ℵ solve; }


// ****************************************************************************
// * Récupération des résultats
// ****************************************************************************
∀ own cells void getCellResults(void) out (cell θ) @ 4.1{
  θ=ℵ lhs getValue(θ, this);
}


// ****************************************************************************
// * Sync & test for Quit
// ****************************************************************************
void testForQuit(void) @ 5.0{
  synchronize(θ);
  if (iteration >= option_max_iterations) exit;
}
