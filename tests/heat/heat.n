// NABLA - a Numerical Analysis Based LAnguage

// Copyright (C) 2014 CEA/DAM/DIF
// Jean-Sylvain CAMIER - Jean-Sylvain.Camier@cea.fr

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// See the LICENSE file for details.
with ℵ;

// ****************************************************************************
// * Déclaration des options
// ****************************************************************************
options{
  Bool option_quads             = true;
  Bool option_triangles         = false;  
  Real option_deltat            = 0.0001;
  Real option_ini_temperature   = 300.0;
  Real option_hot_temperature   = 700.0;
  Integer option_max_iterations = 8;
  // Options d'Aleph
  Real alephEpsilon             = 1.e-10;
  Integer alephUnderlyingSolver = 1;
  Integer alephMaxIterations    = 16384;
  Integer alephPreconditionerMethod = 2; // DIAGONAL=0, AINV=1, AMG=2, IC=3, POLY=4, ILU=5, ILUp=6,
                                         // SPAIstat=7, SPAIdyn=8, DDMCriteriaAdaptedSelector=9, NONE=10
  Integer alephSolverMethod     = 0; //PCG=0, BiCGStab=1 , BiCGStab2=2, GMRES=3, SAMG=4, QMR=5, SuperLU=6
  Integer alephNumberOfCores    = 0;
  Bool option_aleph_dump_matrix = false;
};


// ****************************************************************************
// * Déclaration des variables aux mailles
// ****************************************************************************
cells{
  Real θ;
};

// ****************************************************************************
// * Déclaration des variables aux faces
// ****************************************************************************
faces{
  Real bcθ;
  Real ih2;
};

Real geomFaceLength2(Face f){
  const Real3 xyz0=coord[f.node(0)];
  const Real3 xyz1=coord[f.node(1)];
  return (xyz0-xyz1).abs2();
}

// ****************************************************************************
// * Partie d'initialisation ]-∞,-0[
// ****************************************************************************

void ini(void) @ -10.0{
  δt=option_deltat;
}

cells void iniCells(void) out (cell cell_temperature) @ -10.0{
  θ=option_ini_temperature;
}

faces void iniFaces(void) out (face face_temperature) @ -10.0{
  bcθ=option_ini_temperature;
  ih2=1.0/geomFaceLength2(*this);
}

own outer faces void iniHotFaces(void) @ -9.9{
  // Si je ne suis pas sur XMIN ou YMIN, je laisse à option_ini_temperature
  if (!((coord[0].x==0.0) || (coord[0].y==0.0))) continue;
  // Sinon je force à option_hot_temperature
  bcθ=option_hot_temperature;
}


// ****************************************************************************
// * Partie de calcul ]+0,+∞[ 
// ****************************************************************************

void rhsInit(void) @ 1.0{
  ℵ rhs reset;
  ℵ lhs reset;
}

own cells void addRhsCellValues(void) @ 1.1{
  const Real value=θ;
  ℵ rhs addValue(θ,this,value);
}

own outer faces void setRhsFaceValues(void) @ 1.2{
  const Real value = δt*ih2*bcθ;
  ℵ rhs addValue(θ, cell(0), value);
}

// ****************************************************************************
// * Partie de remplissage de la matrice
// ****************************************************************************

inner faces void setInnerFacesValues(void) @ 2.1{
  const Real δtDivSurface = -δt*ih2;
  if (backCell.isOwn())
    ℵ matrix setValue(θ,backCell, θ,frontCell, δtDivSurface);
  if (frontCell.isOwn())
    ℵ matrix setValue(θ,frontCell, θ,backCell, δtDivSurface);
}

own cells void setCellsValues(void) @ 2.2{
  Real diagonalTerme=0.0;
  foreach face diagonalTerme += ih2;
  diagonalTerme*=δt;
  diagonalTerme+=1.0;
  ℵ matrix setValue(θ,this, θ,this, diagonalTerme);
}

// ****************************************************************************
// * Aleph Solve
// ****************************************************************************
void assembleAndSolve(void) @ 4.0 { ℵ solve; }


// ****************************************************************************
// * Récupération des résultats
// ****************************************************************************
own cells void getCellResults(void) out (cell θ) @ 4.1{
  θ=ℵ lhs getValue(θ, this);
}


// ****************************************************************************
// * Sync & test for Quit
// ****************************************************************************
void testForQuit(void) @ 5.0{
  synchronize(θ);
  if (GlobalIteration >= option_max_iterations) exit;
}
