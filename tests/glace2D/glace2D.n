///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ‚Ñù¬≤;
#include "assert.h"

// Cette version serait √† comparer avec tests/ns4n/glcNxtStp2.n

// ****************************************************************************
// * Options du sch√©ma Glace Euler/Sans reconstruction
// ****************************************************************************
options{
  Bool DEBUG = false;
  Bool option_test_sod = true;
      
  Real Œ≥ = 1.4;
  Real option_u_ini = 0.0;
  Real option_ini_zg_œÅ = 1.0;
  Real option_ini_zd_œÅ = 0.125;
  Real option_ini_zg_p = 1.0; 
  Real option_ini_zd_p = 0.1;

  Real option_x_min = 0.0;
  Real option_y_min = 0.0;
  Real option_x_interface = 0.5625;
  Real option_x_max = 1.125;
  Real option_y_max = 1.125;
  
  Real option_Œ¥t_initial = 0.0001;         // ! utilis√© en dur dans le backend lambda !
  Real option_Œ¥t_min = 1e-12;
  Real option_Œ¥t_max = 0.01;
  Real option_stoptime = 0.1;              // ! utilis√© en dur dans le backend lambda !
  Real option_Œ¥t_control = 0.1;            // Contr√¥le du pas de temps hydrodynamique
  Real option_Œ¥t_min_variation = 0.99;     // D√©croissance maximale tol√©r√©e du pas de temps
  Real option_Œ¥t_max_variation = 0.10;     // Amplitude maximale de croissance du pas de temps
  Bool option_Œ¥t_last_exact = true;
  
  Integer option_max_iterations = 32768;   // ! utilis√© en dur dans le backend lambda !
};

// ****************************************************************************
// * D√©claration des variables aux noeuds
// ****************************************************************************
nodes{
  Real3   node_u;                          // Vitesse nodale du maillage
  Real3x3 node_u_matrix;                   // Matrice aux sommets pour le calcul de la vitesse
  Real3   node_u_second_member;            // Second membre aux sommets pour le calcul de la vitesse
};

// ****************************************************************************
// * D√©claration des variables aux mailles
// ****************************************************************************
cells{  
  Real ZG;                                 // Group ZG
  Real ZD;                                 // Group ZD
  Real m;                                  // Masse
  Real V;                                  // Volume des mailles
  Real œÅ;                                  // Densit√©s
  Real p;                                  // Pression
  Real3 u;                                 // Vitesse moyenne
  Real c;
  Real glace_Œ¥t;
  Real absCQs[nodes];
  Real3 CQs[nodes];                        // R√©sultantes aux sommets
  Real3x3 AQs[nodes];                      // Matrices de contributions aux sommets
  Real œÅŒï;                                 // √ânergie massique
  Real ŒπŒï;                                 // √ânergie interne
  Real3 reconstructed_u[nodes];            // Tableau des vitesses reconstruites
  Real reconstructed_p[nodes];             // Tableau des pressions reconstruites
  Real3 momentum_fluxes_Œ£;
  Real total_energy_fluxes_Œ£;
};

// ****************************************************************************
// * Globals
// ****************************************************************************
global{
  ‚Ñù global_Œ¥t;
};

// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+‚àû[ 
// ****************************************************************************

// ****************************************************************************
// * computeAQsMatrices
// ****************************************************************************
‚àÄ cells @ 9.0 {
  const Real œÅc = œÅ*c;
  ‚àÄ node{
    AQs = CQs‚äóCQs;
    AQs *= œÅc/absCQs;
    if (DEBUG)
      printf("\n\t[32m[std] AQs=");
    if (DEBUG)
      cout<<AQs<<"[0m";
  }
}

// ****************************************************************************
// * temporalSchemeReconstructPressure
// ****************************************************************************
‚àÄ cells @ 10.0{
  ‚àÄ node{
    reconstructed_p=p;
    if (DEBUG)
      printf("\n\t[32m[std] reconstructed_p=%.15e[0m",
             reconstructed_p);
  }
}

// ****************************************************************************
// * temporalSchemeReconstructVelocity
// ****************************************************************************
‚àÄ cells @ 10.0{
  ‚àÄ node{
    reconstructed_u=u;
    if (DEBUG)
      printf("\n\t[32m[std] reconstructed_u=(%.15e,%.15e,%.15e)[0m",
           reconstructed_u.x,reconstructed_u.y,reconstructed_u.z);
  }
}

// ****************************************************************************
// * temporalSchemeIniMatricesAndSecondMember
// ****************************************************************************
‚àÄ nodes @ 11.0{
  node_u_matrix=Real3x3();
  node_u_matrix.z=Real3(0,0,1);
  node_u_second_member=0;
}

// ****************************************************************************
// * temporalSchemeAssembleMatricesAndSecondMember
// ****************************************************************************
‚àÄ cells @ 12.0{
  ‚àÄ node{
    const Real3x3 local_matrix = AQs;
    node_u_matrix += local_matrix;
    node_u_second_member += local_matrix ‚®Ç reconstructed_u;
    node_u_second_member += CQs*reconstructed_p;
  }
}
‚àÄ nodes @ 12.1{ // On revient APRES les √©critures aux noeuds pour dumper
  if (DEBUG)
    printf("\n\t[31m[std] Before BOUNDARIES node_u_matrix[%d]=\n\t\t[\
[%.15e %.15e %.15e]\n\t\t\
[%.15e %.15e %.15e]\n\t\t\
[%.15e %.15e %.15e]][0m",uid,
           node_u_matrix.x.x,node_u_matrix.x.y,node_u_matrix.x.z,
           node_u_matrix.y.x,node_u_matrix.y.y,node_u_matrix.y.z,
           node_u_matrix.z.x,node_u_matrix.z.y,node_u_matrix.z.z);
  if (DEBUG)
    printf("\n\t[31m[std] Before BOUNDARIES node_u_second_member[%d]=\
(%.15e,%.15e,%.15e)[0m",uid,
           node_u_second_member.x,
           node_u_second_member.y,
           node_u_second_member.z);
}

// ****************************************************************************
// * Le calcul aux boundaries se fait ici @ 13.1,13.2
// ****************************************************************************

// ****************************************************************************
// * synchronize pour Arcane node_u_matrix & node_u_matrix_second_member
// ****************************************************************************
void synchronizeNodeUMatrixAndSecondMember(void)@ 13.4{
  synchronize(node_u_matrix);
  synchronize(node_u_second_member);
}

// ****************************************************************************
// * temporalSchemeComputeNodesVelocity
// ****************************************************************************
‚àÄ nodes @ 14.0{
  if (DEBUG)
    printf("\n\t[31m[std] node_u_matrix=[0m\n\t\t[31m[\
[%.15e %.15e %.15e]\n\t\t[%.15e %.15e %.15e]\n\t\t[%.15e %.15e %.15e]][0m",
         node_u_matrix.x.x,node_u_matrix.x.y,node_u_matrix.x.z,
         node_u_matrix.y.x,node_u_matrix.y.y,node_u_matrix.y.z,
         node_u_matrix.z.x,node_u_matrix.z.y,node_u_matrix.z.z);
  const Real determinent = matrixDeterminant(node_u_matrix);
  if (DEBUG)
    printf("\n\t[31m[std] node_u_second_member=(%.15e,%.15e,%.15e)[0m",
         node_u_second_member.x,
         node_u_second_member.y,
         node_u_second_member.z);
  assert(determinent!=0.0);
  node_u_matrix = inverseMatrix(node_u_matrix, determinent);
  node_u = node_u_matrix ‚®Ç node_u_second_member;
  node_u.z=0.0;
  if (DEBUG)
    printf("\n\t[31m[std] node_u[%d]=(%.15e,%.15e,%.15e)[0m",
           uid,node_u.x,node_u.y,node_u.z);
}
  
// ****************************************************************************
// * temporalSchemeIniFluxesSum
// ****************************************************************************
‚àÄ cells @ 15.0{
  momentum_fluxes_Œ£=total_energy_fluxes_Œ£=0.0;
}

// ****************************************************************************
// * temporalSchemeComputeStandardFluxesSum
// ****************************************************************************
‚àÄ cells @ 16.0{
  ‚àÄ node{
    const Real3 Œîu = reconstructed_u-node_u;
    Real3 FQs = AQs ‚®Ç Œîu;
    FQs += reconstructed_p*CQs;
    momentum_fluxes_Œ£ -= FQs;
    total_energy_fluxes_Œ£ -= FQs‚ãÖnode_u;
  }
}

// ****************************************************************************
// * temporalSchemeApplyFluxesStandard
// ****************************************************************************
‚àÄ cells @ 19.0{
  if (DEBUG) printf("\n\t[32m[n+1] deltaT=%.15e[0m",Œ¥t);
  if (DEBUG) printf("\n\t[32m[n+1] pre u=(%.15e,%.15e,%.15e)[0m",u.x,u.y,u.z);
  if (DEBUG)
    printf("\n\t[32m[n+1] momentum_fluxes_Œ£=(%.15e,%.15e,%.15e)[0m",
           momentum_fluxes_Œ£.x,
           momentum_fluxes_Œ£.y,
           momentum_fluxes_Œ£.z);
  u += Œ¥t*momentum_fluxes_Œ£/m;
  if (DEBUG)
    printf("\n\t[32m[n+1] post u=(%.15e,%.15e,%.15e)[0m",u.x,u.y,u.z);
  œÅŒï += Œ¥t*total_energy_fluxes_Œ£/m;
}

// ****************************************************************************
// * temporalSchemeMoveNodes
// ****************************************************************************
‚àÄ nodes @ 22.0{
  if (DEBUG)
    printf("\n\t[32m[n+1] deltaT=%.15e[0m",Œ¥t);
  coord += Œ¥t*node_u;
  if (DEBUG)
    printf("\n\t[31m[n+1] node_coord[%d]=(%.15e,%.15e,%.15e)[0m",
         uid, coord.x, coord.y, coord.z);
}

// ****************************************************************************
// * geomComputeCQsQuad @ 23.0
// * geomComputeSurfaceAndVolume @ 24.0 
// ****************************************************************************

// ****************************************************************************
// * glaceEOS vient se placer ici: [26.0 ‚Üí 30.0]
// ****************************************************************************

// ****************************************************************************
// * R√©duction min vers le global_Œ¥t
// ****************************************************************************
‚àÄ cells global_Œ¥t <?= glace_Œ¥t @ 31.0;

// ****************************************************************************
// * glaceTimeStepCtrl
// ****************************************************************************
void hydroTimeStepCtrl(void) @ 35.0{
  Real new_Œ¥t=option_Œ¥t_control*global_Œ¥t;
  if (DEBUG)
    printf("\n[1;33m option_Œ¥t_control=%.15e, global_Œ¥t=%.15e[0m",
           option_Œ¥t_control,global_Œ¥t);
  // on calcule les variations min et max autoris√©es
  const Real max_time_step = (1.0+option_Œ¥t_max_variation)*Œ¥t;
  const Real min_time_step = (1.0-option_Œ¥t_min_variation)*Œ¥t;
  if (new_Œ¥t > max_time_step) new_Œ¥t=max_time_step;
  if (new_Œ¥t < min_time_step) new_Œ¥t=min_time_step;
  new_Œ¥t = min(new_Œ¥t, option_Œ¥t_max);
  new_Œ¥t = max(new_Œ¥t, option_Œ¥t_min);
  // le dernier calcul se fait exactement au temps final
  if (option_Œ¥t_last_exact && ((time + new_Œ¥t) > option_stoptime)) 
      new_Œ¥t = option_stoptime - time;
  if ((time>=option_stoptime) || (new_Œ¥t==0.0)) exit;
  Œ¥t=new_Œ¥t;
  if (DEBUG)
    printf("\n[1;33m final Œ¥t=%.15e[0m\n",Œ¥t);
  if (option_max_iterations!=0 && GlobalIteration >= option_max_iterations) exit;
}
