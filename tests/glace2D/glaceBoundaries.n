///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2017 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

// **********************************************************
// * Conditions aux limites dans le cas 2D
// **********************************************************
/*∀ outer faces void ofCell(void)@ 13.09{
  printf("\n\t[36m[ofCell] face[%d]:",uid);
  ∀ cell{
    printf(" face_cell=#%d",face_cell[NABLA_NB_FACES*(c<<WARP_BIT)+f]);
    ρ=0.;
    printf(", rho[cell(%d)]=%f",#,ρ);
  }
}
∀ outer cells void oCell(void)@ 13.091{
  printf("\n\t[36m[oCell] cell[%d]:",uid);
  ρ=0.;
  }*/


∀ outer faces void ofBoundaries(void)@ 13.1{
  const Real Y_MIN = option_y_min; // ! On utilise en dur la géométrie du cas
  const Real Y_MAX = option_y_max;
  const Real3x3 I = matrix3x3Id();
  const Real3 normaleY={0.0,1.0,0.0};
  if (DEBUG)
    printf("\n\t[36m[std] sym face[%d] option_y_max=%f",uid,option_y_max);
  ∀ node{
    if ((coord.y==Y_MIN)||(coord.y==Y_MAX)){
      if (DEBUG)
        printf("\n\t\t[36m[std] sym node[%d] (%f,%f,%f)",#,coord.x,coord.y,coord.z);
      const Real orientation = (coord.y==Y_MIN)?-1.0:1.0;
      const Real3 normal = orientation*normaleY;
      const Real3x3 nxn = normal⊗normal;
      const Real3x3 P = I-nxn;
      node_u_matrix = node_u_matrix ⊛ P; 
      node_u_matrix = P ⊛ node_u_matrix;
      node_u_matrix += nxn*(node_u_matrix.x.x +
                            node_u_matrix.y.y +
                            node_u_matrix.z.z );
      node_u_second_member = P ⨂ node_u_second_member;
    }
  }
}

∀ outer faces @ 13.2 {
  const Real X_MIN = option_x_min; // ! On utilise en dur la géométrie du cas
  const Real X_MAX = option_x_max;
  const Real value = option_u_ini;
  const Real3x3 I = matrix3x3Id();
  if (DEBUG)
    printf("\n\t[36m[std] BC face[%d]",uid);
  ∀ node{
    if (!((fabs(coord.x-X_MIN)<1.e-10) ||
          ((fabs(coord.x-X_MAX)<1.e-10)))) continue;
    if (DEBUG)
      printf("\n\t\t[36m[std] BC node[%d] (coord.x=%f)",#,coord.x);
    node_u_matrix = I;
    node_u_second_member = value;
  }
}
