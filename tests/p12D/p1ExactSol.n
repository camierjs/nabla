///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////

‚Ñù  _exact_p_sol_0(‚Ñù t, ‚Ñù¬≥ pos){ return 1.0-pos.x;}
‚Ñù¬≥ _exact_u_sol_0(‚Ñù t, ‚Ñù¬≥ pos){ return ‚Ñù¬≥(1.0,0.0,0.0);}
‚Ñù  _exact_t_sol_0(‚Ñù t, ‚Ñù¬≥ pos){ return 1.0-pos.x;}

‚Ñù  _exact_p_sol_1(‚Ñù t, ‚Ñù¬≥ pos){ return exp(-t);}
‚Ñù¬≥ _exact_u_sol_1(‚Ñù t, ‚Ñù¬≥ pos){ return ‚Ñù¬≥(pos.x*exp(-t),0.0,0.0);}
‚Ñù  _exact_t_sol_1(‚Ñù t, ‚Ñù¬≥ pos){ return exp(-t);}

‚Ñù  _exact_p_sol_2(‚Ñù t, ‚Ñù¬≥ pos){ return (0.5*(1.-exp(-2.*t)));}
‚Ñù¬≥ _exact_u_sol_2(‚Ñù t, ‚Ñù¬≥ pos){ return ‚Ñù¬≥(0.0,0.0,0.0);}
‚Ñù  _exact_t_sol_2(‚Ñù t, ‚Ñù¬≥ pos){ return (0.5*(1.+exp(-2.*t)));}

‚Ñù  _exact_p_sol_3(‚Ñù t, ‚Ñù¬≥ pos){ return (exp(-0.25*t)*cos(pos.x));}
‚Ñù¬≥ _exact_u_sol_3(‚Ñù t, ‚Ñù¬≥ pos){ return ‚Ñù¬≥(0.75*exp(-0.25*t)*sin(pos.x),0.0,0.0);}
‚Ñù  _exact_t_sol_3(‚Ñù t, ‚Ñù¬≥ pos){ return (2.*exp(-0.25*t)*cos(pos.x));}


‚Ñù _exact_p_sol(‚Ñù t, ‚Ñù¬≥ pos){
  if (option_case==0) return _exact_p_sol_0(t, pos);
  if (option_case==1) return _exact_p_sol_1(t, pos);
  if (option_case==2) return _exact_p_sol_2(t, pos);
  if (option_case==3) return _exact_p_sol_3(t, pos);
  printf("\n The test problem (%d) does not exist",option_case);
  assert(false);
}

‚Ñù¬≥ _exact_u_sol(‚Ñù t, ‚Ñù¬≥ pos){
  if (option_case==0) return _exact_u_sol_0(t, pos);
  if (option_case==1) return _exact_u_sol_1(t, pos);
  if (option_case==2) return _exact_u_sol_2(t, pos);
  if (option_case==3) return _exact_u_sol_3(t, pos);
  printf("\n Cas test non g√©r√©");
  assert(false);
}

‚Ñù _exact_t_sol(‚Ñù t, ‚Ñù¬≥ pos){
  if (option_case==0) return _exact_t_sol_0(t, pos);
  if (option_case==1) return _exact_t_sol_1(t, pos);
  if (option_case==2) return _exact_t_sol_2(t, pos);
  if (option_case==3) return _exact_t_sol_3(t, pos);
  printf("\n Cas test non g√©r√©");
  assert(false);
}

‚àÄ cells analyticSol @ 30.1 {
  pana=_exact_p_sol(time,center);
  uana=_exact_u_sol(time,center);
  tana=_exact_t_sol(time,center);
}

iniL2Error @ 30.0 {
  pL2error=0.;
  uL2error=0.;
  tL2error=0.;
  Vtot=0.;
}

‚àÄ cells computeL2Error @ 30.1 {
  pL2error+=(pana-p)*(pana-p)*V*V;
  uL2error+=(uana-u)‚ãÖ(uana-u)*V*V;
  tL2error+=(tana-temperature)*(tana-temperature)*V*V;
  Vtot+=V;
}

printL2Error @ 30.2 {
  pL2error=sqrt(pL2error)/Vtot;
  uL2error=sqrt(uL2error)/Vtot;
  tL2error=sqrt(tL2error)/Vtot;
  printf("\n\t[33m[printL2Error]\n\t Erreur sur p=(%.15e),\n\t Erreur sur u=(%.15e),\n\t Erreur sur T=(%.15e).[0m",pL2error,uL2error,tL2error);

}
