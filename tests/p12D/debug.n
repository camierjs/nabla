///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
âˆ€ nodes @ -41.0 if (DEBUG){
   info()<<"[37m[geo,ini] coord["<<uid<<"]="<<coord<<"[0m";
}

dbgÎ”l @ -29.99 {
  if (DEBUG) info()<<"\33[33m[computeÎ”l] Î”l="<<Î”l<<"\33[m";
}

âˆ€ cells @ -19.99,23.00 if (DEBUG){
  printf("\n[37m[geo,std] V=%.15e[0m",V);
}


âˆ€ cells dumpAQs @ 9.01 if (DEBUG) {
  âˆ€ nodes
      printf("\n[31m[std] AQs[%d;node #%d]=\n\t\t[\
[%.15e %.15e %.15e]\n\t\t\
[%.15e %.15e %.15e]\n\t\t\
[%.15e %.15e %.15e]][0m",uid,n,
             AQs.x.x,AQs.x.y,AQs.x.z,
             AQs.y.x,AQs.y.y,AQs.y.z,
             AQs.z.x,AQs.z.y,AQs.z.z);
}

âˆ€ cells dumpBQs @ 9.11 if (DEBUG){
  âˆ€ node
      printf("\n\t[31m[std] BQs[%d]=\n\t\t[\
[%.15e %.15e %.15e]\n\t\t\
[%.15e %.15e %.15e]\n\t\t\
[%.15e %.15e %.15e]][0m",uid,
           BQs.x.x,BQs.x.y,BQs.x.z,
           BQs.y.x,BQs.y.y,BQs.y.z,
           BQs.z.x,BQs.z.y,BQs.z.z);
}

âˆ€ cells dumpTemporalSchemeReconstructPressure @ 10.01 if (DEBUG){
  âˆ€ node
      printf("\n\t[32m[std] reconstructed_p=%.15e[0m",
             reconstructed_p);
}

âˆ€ cells dumpTemporalSchemeReconstructVelocity @ 10.01 if (DEBUG){
  âˆ€ node
      printf("\n\t[32m[std] reconstructed_u=(%.15e,%.15e,%.15e)[0m",
             reconstructed_u.x,reconstructed_u.y,reconstructed_u.z);
}

âˆ€ nodes @ 12.01 if (DEBUG){
    printf("\n\t[31m[std] Before BOUNDARIES node_u_matrix[%d]=\n\t\t[\
[%.15e %.15e %.15e]\n\t\t\
[%.15e %.15e %.15e]\n\t\t\
[%.15e %.15e %.15e]][0m",uid,
           node_u_matrix.x.x,node_u_matrix.x.y,node_u_matrix.x.z,
           node_u_matrix.y.x,node_u_matrix.y.y,node_u_matrix.y.z,
           node_u_matrix.z.x,node_u_matrix.z.y,node_u_matrix.z.z);
    printf("\n\t[31m[std] Before BOUNDARIES node_u_second_member[%d]=\
(%.15e,%.15e,%.15e)[0m",uid,
           node_u_second_member.x,
           node_u_second_member.y,
           node_u_second_member.z);
}

âˆ€ outer faces @ 13.21 if (DEBUG) {
  printf("\n\t[36m[std] BC face[%d]",uid);
  âˆ€ node
     printf("\n\t\t[36m[std] BC node[%d] (coord.x=%f)",#,coord.x);
}

âˆ€ nodes dumpTemporalSchemeComputeNodesVelocity @ 14.01 if (DEBUG){
    printf("\n\t[31m[std] node_u_matrix=[0m\n\t\t[31m[\
[%.15e %.15e %.15e]\n\t\t[%.15e %.15e %.15e]\n\t\t[%.15e %.15e %.15e]][0m",
         node_u_matrix.x.x,node_u_matrix.x.y,node_u_matrix.x.z,
         node_u_matrix.y.x,node_u_matrix.y.y,node_u_matrix.y.z,
         node_u_matrix.z.x,node_u_matrix.z.y,node_u_matrix.z.z);
    printf("\n\t[31m[std] node_u_second_member=(%.15e,%.15e,%.15e)[0m",
         node_u_second_member.x,
         node_u_second_member.y,
         node_u_second_member.z);
   printf("\n\t[31m[std] node_u[%d]=(%.15e,%.15e,%.15e)[0m",
           uid,node_u.x,node_u.y,node_u.z);
}

âˆ€ cells dumpTemporalSchemeComputeStandardFluxesSum @ 16.01 if (DEBUG){
  printf("\n\t[32m[n+1] pressure_fluxes[%d]=(%.15e)[0m",uid,pressure_fluxes_Î£);  
}

âˆ€ cells dumpTemporalSchemeApplyFluxesStandard @ 19.01 if (DEBUG){
  printf("\n\t[32m[n+1] deltaT=%.15e[0m",Î´t);
  printf("\n\t[32m[n+1] pre u[%d]=(%.15e,%.15e,%.15e)[0m",uid,u.x,u.y,u.z);
  printf("\n\t[32m[n+1] velocity_fluxes_Î£[%d]=(%.15e,%.15e,%.15e)[0m",
         uid,velocity_fluxes_Î£.x,velocity_fluxes_Î£.y,velocity_fluxes_Î£.z);
  printf("\n\t[32m[n+1] post u[%d]=(%.15e,%.15e,%.15e)[0m",uid,u.x,u.y,u.z);
  printf("\n\t[32m[n+1] pre p[%d]=(%.15e)[0m",uid,p);
  printf("\n\t[32m[n+1] pressure_fluxes_Î£[%d]=(%.15e)[0m",uid,pressure_fluxes_Î£);
  printf("\n\t[32m[n+1] post p[%d]=(%.15e)[0m",uid,p);
}

















âˆ€ cells dumpHydroTimeStepCtrlCells @ 30.01 if (DEBUG) {
    printf("\n\t[33m p1_Î´t=%.15e[0m",p1_Î´t);
}
