///////////////////////////////////////////////////////////////////////////////
// NABLA - a Numerical Analysis Based LAnguage                               //
//                                                                           //
// Copyright (C) 2014~2016 CEA/DAM/DIF                                       //
// IDDN.FR.001.520002.000.S.P.2014.000.10500                                 //
//                                                                           //
// Contributor(s): CAMIER Jean-Sylvain - Jean-Sylvain.Camier@cea.fr          //
//                 LABOURASSE Emmanuel - Emmanuel.Labourasse@cea.fr          //
//                                                                           //
// This software is a computer program whose purpose is to translate         //
// numerical-analysis specific sources and to generate optimized code        //
// for different targets and architectures.                                  //
//                                                                           //
// This software is governed by the CeCILL license under French law and      //
// abiding by the rules of distribution of free software. You can  use,      //
// modify and/or redistribute the software under the terms of the CeCILL     //
// license as circulated by CEA, CNRS and INRIA at the following URL:        //
// "http://www.cecill.info".                                                 //
//                                                                           //
// The CeCILL is a free software license, explicitly compatible with         //
// the GNU GPL.                                                              //
//                                                                           //
// As a counterpart to the access to the source code and rights to copy,     //
// modify and redistribute granted by the license, users are provided only   //
// with a limited warranty and the software's author, the holder of the      //
// economic rights, and the successive licensors have only limited liability.//
//                                                                           //
// In this respect, the user's attention is drawn to the risks associated    //
// with loading, using, modifying and/or developing or reproducing the       //
// software by the user in light of its specific status of free software,    //
// that may mean that it is complicated to manipulate, and that also         //
// therefore means that it is reserved for developers and experienced        //
// professionals having in-depth computer knowledge. Users are therefore     //
// encouraged to load and test the software's suitability as regards their   //
// requirements in conditions enabling the security of their systems and/or  //
// data to be ensured and, more generally, to use and operate it in the      //
// same conditions as regards security.                                      //
//                                                                           //
// The fact that you are presently reading this means that you have had      //
// knowledge of the CeCILL license and that you accept its terms.            //
//                                                                           //
// See the LICENSE file for details.                                         //
///////////////////////////////////////////////////////////////////////////////
with ℝ²;

// ****************************************************************************
// * αβγδεζηθικλμνξοπρςστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ
// * ∀ℝℕℤℾ√∛ ½⅓¼⅛𝜕ℵ∂⋅⨯⤫⊗⨂⊛⁾ⁱ²³ⁿ⁺¹∞
// ****************************************************************************

// ****************************************************************************
// * Options du schéma
// ****************************************************************************
options{
  // Mesh options
  ℝ LENGTH       = 1.0;             // ! utilisé en dur dans le backend !
  ℕ X_EDGE_ELEMS = 4;               // ! utilisé en dur dans le backend !
  ℕ Y_EDGE_ELEMS = 4;               // ! utilisé en dur dans le backend !
  ℕ Z_EDGE_ELEMS = 1;               // ! utilisé en dur dans le backend !

  ℾ DEBUG = false;
  ℾ option_test_sod = true;
  ℾ option_semi_implicit = false;
  ℕ option_case = 1;
  ℝ option_coupling_coef=1;

  ℝ option_ini_zg_p = 1.0;
  ℝ option_ini_zd_p = 1.0;
  ℝ option_ini_zg_u = 0.0;
  ℝ option_ini_zd_u = 0.0;
  ℝ option_ini_zg_t = 1.0;
  ℝ option_ini_zd_t = 1.0;

  ℝ option_x_min = 0.0;
  ℝ option_y_min = 0.0;
  ℝ option_x_interface = LENGTH/2.0;
  ℝ option_x_max = LENGTH;
  ℝ option_y_max = LENGTH;
  
  ℝ option_δt_initial = 1e-7;       // ! utilisé en dur dans le backend lambda !
  ℝ option_δt_min = 1e-15;
  ℝ option_δt_max = 1.e-1;
  ℝ option_stoptime = 1.;           // ! utilisé en dur dans le backend lambda !
  ℝ option_δt_control = 0.15;       // Contrôle du pas de temps hydrodynamique

  ℝ option_δt_min_variation = 0.99; // Décroissance maximale tolérée du pas de temps
  ℝ option_δt_max_variation = 0.10; // Amplitude maximale de croissance du pas de temps
  ℾ option_δt_last_exact = true;
  ℾ option_ini_exact = true;
  
  ℾ option_dump_at_end =false;
  ℾ option_dump_output = false;          
  ℕ option_max_iterations = 0;      // ! utilisé en dur dans le backend lambda !
  ℝ dump_dt = 0.1;   
  ℝ option_rdq_α=0.3;
  ℝ λ = 1.0;
};

// ****************************************************************************
// * Déclaration des variables aux noeuds
// ****************************************************************************
nodes{
  ℝ³   node_u;                      // Vitesse nodale du maillage
  ℝ³ˣ³ node_u_mtx;               // Matrice aux sommets pour le calcul de la vitesse
  ℝ³   node_u_rhs;        // Second membre aux sommets pour le calcul de la vitesse
};

// ****************************************************************************
// * Déclaration des variables aux faces
// ****************************************************************************
faces{ ℝ l; };

// ****************************************************************************
// * Déclaration des variables aux mailles
// ****************************************************************************
cells{  
  ℝ³ center;                        // Centre des mailles
  ℝ V;                              // Volume des mailles
  ℝ p,pana;                         // Pression moyenne/analytique
  ℝ³ u,uana;                        // Vitesse moyenne/analytique
  ℝ θ,tana;                         // Temperature moyenne/analytique
  ℝ cell_δt;
  ℝ³ CQs[nodes];                    // Résultantes aux sommets
  ℝ³ˣ³ AQs[nodes];                  // Matrices de contributions aux sommets
  ℝ³ˣ³ BQs[nodes];                  // Matrices de contributions aux sommets
  ℝ³ reconstructed_u[nodes];        // Tableau des vitesses reconstruites
  ℝ reconstructed_p[nodes];         // Tableau des pressions reconstruites
  ℝ³ velocity_fluxes_Σ;
  ℝ pressure_fluxes_Σ;
  ℝ θ_source_Σ;
};

// ****************************************************************************
// * Globals
// ****************************************************************************
global{
  ℝ Δl,ε,σ_a,σ_s,σ;
  ℝ Vtot,e_tp,global_δt;
  ℝ pL2error,uL2error,tL2error;
};

// ****************************************************************************
// * Partie boucle de calcul ]+0.0,+∞[ 
// ****************************************************************************

// ****************************************************************************
// * calcAQs
// ****************************************************************************
∀ cells AQs @ 9.0 {
  ∀ node AQs = λ*(CQs⊗CQs)/norm(CQs);
}

// ****************************************************************************
// * calcBQs
// ****************************************************************************
∀ cells BQs @ 9.1 {
  const ℝ σIε = σ/ε;
  ∀ node BQs = σIε*(CQs⊗(coord[#]-center));
}

// ****************************************************************************
// * avgP
// ****************************************************************************
∀ cells avgP @ 10.0 { ∀ node reconstructed_p=p; }

// ****************************************************************************
// * avgU
// ****************************************************************************
∀ cells avgU @ 10.0 { ∀ node reconstructed_u=u; }

// ****************************************************************************
// * temporalSchemeIniMatricesAndSecondMember
// ****************************************************************************
∀ nodes iniNdMtxRhs @ 11.0{
  node_u_mtx=ℝ³ˣ³();
  node_u_mtx.z=ℝ³(0.,0.,1.);
  node_u_rhs=ℝ³(0.,0.,0.);
}

// ****************************************************************************
// * temporalSchemeAssembleMatricesAndSecondMember
// ****************************************************************************
∀ cells sumMtxRhs @ 12.0{
  ∀ node{
    const ℝ³ˣ³ local_matrix = AQs;
    node_u_mtx += AQs;
    node_u_mtx += BQs;
    node_u_rhs += local_matrix ⨂ reconstructed_u;
    node_u_rhs += CQs*reconstructed_p;
  }
}

// ****************************************************************************
// * Le calcul aux boundaries se fait ici @ 13.1,13.2
// ****************************************************************************
∀ outer faces outerBC @ 13.2 {
  const ℝ³ˣ³ I = matrix3x3Id();
  ∀ node{
    node_u_mtx = I;
    node_u_rhs = 0;
  }
}

// ****************************************************************************
// * synchronize pour Arcane node_u_mtx & node_u_mtx_second_member
// ****************************************************************************
syncMtxRhs @ 13.4{ synchronize(node_u_mtx); synchronize(node_u_rhs); }

// ****************************************************************************
// * temporalSchemeComputeNodesVelocity
// ****************************************************************************
∀ nodes invMtxRhs @ 14.0{
  const ℝ determinent = matrixDeterminant(node_u_mtx);
  assert(determinent!=0.0);
  node_u_mtx = inverseMatrix(node_u_mtx, determinent);
  node_u = node_u_mtx ⨂ node_u_rhs;
  node_u.z=0.0;
}
  
// ****************************************************************************
// * temporalSchemeIniFluxesSum
// ****************************************************************************
∀ cells iniFlxSum @ 14.0{
  velocity_fluxes_Σ = ℝ³(0.,0.,0.);
  pressure_fluxes_Σ = 0.0;
  θ_source_Σ = 0.0;
}

// ****************************************************************************
// * temporalSchemeComputeStandardFluxesSum
// ****************************************************************************
∀ cells calcSumFlx @ 16.0{
  ∀ node{
    const ℝ³ Δu = reconstructed_u-node_u;
    ℝ³ FQs = AQs ⨂ Δu;
    velocity_fluxes_Σ -= FQs/ε;
    pressure_fluxes_Σ -= (CQs⋅node_u)/ε;
  }
}

// ****************************************************************************
// * temporalSchemeApplyFluxesStandard
// ****************************************************************************
∀ cells applyStdFlx @ 19.0{
  u += δt*velocity_fluxes_Σ/V;
  p += δt*pressure_fluxes_Σ/V;
  if (option_coupling_coef==0) e_tp = (σ_a * δt)/(ε*ε+2.*σ_a*δt);
  if (option_coupling_coef==1) e_tp = 0.5*(1.-exp(-2.*σ_a*δt/(ε*ε)));
  if (option_coupling_coef==2) e_tp = σ_a*δt/(ε*ε);
  if (option_semi_implicit){    
    θ_source_Σ = e_tp/(1. + 2.*e_tp) * (p - θ);
    p-= θ_source_Σ;
    θ += θ_source_Σ;
  } else {
    θ_source_Σ = e_tp * (p - θ);
    p-= θ_source_Σ;
    θ += θ_source_Σ;
  }
}

// Impose les conditions aux bords
∀ outer cells outerCellsBC @ 19.1 {
  p=_exact_p_sol(time,center);
  u=_exact_u_sol(time,center);
  θ=_exact_t_sol(time,center);
}

// ****************************************************************************
// * X,V @ 23,24
// ****************************************************************************

// ****************************************************************************
// * hydroTimeStepCtrlCells: Calcul du δt par maille
// ****************************************************************************
∀ cells cellTimeStepCtrl @ 30.0{
  ℝ Σljr=0.0;
  ∀ node Σljr+=norm(CQs);
  cell_δt=V*ε/(2.0*Σljr);
}

// ****************************************************************************
// * Réduction min vers le global_δt
// ****************************************************************************
∀ cells global_δt <?= cell_δt @ 31.0;

// ****************************************************************************
// * dmpMsh @ 34.0
// ****************************************************************************

// ****************************************************************************
// * glaceTimeStepCtrl
// ****************************************************************************
globalTimeStepCtrl @ 35.0{
  ℝ new_δt=option_δt_control*global_δt;
  printf("\n\t[1m iteration=%d, time=%f, δt=%f[0m",iteration,time,global_δt);
  // on calcule les variations min et max autorisées
  const ℝ max_time_step = (1.0+option_δt_max_variation)*δt;
  const ℝ min_time_step = (1.0-option_δt_min_variation)*δt;
  if (new_δt > max_time_step) new_δt=max_time_step;
  if (new_δt < min_time_step) new_δt=min_time_step;
  new_δt = min(new_δt, option_δt_max);
  new_δt = max(new_δt, option_δt_min);
  // le dernier calcul se fait exactement au temps final
  if (option_δt_last_exact && ((time + new_δt) > option_stoptime)) 
      new_δt = option_stoptime - time;
  δt=new_δt;
}

// ****************************************************************************
// * dumpSolution @ 36.0
// ****************************************************************************

// ****************************************************************************
// * Test for QUIT
// ****************************************************************************
testForQuit @ 40.0{
  if (option_max_iterations!=0 && iteration >= option_max_iterations) exit;
  if ((time<(option_stoptime-δt))) return;
  if ((X_EDGE_ELEMS==8) && (Y_EDGE_ELEMS==8)) assert(tL2error==4.023316714693764e-02);
  if ((X_EDGE_ELEMS==4) && (Y_EDGE_ELEMS==4)) assert(tL2error==6.093190912983532e-02);
  exit;
}
